<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CreateFeatureService</name>
    </assembly>
    <members>
        <member name="T:CreateFeatureService.Dockpane1View">
            <summary>
            Interaction logic for Dockpane1View.xaml
            </summary>
            <summary>
            Dockpane1View
            </summary>
        </member>
        <member name="M:CreateFeatureService.Dockpane1View.#ctor">
            <summary>
            Built-in method to initialize all components within this dockpane
            </summary>
        </member>
        <member name="M:CreateFeatureService.Dockpane1View.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CreateFeatureService.Dockpane1ViewModel">
            <summary>
            This sample provides a new tab and controls that allow you to create
             feature service from the csv file that has been uploaded to AGOL or
             portal.
            </summary>
        </member>
        <member name="M:CreateFeatureService.Dockpane1ViewModel.CheckEmptyFields(System.Boolean)">
            <summary>
            Check if input fields are empty or invalid
            </summary>
            <returns></returns>
        </member>
        <member name="P:CreateFeatureService.Dockpane1ViewModel.CmdClearContent">
            <summary>
            Command called when "clear Contents" button is clicked
            </summary>
        </member>
        <member name="P:CreateFeatureService.Dockpane1ViewModel.CmdFixIt">
            <summary>
            Command called when "Fix It" button is clicked
            </summary>
        </member>
        <member name="P:CreateFeatureService.Dockpane1ViewModel.CmdAnalyzeSubmit">
            <summary>
            Command called when the "publishAnalyze" Button is clicked
            </summary>
        </member>
        <member name="P:CreateFeatureService.Dockpane1ViewModel.CmdPublishSubmit">
            <summary>
            Command called when the "publishSubmit" Button is clicked
            </summary>
        </member>
        <member name="M:CreateFeatureService.Dockpane1ViewModel.GetServiceName(System.String,System.String,System.String)">
            <summary>
            Gets the item title/name based on its item ID
            </summary>
            <param name="baseURI"></param>
            <param name="username"></param>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:CreateFeatureService.Dockpane1ViewModel.IsServiceNameAvailable(System.String,System.String,System.String)">
            <summary>
            Check if the service name is already in use
            </summary>
            <param name="baseURI"></param>
            <param name="serviceName"></param>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:CreateFeatureService.Dockpane1ViewModel.AnalyzeService(System.String,System.String,System.String,System.String)">
            <summary>
            Post "analyze" request on the portal item
            </summary>
            <param name="baseURI"></param>
            <param name="itemId"></param>
            <param name="fileType"></param>
            <param name="analyzeParameters"></param>
            <returns></returns>
        </member>
        <member name="M:CreateFeatureService.Dockpane1ViewModel.PublishService(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Post "publish" request on the portal item
            </summary>
            <param name="baseURI"></param>
            <param name="username"></param>
            <param name="itemId"></param>
            <param name="fileType"></param>
            <param name="publishParameters"></param>
            <returns>tuple: bool ok/failed string: result msg/error msg</returns>
        </member>
        <member name="M:CreateFeatureService.Dockpane1ViewModel.SerializeToString(System.Object)">
            <summary>
            Print the de-serialized object into JSON formatted string
            </summary>
            <param name="objectToSerialize"></param>
            <returns></returns>
        </member>
        <member name="M:CreateFeatureService.Dockpane1ViewModel.Show">
            <summary>
            Show the DockPane.
            </summary>
        </member>
        <member name="F:CreateFeatureService.Dockpane1ViewModel._heading">
            <summary>
            Text shown near the top of the DockPane.
            </summary>
        </member>
        <member name="T:CreateFeatureService.Dockpane1_ShowButton">
            <summary>
            Button implementation to show the DockPane.
            </summary>
        </member>
        <member name="T:CreateFeatureService.Module1">
            <summary>
            This sample provides a dockpane allowing to create a feature service from the csv file that has been uploaded to AGOL or portal.
            see [ArcGIS REST API / Publish Item](http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#//02r300000080000000)
            </summary>
            <remarks>
            1. Download the Community Sample data (see under the 'Resources' section for downloading sample data)
            1. Make sure that the Sample data is unzipped in c:\data 
            1. The project used for this sample is 'C:\Data\FeatureTest\FeatureTest.aprx'
            1. In Visual Studio click the Build menu. Then select Build Solution.
            1. Click Start button to open ArcGIS Pro.
            1. ArcGIS Pro will open, select the FeatureTest.aprx project
            1. Click on the Add-in tab on the ribbon and then on the "Click to create service" button which opens the 'Create a feature service' dockpane.
            ![UI](Screenshot/Screen1.png)  
            1. Click the '1. Use Active Portal' button to fill in the current active portal and user name.
            ![UI](Screenshot/Screen11.png)  
            1. Log into your active portal via a browser using the same credentials.  
            1. Go to the 'My Content' page on the portal and use the 'Add Item' function to upload the PointOfInterest.csv file which can be found in the solution folder for this add-in sample.
            ![UI](Screenshot/Screen2.png)  
            1. Click the '2. Get CSV Content' button to populate the 'Content Item to Publish' list and select 'PointOfInterest' from the drop-down list.
            ![UI](Screenshot/Screen3.png)  
            1. Click the '3. Analyze CSV Source' button to populate the 'Publish Parameter' field.
            1. Copy the content of the 'Publish Parameter' field into a json editor (i.e. Visual Studio)
            1. Edit the json according to ArcGIS REST API requirements to ensure that your data can be published.  In order to publish the sample PointOfInterest.csv file you can simply click the 'Fix it' button to paste in the content from PointOfInterest.json which is also provided in this solution.
            ![UI](Screenshot/Screen4.png) 
            1. The 'Fix It' button pastes the edited content into the  'Publish Parameter' field 
            1. Click the '4. Submit' button.
            ![UI](Screenshot/Screen5.png) 
            1. Copy the link returned by the successful Publish operation and use 'Map | Add Data From Path' dialog to paste in the link to the newly created feature data.  
            1. Open the Content dockpane and zoom the newly added KauaiPOI layer.
            ![UI](Screenshot/Screen6.png) 
            </remarks>
        </member>
        <member name="P:CreateFeatureService.Module1.Current">
            <summary>
            Retrieve the singleton instance to this module here
            </summary>
        </member>
        <member name="M:CreateFeatureService.Module1.CanUnload">
            <summary>
            Called by Framework when ArcGIS Pro is closing
            </summary>
            <returns>False to prevent Pro from closing, otherwise True</returns>
        </member>
        <member name="T:CreateFeatureService.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CreateFeatureService.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CreateFeatureService.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CreateFeatureService.Properties.Resources.PointOfInterest_json">
            <summary>
              Looks up a localized string similar to {
             &quot;type&quot;: &quot;csv&quot;,
             &quot;name&quot;: &quot;KauaiPOI&quot;,
             &quot;useBulkInserts&quot;: true,
             &quot;sourceUrl&quot;: &quot;&quot;,
             &quot;locationType&quot;: &quot;coordinates&quot;,
             &quot;maxRecordCount&quot;: 2000,
             &quot;geocodeServiceUrl&quot;: &quot;https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer&quot;,
             &quot;sourceCountry&quot;: &quot;us&quot;,
             &quot;sourceLocale&quot;: &quot;en&quot;,
             &quot;addressFields&quot;: { &quot;City&quot;: &quot;PLACENAME&quot; },
             &quot;standardizedFieldNames&quot;: {
               &quot;Address&quot;: &quot;Address or Place&quot;,
               &quot;Address2&quot;: &quot;Address2&quot;,
               &quot;Address3&quot;: &quot;Address3&quot;,
               &quot;City&quot;: &quot;City&quot;,
               &quot;Region&quot;: &quot;State&quot;,
            [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.FeatureService">
            <summary>
            DataContract for JSON response of a feature service. Unnecessary elements are commented out.
            Uncomment them, add classes if necessary to make them usable.
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.Layer">
            <summary>
            Datacontract class to be used with FeatureServeice class, WebMapServiceInfo class
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.FullExtent">
            <summary>
            Datacontract class to be used with FeatureServeice class
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.InitialExtent">
            <summary>
            Datacontract class to be used with FeatureServeice class
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.SpatialReference">
            <summary>
            Datacontract class to be used with FeatureServeice class
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.MapService">
            <summary>
            DataContract for JSON response of a hosted map service. Unnecessary elements are commented out.
            Uncomment them, add classes if necessary to make them usable.
            Needs cleaning up
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.SceneService">
            <summary>
            Data contract - for /serviceName/sceneServer/ resource
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.WebSceneServiceLayer">
            <summary>
            A generic service layer in a WebScene
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.ElevationLayer">
            <summary>
            Elevation layer within a basemap layer for a webscene
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.WebSceneLayerInfo">
            <summary>
            Root class when deserializing webscene item's data REST endpoint.
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.WebMapLayerInfo">
            <summary>
            Root class when deserializing webmap item's data REST endpoint.
            This is the starting point.
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.WebMapServiceLayer">
            <summary>
            Spec for layers in a WebMap
            Complete WebMap Layer Spec. Up to date as of Nov 18 2014.
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.OnlineItem">
            <summary>
            DataContract to deserialize any online item. Can be used for packages, services, webmaps, webscenes etc.
            For webmaps, webscenes, to know the contents, use WebMapLayerInfo, WebSceneLayerInfo classes.
            </summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.SearchGroupResult">
            <summary>Search Group result is similar to searched item result but the results have slightly different KVP
             Update: not inheriting SearchResult class. Not efficient but deserializer ends up with ambiguity.</summary>
        </member>
        <member name="T:ArcGIS.Desktop.Tests.APIHelpers.SharingDataContracts.SearchGroupItem">
            <summary>
            SearchGroupItem contains all of UserGroups objects and more KVPs
            </summary>
        </member>
    </members>
</doc>
