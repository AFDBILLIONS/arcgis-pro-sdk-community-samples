<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DictionarySymbolPreview</name>
    </assembly>
    <members>
        <member name="F:Xceed.Wpf.Toolkit.LiveExplorer.CodeBox.CodeSourceProperty">
            <summary>
            This is not the original implementation of CodeSource
            </summary>
            <remarks>Changed to be a dependency property with both setter and getter</remarks>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CSharpFormat.Keywords">
            <summary>
            The list of C# keywords.
            </summary>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CSharpFormat.Preprocessors">
            <summary>
            The list of C# preprocessors.
            </summary>
        </member>
        <member name="T:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CLikeFormat">
            <summary>
            Provides a base class for formatting languages similar to C.
            </summary>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CLikeFormat.CommentRegEx">
            <summary>
            Regular expression string to match single line and multi-line 
            comments (// and /* */). 
            </summary>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CLikeFormat.StringRegEx">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="T:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CodeFormat">
            <summary>
            Provides a base class for formatting most programming languages.
            </summary>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CodeFormat.Keywords">
            <summary>
            Must be overridden to provide a list of keywords defined in 
            each language.
            </summary>
            <remarks>
            Keywords must be separated with spaces.
            </remarks>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CodeFormat.Preprocessors">
            <summary>
            Can be overridden to provide a list of preprocessors defined in 
            each language.
            </summary>
            <remarks>
            Preprocessors must be separated with spaces.
            </remarks>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CodeFormat.StringRegEx">
            <summary>
            Must be overridden to provide a regular expression string
            to match strings literals. 
            </summary>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CodeFormat.CommentRegEx">
            <summary>
            Must be overridden to provide a regular expression string
            to match comments. 
            </summary>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CodeFormat.CaseSensitive">
            <summary>
            Determines if the language is case sensitive.
            </summary>
            <value><b>true</b> if the language is case sensitive, <b>false</b> 
            otherwise. The default is true.</value>
            <remarks>
            A case-insensitive language formatter must override this 
            property to return false.
            </remarks>
        </member>
        <member name="M:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CodeFormat.#ctor">
            <summary/>
        </member>
        <member name="M:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.CodeFormat.MatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            matching token in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="T:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat">
            <summary>
            Provides a base implementation for all code formatters.
            </summary>
            <remarks>
            <para>
            To display the formatted code on your web site, the web page must 
            refer to a stylesheet that defines the formatting for the different 
            CSS classes generated by CSharpFormat:
            .csharpcode, pre, .rem, .kwrd, .str, .op, .preproc, .alt, .lnum.
            </para>
            <para>
            Note that if you have multi-line comments in your source code
            (like /* ... */), the "line numbers" or "alternate line background" 
            options will generate code that is not strictly HTML 4.01 compliant. 
            The code will still look good with IE5+ or Mozilla 0.8+. 
            </para>
            </remarks>
        </member>
        <member name="M:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat.#ctor">
            <summary/>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat.TabSpaces">
            <summary>
            Gets or sets the tabs width.
            </summary>
            <value>The number of space characters to substitute for tab 
            characters. The default is <b>4</b>, unless overridden is a 
            derived class.</value>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat.LineNumbers">
            <summary>
            Enables or disables line numbers in output.
            </summary>
            <value>When <b>true</b>, line numbers are generated. 
            The default is <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat.Alternate">
            <summary>
            Enables or disables alternating line background.
            </summary>
            <value>When <b>true</b>, lines background is alternated. 
            The default is <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat.EmbedStyleSheet">
            <summary>
            Enables or disables the embedded CSS style sheet.
            </summary>
            <value>When <b>true</b>, the CSS &lt;style&gt; element is included 
            in the HTML output. The default is <b>false</b>.</value>
        </member>
        <member name="M:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat.FormatCode(System.String)">
            <summary>
            Transforms a source code string to HTML 4.01.
            </summary>
            <returns>A string containing the HTML formatted code.</returns>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat.CodeRegex">
            <summary>
            The regular expression used to capture language tokens.
            </summary>
        </member>
        <member name="P:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat.CodeParagraphGlobal">
            <summary>
            This is a List of Run's that can be added later to the string of code
            </summary>
        </member>
        <member name="M:Xceed.Wpf.Toolkit.LiveExplorer.Core.CodeFormatting.SourceFormat.MatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            matching token in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="T:Xceed.Wpf.Toolkit.LiveExplorer.Core.CSharpFormatter">
            <summary>
            Formats the RichTextBox text as colored C#
            </summary>
        </member>
        <member name="T:Xceed.Wpf.Toolkit.LiveExplorer.Core.XamlFormatter">
            <summary>
            Formats the RichTextBox text as colored Xaml
            </summary>
        </member>
        <member name="F:Mil2525.Fields.SymbolSet.SymbolSets">
            <summary>
            The complete list of supported MIL2525d Symbol Sets
            </summary>
        </member>
        <member name="T:DictionarySymbolPreview.Module1">
            <summary>
            Preview the Mil2525d symbol set that ships with ArcGIS Pro. Includes the 
            entities, modifiers, and coded domains exported from the <a href="https://github.com/Esri/joint-military-symbology-xml">JMSML</a> 
            (joint military symbology library) schema. These values are used to configure the symbol preview sample.
            </summary>
            <remarks>
            1. Download the Community Sample data (see under the 'Resources' section for downloading sample data).  The sample data contains a dataset called 'MilitaryOverlay' with sample data for use by this sample.  Make sure that the Sample data is unzipped in c:\data and "C:\Data\MilitaryOverlay" is available.
            1. Open this solution in Visual Studio 2015.  
            1. Click the build menu and select Build Solution.
            1. This solution is using the **Extended.Wpf.Toolkit Nuget**.  If needed, you can install the Nuget from the "Nuget Package Manager Console" by using this script: "Install-Package Extended.Wpf.Toolkit".
            1. Click the Start button to open ArCGIS Pro.  ArcGIS Pro will open.
            1. Open the project "MilitaryOverlay.aprx" in the "C:\Data\MilitaryOverlay" folder since this project some military symbolgy sample data.
            1. You can also add layers using the feature classes in the <i>MilitaryOverlay.gdb</i> that is distributed with the SDK sample data.
            1. Change the 'Appearance'->'Symbology' to "Dictionary" if it is not automatically set.
            1. Click on the ADD-IN tab
            1. Click on the "Show Mil2525d Symbol Preview" button.
            1. The Mil2525d Symbol Preview dockpane opens.
            1. Pick from the available symbol sets and change symbol attributes to preview different Mil2525d symbols
            ![UI](Screenshots/Screen1.png)
            1. The code window at the bottom shows the CSharp code you would need to make the corresponding CIMSymbol in your code.
            ![UI](Screenshots/Screen2.png)
            1. Use the selection tool to select a feature from any of the layers.
            1. The selected feature's attributes will be used to configure the Symbol Preview.
            ![UI](Screenshots/Screen3.png) 
            
            TODO:
            o Support 256x256 Preview area for the symbol
            o Support editing the selected feature attributes with the Symbol Preview settings
            
            <para><b>Note:</b></para>
            The JMSML schema and associated tools to generate the Mil2525d data can be found online
            <a href="https://github.com/Esri/joint-military-symbology-xml">here</a> on github. 
            The sample can be used against any ESRI military features data set for the MIL2525d specification. Sample 
            data is included with the Pro samples but other example data can be found 
            <a href="https://github.com/Esri/military-features-data">here</a>.
            
            </remarks>
        </member>
        <member name="P:DictionarySymbolPreview.Module1.Current">
            <summary>
            Retrieve the singleton instance to this module here
            </summary>
        </member>
        <member name="M:DictionarySymbolPreview.Module1.Initialize">
            <summary>
            When overridden in a derived class, gives the custom Module a chance to initialize itself and return its status to the calling Framework.
            </summary>
            <remarks>
            <para>
            A custom Module has two opportunities to initialize itself: its class constructor and its Initialize method. The Framework calls both 
                        functions whenever a Module is loaded. Modules load either explicitly with <c>FrameworkApplication.FindModule</c> or implicitly whenever
                        any of their DAML elements (Panes, DockPanes, Controls, etc) are loaded. For example, when a DockPane or a Button on a Ribbon Tab is created, 
                        their parent module will automatically load if it hasn't already done so.
            </para>
            <para>
            The Initialize method has the added benefit of returning whether the initialization was successful
                        or not. If initialization fails, the Framework immediately calls <c>Uninitialize</c>.
            </para>
            </remarks>
            <returns/>
        </member>
        <member name="M:DictionarySymbolPreview.Module1.HasMil2525Attributes(ArcGIS.Desktop.Mapping.BasicFeatureLayer)">
            <summary>
            Check if the given layer supports the Mil2525d spec.
            </summary>
            <remarks>Currently checks for symbolset</remarks>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:DictionarySymbolPreview.Module1.CanUnload">
            <summary>
            Called by Framework when ArcGIS Pro is closing
            </summary>
            <returns>False to prevent Pro from closing, otherwise True</returns>
        </member>
        <member name="T:DictionarySymbolPreview.SymbolPreviewView">
            <summary>
            Interaction logic for SymbolPreviewView.xaml
            </summary>
            <summary>
            SymbolPreviewView
            </summary>
        </member>
        <member name="M:DictionarySymbolPreview.SymbolPreviewView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DictionarySymbolPreview.SymbolPreviewViewModel.Show">
            <summary>
            Show the DockPane.
            </summary>
        </member>
        <member name="F:DictionarySymbolPreview.SymbolPreviewViewModel._heading">
            <summary>
            Text shown near the top of the DockPane.
            </summary>
        </member>
        <member name="M:DictionarySymbolPreview.SymbolPreviewViewModel.SetSelected(ArcGIS.Desktop.Mapping.BasicFeatureLayer,System.Int64)">
            <summary>
            Sets the layer and objectid of the selected feature
            </summary>
            <param name="layer"></param>
            <param name="oid"></param>
        </member>
        <member name="M:DictionarySymbolPreview.SymbolPreviewViewModel.GetSelected">
            <summary>
            Gets the layer and objectid of the selected feature
            </summary>
            <returns></returns>
        </member>
        <member name="T:DictionarySymbolPreview.SymbolPreview_ShowButton">
            <summary>
            Button implementation to show the DockPane.
            </summary>
        </member>
        <member name="T:DictionarySymbolPreview.UI.DictionarySymbolView">
            <summary>
            Interaction logic for DictionarySymbolView.xaml
            </summary>
            <summary>
            DictionarySymbolView
            </summary>
        </member>
        <member name="M:DictionarySymbolPreview.UI.DictionarySymbolView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
