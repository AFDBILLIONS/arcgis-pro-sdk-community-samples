/*

   Copyright 2016 Esri

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

   See the License for the specific language governing permissions and
   limitations under the License.

*/
//Generate_Metadata.tt
//---------------------------------------------------------------------------------
//This code was generated by a tool. Any changes or edits to its content will be lost.
//05/27/2016 13:16:09
//
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;

namespace Mil2525.Fields {

    using Mil2525.Domains;

    public partial class SymbolSet {

        public SymbolSet() {
        }

        public SymbolSet(string schemaName, string schemaNameAlias, int symbolSetID) {
            SchemaName = schemaName;
            SchemaNameAlias = schemaNameAlias;
            SymbolSetID = symbolSetID;
        }

        public string SchemaName { get; set; }
        public string SchemaNameAlias { get; set; }
        public int SymbolSetID { get; set; }

        public string DisplayString => string.Format("{0}, Symbolset ID: {1:00}", SchemaName, SymbolSetID);
    }

    public abstract partial class Fields_Base : INotifyPropertyChanged {

	    protected Dictionary<string, object> _dictionaryFormattedValues = new Dictionary<string, object>();
        protected Dictionary<string, object> _dictionaryValues = new Dictionary<string, object>();
        protected string _schemaName = "";
        protected string _symbolSetName = "";

        public event PropertyChangedEventHandler PropertyChanged = delegate { };

        [Browsable(false)]
        public Dictionary<string, object> ChangedAttributeValues => _dictionaryValues;

		[Browsable(false)]
		public Dictionary<string, object> ChangedAttributeFormattedValues => _dictionaryFormattedValues;

        [Browsable(false)]
        public string SchemaName => _schemaName;

        [Browsable(false)]
        public string SymbolSetName => _symbolSetName;

		public virtual void ChangeAttributeValues(Dictionary<string, object> attributes) {
            var props = this.GetType().GetProperties().ToLookup(prop => prop.Name.ToLower());
            foreach (var kvp in attributes) {
                var prop = props[kvp.Key.ToLower()].FirstOrDefault();
                if (prop != null && prop.CanWrite) {
                    prop.SetValue(this, kvp.Value);
                }
            }
        }

        public virtual Dictionary<string, object> GetAttributeValues() {
            return this.GetType().GetProperties().ToDictionary(prop => prop.Name.ToLower(), prop => prop.GetValue(this));
        }


        protected virtual void OnPropertyChanged(object value = null, object formattedValue = null, [CallerMemberName] string propName = "") {
            _dictionaryValues[propName] = value;
			if (formattedValue == null)
				formattedValue = value;
			_dictionaryFormattedValues[propName] = formattedValue;
            PropertyChanged(this, new PropertyChangedEventArgs(propName));
        }
    }

	
	public class Fields_Air : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Air Entity")]
		[ItemsSource(typeof(Air_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Air_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier2;

		[Category("Optional")]
		[DisplayName("modifier2")]
		[Description("Modifier 2")]
		[ItemsSource(typeof(Air_Modifier_TwosItemsSource))]
		public int modifier2 {
			get { return _modifier2; }
			set {
				_modifier2 = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_Air() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 1;
			_dictionaryValues["symbolset"] = 1;
			_dictionaryFormattedValues["symbolset"] = 1;
			_schemaName = "Air";
			_symbolSetName = "symbolset 01";
			_symbolentity = (int)Air_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_Air_Missile : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Air Entity")]
		[ItemsSource(typeof(Air_Missile_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Air_Missile_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier2;

		[Category("Optional")]
		[DisplayName("modifier2")]
		[Description("Modifier 2")]
		[ItemsSource(typeof(Air_Missile_Modifier_TwosItemsSource))]
		public int modifier2 {
			get { return _modifier2; }
			set {
				_modifier2 = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_Air_Missile() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 2;
			_dictionaryValues["symbolset"] = 2;
			_dictionaryFormattedValues["symbolset"] = 2;
			_schemaName = "Air (Missile)";
			_symbolSetName = "symbolset 02";
			_symbolentity = (int)Air_Missile_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_Space : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Space Entity")]
		[ItemsSource(typeof(Space_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Space_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier2;

		[Category("Optional")]
		[DisplayName("modifier2")]
		[Description("Modifier 2")]
		[ItemsSource(typeof(Space_Modifier_TwosItemsSource))]
		public int modifier2 {
			get { return _modifier2; }
			set {
				_modifier2 = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_Space() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 5;
			_dictionaryValues["symbolset"] = 5;
			_dictionaryFormattedValues["symbolset"] = 5;
			_schemaName = "Space";
			_symbolSetName = "symbolset 05";
			_symbolentity = (int)Space_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_Space_Missile : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Space Entity")]
		[ItemsSource(typeof(Space_Missile_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Space_Missile_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier2;

		[Category("Optional")]
		[DisplayName("modifier2")]
		[Description("Modifier 2")]
		[ItemsSource(typeof(Space_Missile_Modifier_TwosItemsSource))]
		public int modifier2 {
			get { return _modifier2; }
			set {
				_modifier2 = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_Space_Missile() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 6;
			_dictionaryValues["symbolset"] = 6;
			_dictionaryFormattedValues["symbolset"] = 6;
			_schemaName = "Space (Missile)";
			_symbolSetName = "symbolset 06";
			_symbolentity = (int)Space_Missile_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_Units : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Unit Entity")]
		[ItemsSource(typeof(Land_Unit_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Land_Unit_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier2;

		[Category("Optional")]
		[DisplayName("modifier2")]
		[Description("Modifier 2")]
		[ItemsSource(typeof(Land_Unit_Modifier_TwosItemsSource))]
		public int modifier2 {
			get { return _modifier2; }
			set {
				_modifier2 = value;
				OnPropertyChanged(value);
			}
		}

		private int _specialentitysubtype;

		[Category("Optional")]
		[DisplayName("specialentitysubtype")]
		[Description("Special Entity Subtype")]
		[ItemsSource(typeof(Land_Unit_Special_Entity_SubtypeItemsSource))]
		public int specialentitysubtype {
			get { return _specialentitysubtype; }
			set {
				_specialentitysubtype = value;
				OnPropertyChanged(value);
			}
		}

		private int _echelon;

		[Category("Optional")]
		[DisplayName("echelon")]
		[Description("Echelon")]
		[ItemsSource(typeof(EchelonsItemsSource))]
		public int echelon {
			get { return _echelon; }
			set {
				_echelon = value;
				OnPropertyChanged(value);
			}
		}

		private int _status;

		[Category("Optional")]
		[DisplayName("status")]
		[Description("Status")]
		[ItemsSource(typeof(StatusesItemsSource))]
		public int status {
			get { return _status; }
			set {
				_status = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _higherformation;

		[Category("Other")]
		[DisplayName("higherformation")]
		[Description("Higher Formation")]
		public string higherformation {
			get { return _higherformation; }
			set {
				_higherformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _reinforced;

		[Category("Optional")]
		[DisplayName("reinforced")]
		[Description("Reinforced or Reduced")]
		[ItemsSource(typeof(ReinforcedItemsSource))]
		public int reinforced {
			get { return _reinforced; }
			set {
				_reinforced = value;
				OnPropertyChanged(value);
			}
		}

		private string _combateffectiveness;

		[Category("Optional")]
		[DisplayName("combateffectiveness")]
		[Description("Combat Effectiveness")]
		[ItemsSource(typeof(CombatEffectivenessItemsSource))]
		public string combateffectiveness {
			get { return _combateffectiveness; }
			set {
				_combateffectiveness = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _specialheadquarters;

		[Category("Other")]
		[DisplayName("specialheadquarters")]
		[Description("Special C2 Headquarters")]
		public string specialheadquarters {
			get { return _specialheadquarters; }
			set {
				_specialheadquarters = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		public Fields_Units() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 10;
			_dictionaryValues["symbolset"] = 10;
			_dictionaryFormattedValues["symbolset"] = 10;
			_schemaName = "Units";
			_symbolSetName = "symbolset 10";
			_symbolentity = (int)Land_Unit_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_Civilian : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Civilian Entity")]
		[ItemsSource(typeof(Land_Unit_Civilian_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Land_Unit_Civilian_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier2;

		[Category("Optional")]
		[DisplayName("modifier2")]
		[Description("Modifier 2")]
		[ItemsSource(typeof(Land_Unit_Civilian_Modifier_TwosItemsSource))]
		public int modifier2 {
			get { return _modifier2; }
			set {
				_modifier2 = value;
				OnPropertyChanged(value);
			}
		}

		private int _echelon;

		[Category("Optional")]
		[DisplayName("echelon")]
		[Description("Echelon")]
		[ItemsSource(typeof(EchelonsItemsSource))]
		public int echelon {
			get { return _echelon; }
			set {
				_echelon = value;
				OnPropertyChanged(value);
			}
		}

		private int _status;

		[Category("Optional")]
		[DisplayName("status")]
		[Description("Status")]
		[ItemsSource(typeof(StatusesItemsSource))]
		public int status {
			get { return _status; }
			set {
				_status = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _higherformation;

		[Category("Other")]
		[DisplayName("higherformation")]
		[Description("Higher Formation")]
		public string higherformation {
			get { return _higherformation; }
			set {
				_higherformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _reinforced;

		[Category("Optional")]
		[DisplayName("reinforced")]
		[Description("Reinforced or Reduced")]
		[ItemsSource(typeof(ReinforcedItemsSource))]
		public int reinforced {
			get { return _reinforced; }
			set {
				_reinforced = value;
				OnPropertyChanged(value);
			}
		}

		private string _combateffectiveness;

		[Category("Optional")]
		[DisplayName("combateffectiveness")]
		[Description("Combat Effectiveness")]
		[ItemsSource(typeof(CombatEffectivenessItemsSource))]
		public string combateffectiveness {
			get { return _combateffectiveness; }
			set {
				_combateffectiveness = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _specialheadquarters;

		[Category("Other")]
		[DisplayName("specialheadquarters")]
		[Description("Special C2 Headquarters")]
		public string specialheadquarters {
			get { return _specialheadquarters; }
			set {
				_specialheadquarters = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_Civilian() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 11;
			_dictionaryValues["symbolset"] = 11;
			_dictionaryFormattedValues["symbolset"] = 11;
			_schemaName = "Civilian";
			_symbolSetName = "symbolset 11";
			_symbolentity = (int)Land_Unit_Civilian_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_LandEquipment : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Equipment Entity")]
		[ItemsSource(typeof(Land_Equipment_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Land_Equipment_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _mobility;

		[Category("Optional")]
		[DisplayName("mobility")]
		[Description("Mobility Indicator")]
		[ItemsSource(typeof(MobilitiesItemsSource))]
		public int mobility {
			get { return _mobility; }
			set {
				_mobility = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _hostile;

		[Category("Other")]
		[DisplayName("hostile")]
		[Description("Hostile (ENY)")]
		public string hostile {
			get { return _hostile; }
			set {
				_hostile = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _signatureequipment;

		[Category("Other")]
		[DisplayName("signatureequipment")]
		[Description("Signature Equipment (hostile)")]
		public string signatureequipment {
			get { return _signatureequipment; }
			set {
				_signatureequipment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_LandEquipment() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 15;
			_dictionaryValues["symbolset"] = 15;
			_dictionaryFormattedValues["symbolset"] = 15;
			_schemaName = "LandEquipment";
			_symbolSetName = "symbolset 15";
			_symbolentity = (int)Land_Equipment_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_Installations : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Installation Entity")]
		[ItemsSource(typeof(Land_Installation_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Land_Installation_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier2;

		[Category("Optional")]
		[DisplayName("modifier2")]
		[Description("Modifier 2")]
		[ItemsSource(typeof(Land_Installation_Modifier_TwosItemsSource))]
		public int modifier2 {
			get { return _modifier2; }
			set {
				_modifier2 = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _combateffectiveness;

		[Category("Optional")]
		[DisplayName("combateffectiveness")]
		[Description("Combat Effectiveness")]
		[ItemsSource(typeof(CombatEffectivenessItemsSource))]
		public string combateffectiveness {
			get { return _combateffectiveness; }
			set {
				_combateffectiveness = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_Installations() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 20;
			_dictionaryValues["symbolset"] = 20;
			_dictionaryFormattedValues["symbolset"] = 20;
			_schemaName = "Installations";
			_symbolSetName = "symbolset 20";
			_symbolentity = (int)Land_Installation_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_ControlMeasuresPoints : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Point Entity")]
		[ItemsSource(typeof(Control_Measure_Point_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _status;

		[Category("Optional")]
		[DisplayName("status")]
		[Description("Status")]
		[ItemsSource(typeof(StatusesItemsSource))]
		public int status {
			get { return _status; }
			set {
				_status = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _uniquedesignation2;

		[Category("Other")]
		[DisplayName("uniquedesignation2")]
		[Description("Unique Designation 2")]
		public string uniquedesignation2 {
			get { return _uniquedesignation2; }
			set {
				_uniquedesignation2 = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation2;

		[Category("Other")]
		[DisplayName("additionalinformation2")]
		[Description("Additional Information 2")]
		public string additionalinformation2 {
			get { return _additionalinformation2; }
			set {
				_additionalinformation2 = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _distance;

		[Category("Other")]
		[DisplayName("distance")]
		[Description("Distance (meters)")]
		public double distance {
			get { return _distance; }
			set {
				_distance = value;
				OnPropertyChanged(value);
			}
		}

		private int _azimuth;

		[Category("Other")]
		[DisplayName("azimuth")]
		[Description("Azimuth (degrees)")]
		public int azimuth {
			get { return _azimuth; }
			set {
				_azimuth = value;
				OnPropertyChanged(value);
			}
		}

		private string _targetdesignator;

		[Category("Other")]
		[DisplayName("targetdesignator")]
		[Description("Target Designator")]
		public string targetdesignator {
			get { return _targetdesignator; }
			set {
				_targetdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _hostile;

		[Category("Other")]
		[DisplayName("hostile")]
		[Description("Hostile (ENY)")]
		public string hostile {
			get { return _hostile; }
			set {
				_hostile = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _optionallabel;

		[Category("Other")]
		[DisplayName("optionallabel")]
		[Description("Optional Label")]
		public string optionallabel {
			get { return _optionallabel; }
			set {
				_optionallabel = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		public Fields_ControlMeasuresPoints() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_symbolset = 25;
			_dictionaryValues["symbolset"] = 25;
			_dictionaryFormattedValues["symbolset"] = 25;
			_schemaName = "ControlMeasuresPoints";
			_symbolSetName = "symbolset 25";
			_symbolentity = (int)Control_Measure_Point_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_ControlMeasuresLines : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Line Entity")]
		[ItemsSource(typeof(Control_Measure_Line_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _echelon;

		[Category("Optional")]
		[DisplayName("echelon")]
		[Description("Echelon")]
		[ItemsSource(typeof(EchelonsItemsSource))]
		public int echelon {
			get { return _echelon; }
			set {
				_echelon = value;
				OnPropertyChanged(value);
			}
		}

		private int _status;

		[Category("Optional")]
		[DisplayName("status")]
		[Description("Status")]
		[ItemsSource(typeof(StatusesItemsSource))]
		public int status {
			get { return _status; }
			set {
				_status = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _uniquedesignation2;

		[Category("Other")]
		[DisplayName("uniquedesignation2")]
		[Description("Unique Designation 2")]
		public string uniquedesignation2 {
			get { return _uniquedesignation2; }
			set {
				_uniquedesignation2 = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _distance;

		[Category("Other")]
		[DisplayName("distance")]
		[Description("Distance (meters)")]
		public double distance {
			get { return _distance; }
			set {
				_distance = value;
				OnPropertyChanged(value);
			}
		}

		private int _azimuth;

		[Category("Other")]
		[DisplayName("azimuth")]
		[Description("Azimuth (degrees)")]
		public int azimuth {
			get { return _azimuth; }
			set {
				_azimuth = value;
				OnPropertyChanged(value);
			}
		}

		private string _targetdesignator;

		[Category("Other")]
		[DisplayName("targetdesignator")]
		[Description("Target Designator")]
		public string targetdesignator {
			get { return _targetdesignator; }
			set {
				_targetdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _length;

		[Category("Other")]
		[DisplayName("length")]
		[Description("Length")]
		public double length {
			get { return _length; }
			set {
				_length = value;
				OnPropertyChanged(value);
			}
		}

		private double _width;

		[Category("Other")]
		[DisplayName("width")]
		[Description("Width")]
		public double width {
			get { return _width; }
			set {
				_width = value;
				OnPropertyChanged(value);
			}
		}

		private string _hostile;

		[Category("Other")]
		[DisplayName("hostile")]
		[Description("Hostile (ENY)")]
		public string hostile {
			get { return _hostile; }
			set {
				_hostile = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private double _z2;

		[Category("Other")]
		[DisplayName("z2")]
		[Description("Altitude/Depth 2")]
		public double z2 {
			get { return _z2; }
			set {
				_z2 = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _usecontrolpoints;

		[Category("Optional")]
		[DisplayName("usecontrolpoints")]
		[Description("Use Control Points")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int usecontrolpoints {
			get { return _usecontrolpoints; }
			set {
				_usecontrolpoints = value;
				OnPropertyChanged(value);
			}
		}

		private string _optionallabel;

		[Category("Other")]
		[DisplayName("optionallabel")]
		[Description("Optional Label")]
		public string optionallabel {
			get { return _optionallabel; }
			set {
				_optionallabel = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		public Fields_ControlMeasuresLines() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_symbolset = 25;
			_dictionaryValues["symbolset"] = 25;
			_dictionaryFormattedValues["symbolset"] = 25;
			_schemaName = "ControlMeasuresLines";
			_symbolSetName = "symbolset 25";
			_symbolentity = (int)Control_Measure_Line_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_ControlMeasuresAreas : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Area Entity")]
		[ItemsSource(typeof(Control_Measure_Area_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _echelon;

		[Category("Optional")]
		[DisplayName("echelon")]
		[Description("Echelon")]
		[ItemsSource(typeof(EchelonsItemsSource))]
		public int echelon {
			get { return _echelon; }
			set {
				_echelon = value;
				OnPropertyChanged(value);
			}
		}

		private int _status;

		[Category("Optional")]
		[DisplayName("status")]
		[Description("Status")]
		[ItemsSource(typeof(StatusesItemsSource))]
		public int status {
			get { return _status; }
			set {
				_status = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation2;

		[Category("Other")]
		[DisplayName("additionalinformation2")]
		[Description("Additional Information 2")]
		public string additionalinformation2 {
			get { return _additionalinformation2; }
			set {
				_additionalinformation2 = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _distance;

		[Category("Other")]
		[DisplayName("distance")]
		[Description("Distance (meters)")]
		public double distance {
			get { return _distance; }
			set {
				_distance = value;
				OnPropertyChanged(value);
			}
		}

		private int _azimuth;

		[Category("Other")]
		[DisplayName("azimuth")]
		[Description("Azimuth (degrees)")]
		public int azimuth {
			get { return _azimuth; }
			set {
				_azimuth = value;
				OnPropertyChanged(value);
			}
		}

		private double _distance2;

		[Category("Other")]
		[DisplayName("distance2")]
		[Description("Distance 2 (meters)")]
		public double distance2 {
			get { return _distance2; }
			set {
				_distance2 = value;
				OnPropertyChanged(value);
			}
		}

		private string _targetdesignator;

		[Category("Other")]
		[DisplayName("targetdesignator")]
		[Description("Target Designator")]
		public string targetdesignator {
			get { return _targetdesignator; }
			set {
				_targetdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _hostile;

		[Category("Other")]
		[DisplayName("hostile")]
		[Description("Hostile (ENY)")]
		public string hostile {
			get { return _hostile; }
			set {
				_hostile = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private double _x2;

		[Category("Other")]
		[DisplayName("x2")]
		[Description("X Location 2")]
		public double x2 {
			get { return _x2; }
			set {
				_x2 = value;
				OnPropertyChanged(value);
			}
		}

		private double _y2;

		[Category("Other")]
		[DisplayName("y2")]
		[Description("Y Location 2")]
		public double y2 {
			get { return _y2; }
			set {
				_y2 = value;
				OnPropertyChanged(value);
			}
		}

		private double _z2;

		[Category("Other")]
		[DisplayName("z2")]
		[Description("Altitude/Depth 2")]
		public double z2 {
			get { return _z2; }
			set {
				_z2 = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _optionallabel;

		[Category("Other")]
		[DisplayName("optionallabel")]
		[Description("Optional Label")]
		public string optionallabel {
			get { return _optionallabel; }
			set {
				_optionallabel = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		public Fields_ControlMeasuresAreas() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_symbolset = 25;
			_dictionaryValues["symbolset"] = 25;
			_dictionaryFormattedValues["symbolset"] = 25;
			_schemaName = "ControlMeasuresAreas";
			_symbolSetName = "symbolset 25";
			_symbolentity = (int)Control_Measure_Area_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_SeaSurface : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Surface Entity")]
		[ItemsSource(typeof(Sea_Surface_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Sea_Surface_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier2;

		[Category("Optional")]
		[DisplayName("modifier2")]
		[Description("Modifier 2")]
		[ItemsSource(typeof(Sea_Surface_Modifier_TwosItemsSource))]
		public int modifier2 {
			get { return _modifier2; }
			set {
				_modifier2 = value;
				OnPropertyChanged(value);
			}
		}

		private int _array;

		[Category("Optional")]
		[DisplayName("array")]
		[Description("Auxiliary Equipment Indicator")]
		[ItemsSource(typeof(ArraysItemsSource))]
		public int array {
			get { return _array; }
			set {
				_array = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _specialheadquarters;

		[Category("Other")]
		[DisplayName("specialheadquarters")]
		[Description("Special C2 Headquarters")]
		public string specialheadquarters {
			get { return _specialheadquarters; }
			set {
				_specialheadquarters = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _specialdesignator;

		[Category("Other")]
		[DisplayName("specialdesignator")]
		[Description("Special Track Designator")]
		public string specialdesignator {
			get { return _specialdesignator; }
			set {
				_specialdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _guardedunit;

		[Category("Other")]
		[DisplayName("guardedunit")]
		[Description("Guarded Unit")]
		public string guardedunit {
			get { return _guardedunit; }
			set {
				_guardedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_SeaSurface() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 30;
			_dictionaryValues["symbolset"] = 30;
			_dictionaryFormattedValues["symbolset"] = 30;
			_schemaName = "SeaSurface";
			_symbolSetName = "symbolset 30";
			_symbolentity = (int)Sea_Surface_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_SeaSubSurface : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Subsurface Entity")]
		[ItemsSource(typeof(Sea_Subsurface_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Sea_Subsurface_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier2;

		[Category("Optional")]
		[DisplayName("modifier2")]
		[Description("Modifier 2")]
		[ItemsSource(typeof(Sea_Subsurface_Modifier_TwosItemsSource))]
		public int modifier2 {
			get { return _modifier2; }
			set {
				_modifier2 = value;
				OnPropertyChanged(value);
			}
		}

		private int _array;

		[Category("Optional")]
		[DisplayName("array")]
		[Description("Auxiliary Equipment Indicator")]
		[ItemsSource(typeof(ArraysItemsSource))]
		public int array {
			get { return _array; }
			set {
				_array = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _hostile;

		[Category("Other")]
		[DisplayName("hostile")]
		[Description("Hostile (ENY)")]
		public string hostile {
			get { return _hostile; }
			set {
				_hostile = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _signatureequipment;

		[Category("Other")]
		[DisplayName("signatureequipment")]
		[Description("Signature Equipment (hostile)")]
		public string signatureequipment {
			get { return _signatureequipment; }
			set {
				_signatureequipment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _specialheadquarters;

		[Category("Other")]
		[DisplayName("specialheadquarters")]
		[Description("Special C2 Headquarters")]
		public string specialheadquarters {
			get { return _specialheadquarters; }
			set {
				_specialheadquarters = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_SeaSubSurface() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 35;
			_dictionaryValues["symbolset"] = 35;
			_dictionaryFormattedValues["symbolset"] = 35;
			_schemaName = "SeaSubSurface";
			_symbolSetName = "symbolset 35";
			_symbolentity = (int)Sea_Subsurface_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_SeaSubSurface_Mine_Warfare : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Subsurface Entity")]
		[ItemsSource(typeof(Sea_Subsurface_Mine_Warfare_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _array;

		[Category("Optional")]
		[DisplayName("array")]
		[Description("Auxiliary Equipment Indicator")]
		[ItemsSource(typeof(ArraysItemsSource))]
		public int array {
			get { return _array; }
			set {
				_array = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _hostile;

		[Category("Other")]
		[DisplayName("hostile")]
		[Description("Hostile (ENY)")]
		public string hostile {
			get { return _hostile; }
			set {
				_hostile = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _signatureequipment;

		[Category("Other")]
		[DisplayName("signatureequipment")]
		[Description("Signature Equipment (hostile)")]
		public string signatureequipment {
			get { return _signatureequipment; }
			set {
				_signatureequipment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _specialheadquarters;

		[Category("Other")]
		[DisplayName("specialheadquarters")]
		[Description("Special C2 Headquarters")]
		public string specialheadquarters {
			get { return _specialheadquarters; }
			set {
				_specialheadquarters = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_SeaSubSurface_Mine_Warfare() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 36;
			_dictionaryValues["symbolset"] = 36;
			_dictionaryFormattedValues["symbolset"] = 36;
			_schemaName = "SeaSubSurface (Mine Warfare)";
			_symbolSetName = "symbolset 36";
			_symbolentity = (int)Sea_Subsurface_Mine_Warfare_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_Activities : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Activity Entity")]
		[ItemsSource(typeof(Activities_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Activities_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private int _echelon;

		[Category("Optional")]
		[DisplayName("echelon")]
		[Description("Echelon")]
		[ItemsSource(typeof(EchelonsItemsSource))]
		public int echelon {
			get { return _echelon; }
			set {
				_echelon = value;
				OnPropertyChanged(value);
			}
		}

		private int _status;

		[Category("Optional")]
		[DisplayName("status")]
		[Description("Status")]
		[ItemsSource(typeof(StatusesItemsSource))]
		public int status {
			get { return _status; }
			set {
				_status = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _reinforced;

		[Category("Optional")]
		[DisplayName("reinforced")]
		[Description("Reinforced or Reduced")]
		[ItemsSource(typeof(ReinforcedItemsSource))]
		public int reinforced {
			get { return _reinforced; }
			set {
				_reinforced = value;
				OnPropertyChanged(value);
			}
		}

		private string _combateffectiveness;

		[Category("Optional")]
		[DisplayName("combateffectiveness")]
		[Description("Combat Effectiveness")]
		[ItemsSource(typeof(CombatEffectivenessItemsSource))]
		public string combateffectiveness {
			get { return _combateffectiveness; }
			set {
				_combateffectiveness = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_Activities() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 40;
			_dictionaryValues["symbolset"] = 40;
			_dictionaryFormattedValues["symbolset"] = 40;
			_schemaName = "Activities";
			_symbolSetName = "symbolset 40";
			_symbolentity = (int)Activities_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_METOCPoints_Atmospheric : Fields_Base {

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("METOC Point Entity")]
		[ItemsSource(typeof(METOC_Atmospheric_Point_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _optionallabel;

		[Category("Other")]
		[DisplayName("optionallabel")]
		[Description("Optional Label")]
		public string optionallabel {
			get { return _optionallabel; }
			set {
				_optionallabel = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		public Fields_METOCPoints_Atmospheric() {
			_symbolset = 45;
			_dictionaryValues["symbolset"] = 45;
			_dictionaryFormattedValues["symbolset"] = 45;
			_schemaName = "METOCPoints (Atmospheric)";
			_symbolSetName = "symbolset 45";
			_symbolentity = (int)METOC_Atmospheric_Point_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_METOCPoints_Oceanographic : Fields_Base {

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("METOC Point Entity")]
		[ItemsSource(typeof(METOC_Oceanographic_Point_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _optionallabel;

		[Category("Other")]
		[DisplayName("optionallabel")]
		[Description("Optional Label")]
		public string optionallabel {
			get { return _optionallabel; }
			set {
				_optionallabel = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		public Fields_METOCPoints_Oceanographic() {
			_symbolset = 46;
			_dictionaryValues["symbolset"] = 46;
			_dictionaryFormattedValues["symbolset"] = 46;
			_schemaName = "METOCPoints (Oceanographic)";
			_symbolSetName = "symbolset 46";
			_symbolentity = (int)METOC_Oceanographic_Point_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_METOCLines_Atmospheric : Fields_Base {

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("METOC Line Entity")]
		[ItemsSource(typeof(METOC_Atmospheric_Line_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _optionallabel;

		[Category("Other")]
		[DisplayName("optionallabel")]
		[Description("Optional Label")]
		public string optionallabel {
			get { return _optionallabel; }
			set {
				_optionallabel = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		public Fields_METOCLines_Atmospheric() {
			_symbolset = 45;
			_dictionaryValues["symbolset"] = 45;
			_dictionaryFormattedValues["symbolset"] = 45;
			_schemaName = "METOCLines (Atmospheric)";
			_symbolSetName = "symbolset 45";
			_symbolentity = (int)METOC_Atmospheric_Line_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_METOCLines_Oceanographic : Fields_Base {

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("METOC Line Entity")]
		[ItemsSource(typeof(METOC_Oceanographic_Line_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _optionallabel;

		[Category("Other")]
		[DisplayName("optionallabel")]
		[Description("Optional Label")]
		public string optionallabel {
			get { return _optionallabel; }
			set {
				_optionallabel = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		public Fields_METOCLines_Oceanographic() {
			_symbolset = 46;
			_dictionaryValues["symbolset"] = 46;
			_dictionaryFormattedValues["symbolset"] = 46;
			_schemaName = "METOCLines (Oceanographic)";
			_symbolSetName = "symbolset 46";
			_symbolentity = (int)METOC_Oceanographic_Line_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_METOCAreas_Atmospheric : Fields_Base {

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("METOC Area Entity")]
		[ItemsSource(typeof(METOC_Atmospheric_Area_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _optionallabel;

		[Category("Other")]
		[DisplayName("optionallabel")]
		[Description("Optional Label")]
		public string optionallabel {
			get { return _optionallabel; }
			set {
				_optionallabel = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		public Fields_METOCAreas_Atmospheric() {
			_symbolset = 45;
			_dictionaryValues["symbolset"] = 45;
			_dictionaryFormattedValues["symbolset"] = 45;
			_schemaName = "METOCAreas (Atmospheric)";
			_symbolSetName = "symbolset 45";
			_symbolentity = (int)METOC_Atmospheric_Area_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_METOCAreas_Oceanographic : Fields_Base {

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("METOC Area Entity")]
		[ItemsSource(typeof(METOC_Oceanographic_Area_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _optionallabel;

		[Category("Other")]
		[DisplayName("optionallabel")]
		[Description("Optional Label")]
		public string optionallabel {
			get { return _optionallabel; }
			set {
				_optionallabel = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		public Fields_METOCAreas_Oceanographic() {
			_symbolset = 46;
			_dictionaryValues["symbolset"] = 46;
			_dictionaryFormattedValues["symbolset"] = 46;
			_schemaName = "METOCAreas (Oceanographic)";
			_symbolSetName = "symbolset 46";
			_symbolentity = (int)METOC_Oceanographic_Area_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_SIGINT_Space : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("SIGINT Entity")]
		[ItemsSource(typeof(Space_SIGINT_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Space_SIGINT_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private string _sigintmobility;

		[Category("Optional")]
		[DisplayName("sigintmobility")]
		[Description("SIGINT Mobility")]
		[ItemsSource(typeof(SIGINTMobilityItemsSource))]
		public string sigintmobility {
			get { return _sigintmobility; }
			set {
				_sigintmobility = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _higherformation;

		[Category("Other")]
		[DisplayName("higherformation")]
		[Description("Higher Formation")]
		public string higherformation {
			get { return _higherformation; }
			set {
				_higherformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _platformtype;

		[Category("Other")]
		[DisplayName("platformtype")]
		[Description("Platform Type (ELNOT or CENOT)")]
		public string platformtype {
			get { return _platformtype; }
			set {
				_platformtype = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _equipmentteardown;

		[Category("Other")]
		[DisplayName("equipmentteardown")]
		[Description("Equipment Teardown Time (min)")]
		public int equipmentteardown {
			get { return _equipmentteardown; }
			set {
				_equipmentteardown = value;
				OnPropertyChanged(value);
			}
		}

		private string _commonidentifier;

		[Category("Other")]
		[DisplayName("commonidentifier")]
		[Description("Common Identifier")]
		public string commonidentifier {
			get { return _commonidentifier; }
			set {
				_commonidentifier = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _signatureequipment;

		[Category("Other")]
		[DisplayName("signatureequipment")]
		[Description("Signature Equipment (hostile)")]
		public string signatureequipment {
			get { return _signatureequipment; }
			set {
				_signatureequipment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private string _specialdesignator;

		[Category("Other")]
		[DisplayName("specialdesignator")]
		[Description("Special Track Designator")]
		public string specialdesignator {
			get { return _specialdesignator; }
			set {
				_specialdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _guardedunit;

		[Category("Other")]
		[DisplayName("guardedunit")]
		[Description("Guarded Unit")]
		public string guardedunit {
			get { return _guardedunit; }
			set {
				_guardedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_SIGINT_Space() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 50;
			_dictionaryValues["symbolset"] = 50;
			_dictionaryFormattedValues["symbolset"] = 50;
			_schemaName = "SIGINT (Space)";
			_symbolSetName = "symbolset 50";
			_symbolentity = (int)Space_SIGINT_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_SIGINT_Air : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("SIGINT Entity")]
		[ItemsSource(typeof(Air_SIGINT_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Air_SIGINT_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private string _sigintmobility;

		[Category("Optional")]
		[DisplayName("sigintmobility")]
		[Description("SIGINT Mobility")]
		[ItemsSource(typeof(SIGINTMobilityItemsSource))]
		public string sigintmobility {
			get { return _sigintmobility; }
			set {
				_sigintmobility = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _higherformation;

		[Category("Other")]
		[DisplayName("higherformation")]
		[Description("Higher Formation")]
		public string higherformation {
			get { return _higherformation; }
			set {
				_higherformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _platformtype;

		[Category("Other")]
		[DisplayName("platformtype")]
		[Description("Platform Type (ELNOT or CENOT)")]
		public string platformtype {
			get { return _platformtype; }
			set {
				_platformtype = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _equipmentteardown;

		[Category("Other")]
		[DisplayName("equipmentteardown")]
		[Description("Equipment Teardown Time (min)")]
		public int equipmentteardown {
			get { return _equipmentteardown; }
			set {
				_equipmentteardown = value;
				OnPropertyChanged(value);
			}
		}

		private string _commonidentifier;

		[Category("Other")]
		[DisplayName("commonidentifier")]
		[Description("Common Identifier")]
		public string commonidentifier {
			get { return _commonidentifier; }
			set {
				_commonidentifier = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _signatureequipment;

		[Category("Other")]
		[DisplayName("signatureequipment")]
		[Description("Signature Equipment (hostile)")]
		public string signatureequipment {
			get { return _signatureequipment; }
			set {
				_signatureequipment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private string _specialdesignator;

		[Category("Other")]
		[DisplayName("specialdesignator")]
		[Description("Special Track Designator")]
		public string specialdesignator {
			get { return _specialdesignator; }
			set {
				_specialdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _guardedunit;

		[Category("Other")]
		[DisplayName("guardedunit")]
		[Description("Guarded Unit")]
		public string guardedunit {
			get { return _guardedunit; }
			set {
				_guardedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_SIGINT_Air() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 51;
			_dictionaryValues["symbolset"] = 51;
			_dictionaryFormattedValues["symbolset"] = 51;
			_schemaName = "SIGINT (Air)";
			_symbolSetName = "symbolset 51";
			_symbolentity = (int)Air_SIGINT_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_SIGINT_Land : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("SIGINT Entity")]
		[ItemsSource(typeof(Land_SIGINT_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Land_SIGINT_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private string _sigintmobility;

		[Category("Optional")]
		[DisplayName("sigintmobility")]
		[Description("SIGINT Mobility")]
		[ItemsSource(typeof(SIGINTMobilityItemsSource))]
		public string sigintmobility {
			get { return _sigintmobility; }
			set {
				_sigintmobility = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _higherformation;

		[Category("Other")]
		[DisplayName("higherformation")]
		[Description("Higher Formation")]
		public string higherformation {
			get { return _higherformation; }
			set {
				_higherformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _platformtype;

		[Category("Other")]
		[DisplayName("platformtype")]
		[Description("Platform Type (ELNOT or CENOT)")]
		public string platformtype {
			get { return _platformtype; }
			set {
				_platformtype = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _equipmentteardown;

		[Category("Other")]
		[DisplayName("equipmentteardown")]
		[Description("Equipment Teardown Time (min)")]
		public int equipmentteardown {
			get { return _equipmentteardown; }
			set {
				_equipmentteardown = value;
				OnPropertyChanged(value);
			}
		}

		private string _commonidentifier;

		[Category("Other")]
		[DisplayName("commonidentifier")]
		[Description("Common Identifier")]
		public string commonidentifier {
			get { return _commonidentifier; }
			set {
				_commonidentifier = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _signatureequipment;

		[Category("Other")]
		[DisplayName("signatureequipment")]
		[Description("Signature Equipment (hostile)")]
		public string signatureequipment {
			get { return _signatureequipment; }
			set {
				_signatureequipment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private string _specialdesignator;

		[Category("Other")]
		[DisplayName("specialdesignator")]
		[Description("Special Track Designator")]
		public string specialdesignator {
			get { return _specialdesignator; }
			set {
				_specialdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _guardedunit;

		[Category("Other")]
		[DisplayName("guardedunit")]
		[Description("Guarded Unit")]
		public string guardedunit {
			get { return _guardedunit; }
			set {
				_guardedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_SIGINT_Land() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 52;
			_dictionaryValues["symbolset"] = 52;
			_dictionaryFormattedValues["symbolset"] = 52;
			_schemaName = "SIGINT (Land)";
			_symbolSetName = "symbolset 52";
			_symbolentity = (int)Land_SIGINT_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_SIGINT_Surface : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("SIGINT Entity")]
		[ItemsSource(typeof(Surface_SIGINT_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Surface_SIGINT_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private string _sigintmobility;

		[Category("Optional")]
		[DisplayName("sigintmobility")]
		[Description("SIGINT Mobility")]
		[ItemsSource(typeof(SIGINTMobilityItemsSource))]
		public string sigintmobility {
			get { return _sigintmobility; }
			set {
				_sigintmobility = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _higherformation;

		[Category("Other")]
		[DisplayName("higherformation")]
		[Description("Higher Formation")]
		public string higherformation {
			get { return _higherformation; }
			set {
				_higherformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _platformtype;

		[Category("Other")]
		[DisplayName("platformtype")]
		[Description("Platform Type (ELNOT or CENOT)")]
		public string platformtype {
			get { return _platformtype; }
			set {
				_platformtype = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _equipmentteardown;

		[Category("Other")]
		[DisplayName("equipmentteardown")]
		[Description("Equipment Teardown Time (min)")]
		public int equipmentteardown {
			get { return _equipmentteardown; }
			set {
				_equipmentteardown = value;
				OnPropertyChanged(value);
			}
		}

		private string _commonidentifier;

		[Category("Other")]
		[DisplayName("commonidentifier")]
		[Description("Common Identifier")]
		public string commonidentifier {
			get { return _commonidentifier; }
			set {
				_commonidentifier = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _signatureequipment;

		[Category("Other")]
		[DisplayName("signatureequipment")]
		[Description("Signature Equipment (hostile)")]
		public string signatureequipment {
			get { return _signatureequipment; }
			set {
				_signatureequipment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private string _specialdesignator;

		[Category("Other")]
		[DisplayName("specialdesignator")]
		[Description("Special Track Designator")]
		public string specialdesignator {
			get { return _specialdesignator; }
			set {
				_specialdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _guardedunit;

		[Category("Other")]
		[DisplayName("guardedunit")]
		[Description("Guarded Unit")]
		public string guardedunit {
			get { return _guardedunit; }
			set {
				_guardedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_SIGINT_Surface() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 53;
			_dictionaryValues["symbolset"] = 53;
			_dictionaryFormattedValues["symbolset"] = 53;
			_schemaName = "SIGINT (Surface)";
			_symbolSetName = "symbolset 53";
			_symbolentity = (int)Surface_SIGINT_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_SIGINT_Subsurface : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("SIGINT Entity")]
		[ItemsSource(typeof(Subsurface_SIGINT_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _modifier1;

		[Category("Optional")]
		[DisplayName("modifier1")]
		[Description("Modifier 1")]
		[ItemsSource(typeof(Subsurface_SIGINT_Modifier_OnesItemsSource))]
		public int modifier1 {
			get { return _modifier1; }
			set {
				_modifier1 = value;
				OnPropertyChanged(value);
			}
		}

		private string _sigintmobility;

		[Category("Optional")]
		[DisplayName("sigintmobility")]
		[Description("SIGINT Mobility")]
		[ItemsSource(typeof(SIGINTMobilityItemsSource))]
		public string sigintmobility {
			get { return _sigintmobility; }
			set {
				_sigintmobility = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _higherformation;

		[Category("Other")]
		[DisplayName("higherformation")]
		[Description("Higher Formation")]
		public string higherformation {
			get { return _higherformation; }
			set {
				_higherformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _platformtype;

		[Category("Other")]
		[DisplayName("platformtype")]
		[Description("Platform Type (ELNOT or CENOT)")]
		public string platformtype {
			get { return _platformtype; }
			set {
				_platformtype = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _equipmentteardown;

		[Category("Other")]
		[DisplayName("equipmentteardown")]
		[Description("Equipment Teardown Time (min)")]
		public int equipmentteardown {
			get { return _equipmentteardown; }
			set {
				_equipmentteardown = value;
				OnPropertyChanged(value);
			}
		}

		private string _commonidentifier;

		[Category("Other")]
		[DisplayName("commonidentifier")]
		[Description("Common Identifier")]
		public string commonidentifier {
			get { return _commonidentifier; }
			set {
				_commonidentifier = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _signatureequipment;

		[Category("Other")]
		[DisplayName("signatureequipment")]
		[Description("Signature Equipment (hostile)")]
		public string signatureequipment {
			get { return _signatureequipment; }
			set {
				_signatureequipment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private string _specialdesignator;

		[Category("Other")]
		[DisplayName("specialdesignator")]
		[Description("Special Track Designator")]
		public string specialdesignator {
			get { return _specialdesignator; }
			set {
				_specialdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _guardedunit;

		[Category("Other")]
		[DisplayName("guardedunit")]
		[Description("Guarded Unit")]
		public string guardedunit {
			get { return _guardedunit; }
			set {
				_guardedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private int _civilian;

		[Category("Optional")]
		[DisplayName("civilian")]
		[Description("Civilian")]
		[ItemsSource(typeof(TrueFalseItemsSource))]
		public int civilian {
			get { return _civilian; }
			set {
				_civilian = value;
				OnPropertyChanged(value);
			}
		}

		public Fields_SIGINT_Subsurface() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 54;
			_dictionaryValues["symbolset"] = 54;
			_dictionaryFormattedValues["symbolset"] = 54;
			_schemaName = "SIGINT (Subsurface)";
			_symbolSetName = "symbolset 54";
			_symbolentity = (int)Subsurface_SIGINT_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}



	public class Fields_Cyberspace : Fields_Base {

		private int _identity;

		[Category("Core")]
		[DisplayName("identity")]
		[Description("Standard Identity")]
		[ItemsSource(typeof(IdentityItemsSource))]
		public int identity {
			get { return _identity; }
			set {
				_identity = value;
				OnPropertyChanged(value);
			}
		}

		private int _context;

		[Category("Core")]
		[DisplayName("context")]
		[Description("Context")]
		[ItemsSource(typeof(ContextItemsSource))]
		public int context {
			get { return _context; }
			set {
				_context = value;
				OnPropertyChanged(value);
			}
		}

		private int _symbolset;

		[Category("Core")]
		[DisplayName("symbolset")]
		[Description("Symbol Set")]
		public int symbolset {
			get { return _symbolset; }

		}

		private int _symbolentity;

		[Category("Core")]
		[DisplayName("symbolentity")]
		[Description("Cyberspace Entity")]
		[ItemsSource(typeof(Cyberspace_EntitiesItemsSource))]
		public int symbolentity {
			get { return _symbolentity; }
			set {
				_symbolentity = value;
				OnPropertyChanged(value);
			}
		}

		private int _indicator;

		[Category("Optional")]
		[DisplayName("indicator")]
		[Description("HQ, Task Force, Feint/Dummy")]
		[ItemsSource(typeof(HQTFFDItemsSource))]
		public int indicator {
			get { return _indicator; }
			set {
				_indicator = value;
				OnPropertyChanged(value);
			}
		}

		private int _operationalcondition;

		[Category("Optional")]
		[DisplayName("operationalcondition")]
		[Description("Operational Condition")]
		[ItemsSource(typeof(Operational_Condition_AmplifierItemsSource))]
		public int operationalcondition {
			get { return _operationalcondition; }
			set {
				_operationalcondition = value;
				OnPropertyChanged(value);
			}
		}

		private string _uniquedesignation;

		[Category("Other")]
		[DisplayName("uniquedesignation")]
		[Description("Unique Designation")]
		public string uniquedesignation {
			get { return _uniquedesignation; }
			set {
				_uniquedesignation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _additionalinformation;

		[Category("Other")]
		[DisplayName("additionalinformation")]
		[Description("Additional Information")]
		public string additionalinformation {
			get { return _additionalinformation; }
			set {
				_additionalinformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _staffcomment;

		[Category("Other")]
		[DisplayName("staffcomment")]
		[Description("Staff Comments")]
		public string staffcomment {
			get { return _staffcomment; }
			set {
				_staffcomment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _higherformation;

		[Category("Other")]
		[DisplayName("higherformation")]
		[Description("Higher Formation")]
		public string higherformation {
			get { return _higherformation; }
			set {
				_higherformation = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _reinforced;

		[Category("Optional")]
		[DisplayName("reinforced")]
		[Description("Reinforced or Reduced")]
		[ItemsSource(typeof(ReinforcedItemsSource))]
		public int reinforced {
			get { return _reinforced; }
			set {
				_reinforced = value;
				OnPropertyChanged(value);
			}
		}

		private string _combateffectiveness;

		[Category("Optional")]
		[DisplayName("combateffectiveness")]
		[Description("Combat Effectiveness")]
		[ItemsSource(typeof(CombatEffectivenessItemsSource))]
		public string combateffectiveness {
			get { return _combateffectiveness; }
			set {
				_combateffectiveness = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _credibility;

		[Category("Optional")]
		[DisplayName("credibility")]
		[Description("Credibility")]
		[ItemsSource(typeof(CredibilityItemsSource))]
		public int credibility {
			get { return _credibility; }
			set {
				_credibility = value;
				OnPropertyChanged(value);
			}
		}

		private string _reliability;

		[Category("Optional")]
		[DisplayName("reliability")]
		[Description("Reliability")]
		[ItemsSource(typeof(ReliabilityItemsSource))]
		public string reliability {
			get { return _reliability; }
			set {
				_reliability = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _idmode;

		[Category("Other")]
		[DisplayName("idmode")]
		[Description("IFF/SIF/AIS")]
		public string idmode {
			get { return _idmode; }
			set {
				_idmode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _hostile;

		[Category("Other")]
		[DisplayName("hostile")]
		[Description("Hostile (ENY)")]
		public string hostile {
			get { return _hostile; }
			set {
				_hostile = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _signatureequipment;

		[Category("Other")]
		[DisplayName("signatureequipment")]
		[Description("Signature Equipment (hostile)")]
		public string signatureequipment {
			get { return _signatureequipment; }
			set {
				_signatureequipment = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _type;

		[Category("Other")]
		[DisplayName("type")]
		[Description("Type of Equipment")]
		public string type {
			get { return _type; }
			set {
				_type = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _quantity;

		[Category("Other")]
		[DisplayName("quantity")]
		[Description("Quantity")]
		public int quantity {
			get { return _quantity; }
			set {
				_quantity = value;
				OnPropertyChanged(value);
			}
		}

		private string _specialdesignator;

		[Category("Other")]
		[DisplayName("specialdesignator")]
		[Description("Special Track Designator")]
		public string specialdesignator {
			get { return _specialdesignator; }
			set {
				_specialdesignator = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private string _guardedunit;

		[Category("Other")]
		[DisplayName("guardedunit")]
		[Description("Guarded Unit")]
		public string guardedunit {
			get { return _guardedunit; }
			set {
				_guardedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private int _direction;

		[Category("Other")]
		[DisplayName("direction")]
		[Description("Direction")]
		public int direction {
			get { return _direction; }
			set {
				_direction = value;
				OnPropertyChanged(value);
			}
		}

		private int _speed;

		[Category("Other")]
		[DisplayName("speed")]
		[Description("Speed")]
		public int speed {
			get { return _speed; }
			set {
				_speed = value;
				OnPropertyChanged(value);
			}
		}

		private string _speedunit;

		[Category("Optional")]
		[DisplayName("speedunit")]
		[Description("Speed Unit")]
		[ItemsSource(typeof(SpeedUnitsItemsSource))]
		public string speedunit {
			get { return _speedunit; }
			set {
				_speedunit = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private double _x;

		[Category("Other")]
		[DisplayName("x")]
		[Description("X Location")]
		public double x {
			get { return _x; }
			set {
				_x = value;
				OnPropertyChanged(value);
			}
		}

		private double _y;

		[Category("Other")]
		[DisplayName("y")]
		[Description("Y Location")]
		public double y {
			get { return _y; }
			set {
				_y = value;
				OnPropertyChanged(value);
			}
		}

		private double _z;

		[Category("Other")]
		[DisplayName("z")]
		[Description("Altitude/Depth")]
		public double z {
			get { return _z; }
			set {
				_z = value;
				OnPropertyChanged(value);
			}
		}

		private int _size;

		[Category("Other")]
		[DisplayName("size")]
		[Description("Symbol Size")]
		public int size {
			get { return _size; }
			set {
				_size = value;
				OnPropertyChanged(value);
			}
		}

		private int _rotation;

		[Category("Other")]
		[DisplayName("rotation")]
		[Description("Symbol Rotation")]
		public int rotation {
			get { return _rotation; }
			set {
				_rotation = value;
				OnPropertyChanged(value);
			}
		}

		private string _countrycode;

		[Category("Optional")]
		[DisplayName("countrycode")]
		[Description("Country Code")]
		[ItemsSource(typeof(CountryCodesItemsSource))]
		public string countrycode {
			get { return _countrycode; }
			set {
				_countrycode = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _datetimevalid;

		[Category("Other")]
		[DisplayName("datetimevalid")]
		[Description("Date Time Valid")]
		public DateTime datetimevalid {
			get { return _datetimevalid; }
			set {
				_datetimevalid = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private DateTime _datetimeexpired;

		[Category("Other")]
		[DisplayName("datetimeexpired")]
		[Description("Date Time Expired")]
		public DateTime datetimeexpired {
			get { return _datetimeexpired; }
			set {
				_datetimeexpired = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _createdby;

		[Category("Other")]
		[DisplayName("createdby")]
		[Description("Created By")]
		public string createdby {
			get { return _createdby; }
			set {
				_createdby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _createdtime;

		[Category("Other")]
		[DisplayName("createdtime")]
		[Description("Created Time")]
		public DateTime createdtime {
			get { return _createdtime; }
			set {
				_createdtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		private string _editedby;

		[Category("Other")]
		[DisplayName("editedby")]
		[Description("Edited By")]
		public string editedby {
			get { return _editedby; }
			set {
				_editedby = value;
				OnPropertyChanged(value, formattedValue: string.Format("\"{0}\"",value));
			}
		}

		private DateTime _editedtime;

		[Category("Other")]
		[DisplayName("editedtime")]
		[Description("Edited Time")]
		public DateTime editedtime {
			get { return _editedtime; }
			set {
				_editedtime = value;
				OnPropertyChanged(value, formattedValue: string.Format("new DateTime({0},{1},{2})", value.Year, value.Month, value.Day));
			}
		}

		public Fields_Cyberspace() {
			_identity = 0;
			_dictionaryValues["identity"] = 0;
			_dictionaryFormattedValues["identity"] = 0;
			_context = 0;
			_dictionaryValues["context"] = 0;
			_dictionaryFormattedValues["context"] = 0;
			_symbolset = 60;
			_dictionaryValues["symbolset"] = 60;
			_dictionaryFormattedValues["symbolset"] = 60;
			_schemaName = "Cyberspace";
			_symbolSetName = "symbolset 60";
			_symbolentity = (int)Cyberspace_EntitiesItemsSource.Items[0].Value;
			_dictionaryValues["symbolentity"] = _symbolentity;
			_dictionaryFormattedValues["symbolentity"] = _symbolentity;
		}


	}


}

namespace Mil2525.Domains {
    	public class IdentityItemsSource : IItemsSource {

		public static ItemCollection Items = new IdentityItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(0, "0 - Pending");
			items.Add(1, "1 - Unknown");
			items.Add(2, "2 - Assumed Friend");
			items.Add(3, "3 - Friend");
			items.Add(4, "4 - Neutral");
			items.Add(5, "5 - Suspect/Joker");
			items.Add(6, "6 - Hostile/Faker");
			return items;
		}
	}


	public class ContextItemsSource : IItemsSource {

		public static ItemCollection Items = new ContextItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(0, "0 - Reality");
			items.Add(1, "1 - Exercise");
			items.Add(2, "2 - Simulation");
			return items;
		}
	}


	public class AirItemsSource : IItemsSource {

		public static ItemCollection Items = new AirItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(01, "01 - Air");
			items.Add(02, "02 - Air Missile");
			return items;
		}
	}


	public class Air_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Air_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Military (Air)");
			items.Add(110100, "110100 - Military (Air) : Fixed-Wing");
			items.Add(110101, "110101 - Military (Air) : Fixed-Wing : Medical Evacuation (MEDEVAC)");
			items.Add(110102, "110102 - Military (Air) : Fixed-Wing : Attack/Strike");
			items.Add(110103, "110103 - Military (Air) : Fixed-Wing : Bomber");
			items.Add(110104, "110104 - Military (Air) : Fixed-Wing : Fighter");
			items.Add(110105, "110105 - Military (Air) : Fixed-Wing : Fighter/Bomber");
			items.Add(110107, "110107 - Military (Air) : Fixed-Wing : Cargo");
			items.Add(110108, "110108 - Military (Air) : Fixed-Wing : Electronic Combat (EC)/Jammer");
			items.Add(110109, "110109 - Military (Air) : Fixed-Wing : Tanker");
			items.Add(110110, "110110 - Military (Air) : Fixed-Wing : Patrol");
			items.Add(110111, "110111 - Military (Air) : Fixed-Wing : Reconnaissance");
			items.Add(110112, "110112 - Military (Air) : Fixed-Wing : Trainer");
			items.Add(110113, "110113 - Military (Air) : Fixed-Wing : Utility");
			items.Add(110114, "110114 - Military (Air) : Fixed-Wing : VSTOL");
			items.Add(110115, "110115 - Military (Air) : Fixed-Wing : Airborne Command Post (ACP)");
			items.Add(110116, "110116 - Military (Air) : Fixed-Wing : Airborne Early Warning (AEW)");
			items.Add(110117, "110117 - Military (Air) : Fixed-Wing : Antisurface Warfare");
			items.Add(110118, "110118 - Military (Air) : Fixed-Wing : Antisubmarine Warfare");
			items.Add(110119, "110119 - Military (Air) : Fixed-Wing : Communications");
			items.Add(110120, "110120 - Military (Air) : Fixed-Wing : Combat Search and Rescue (CSAR)");
			items.Add(110121, "110121 - Military (Air) : Fixed-Wing : Electronic Support (ES)");
			items.Add(110122, "110122 - Military (Air) : Fixed-Wing : Government");
			items.Add(110123, "110123 - Military (Air) : Fixed-Wing : Mine Countermeasures (MCM)");
			items.Add(110124, "110124 - Military (Air) : Fixed-Wing : Personnel Recovery");
			items.Add(110125, "110125 - Military (Air) : Fixed-Wing : Search and Rescue");
			items.Add(110126, "110126 - Military (Air) : Fixed-Wing : Special Operations Forces");
			items.Add(110127, "110127 - Military (Air) : Fixed-Wing : Ultra Light");
			items.Add(110128, "110128 - Military (Air) : Fixed-Wing : Photographic Reconnaissance");
			items.Add(110129, "110129 - Military (Air) : Fixed-Wing : Very Important Person (VIP)");
			items.Add(110130, "110130 - Military (Air) : Fixed-Wing : Suppression of Enemy Air Defense");
			items.Add(110131, "110131 - Military (Air) : Fixed-Wing : Passenger");
			items.Add(110132, "110132 - Military (Air) : Fixed-Wing : Escort");
			items.Add(110133, "110133 - Military (Air) : Fixed-Wing : Electronic Attack (EA)");
			items.Add(110200, "110200 - Military (Air) : Rotary-Wing");
			items.Add(110300, "110300 - Military (Air) : Unmanned Aircraft (UA- UAV- UAS- RPV)");
			items.Add(110400, "110400 - Military (Air) : Vertical-Takeoff UAV (VT-UAV)");
			items.Add(110500, "110500 - Military (Air) : Lighter Than Air");
			items.Add(110600, "110600 - Military (Air) : Airship");
			items.Add(110700, "110700 - Military (Air) : Tethered Lighter Than Air");
			items.Add(120000, "120000 - Civilian (Air)");
			items.Add(120100, "120100 - Civilian (Air) : Fixed Wing");
			items.Add(120200, "120200 - Civilian (Air) : Rotary Wing");
			items.Add(120300, "120300 - Civilian (Air) : Unmanned Aircraft (UA- UAV- UAS- RPV)");
			items.Add(120400, "120400 - Civilian (Air) : Lighter Than Air");
			items.Add(120500, "120500 - Civilian (Air) : Airship");
			items.Add(120600, "120600 - Civilian (Air) : Tethered Lighter than Air");
			items.Add(130000, "130000 - Weapon (Air)");
			items.Add(130100, "130100 - Weapon (Air) : Bomb");
			items.Add(130200, "130200 - Weapon (Air) : Decoy");
			items.Add(140000, "140000 - Manual Track (Air)");
			return items;
		}
	}


	public class Air_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Air_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Not Applicable");
			items.Add(01, "01 - Military Aircraft Type : Attack/Strike");
			items.Add(02, "02 - Military Aircraft Type : Bomber");
			items.Add(03, "03 - Aircraft Type : Cargo");
			items.Add(04, "04 - Military Aircraft Type : Fighter");
			items.Add(05, "05 - Military Aircraft Type : Interceptor");
			items.Add(06, "06 - Aircraft Type : Tanker");
			items.Add(07, "07 - Aircraft Type : Utility");
			items.Add(08, "08 - Aircraft Type : VSTOL/VTOL");
			items.Add(09, "09 - Aircraft Type : Passenger");
			items.Add(10, "10 - Aircraft Type : Ultra Light");
			items.Add(11, "11 - Military Aircraft Type : Airborne Command Post (ACP)");
			items.Add(12, "12 - Military Aircraft Type : Airborne Early Warning (AEW)");
			items.Add(13, "13 - Aircraft Type : Government");
			items.Add(14, "14 - Mission Area : Medical Evacuation (MEDEVAC)");
			items.Add(15, "15 - Military Mission Area : Escort");
			items.Add(16, "16 - Military Mission Area : Electronic Combat (EC)/Jammer");
			items.Add(17, "17 - Mission Area : Patrol");
			items.Add(18, "18 - Mission Area : Reconnaissance");
			items.Add(19, "19 - Mission Area : Trainer");
			items.Add(20, "20 - Mission Area : Photographic (Reconnaissance)");
			items.Add(21, "21 - Mission Area : Personnel Recovery");
			items.Add(22, "22 - Military Mission Area : Antisubmarine Warfare");
			items.Add(23, "23 - Mission Area : Communications");
			items.Add(24, "24 - Military Mission Area : Electronic Support (ES)");
			items.Add(25, "25 - Military Mission Area : Mine Countermeasures (MCM)");
			items.Add(26, "26 - Mission Area : Search and Rescue");
			items.Add(27, "27 - Military Mission Area : Special Operations Forces");
			items.Add(28, "28 - Military Mission Area : Surface Warfare");
			items.Add(29, "29 - Mission Area : Very Important Person (VIP) Transport");
			items.Add(30, "30 - Military Mission Area : Combat Search and Rescue (CSAR)");
			items.Add(31, "31 - Military Mission Area : Suppression of Enemy Air Defenses");
			items.Add(32, "32 - Military Mission Area : Antisurface Warfare");
			items.Add(33, "33 - Military Aircraft Type : Fighter/Bomber");
			items.Add(34, "34 - Mission Area : Intensive Care");
			items.Add(35, "35 - Military Mission Area : Electronic Attack (EA)");
			items.Add(36, "36 - Mission Area : Multimission");
			items.Add(37, "37 - Crime : Hijacking (Air)");
			items.Add(38, "38 - Mission Area : ASW Helo - LAMPS");
			items.Add(39, "39 - Mission Area : ASW Helo - SH-60R");
			return items;
		}
	}


	public class Air_Modifier_TwosItemsSource : IItemsSource {

		public static ItemCollection Items = new Air_Modifier_TwosItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Not Applicable");
			items.Add(01, "01 - Cargo/Transport Capacity : Heavy");
			items.Add(02, "02 - Cargo/Transport Capacity : Medium");
			items.Add(03, "03 - Cargo/Transport Capacity : Light");
			items.Add(04, "04 - Re-fueling Capability : Boom-Only");
			items.Add(05, "05 - Re-fueling Capability : Drogue-Only");
			items.Add(06, "06 - Re-fueling Capability : Boom and Drogue");
			items.Add(07, "07 - Range : Close Range");
			items.Add(08, "08 - Range : Short Range");
			items.Add(09, "09 - Range : Medium Range");
			items.Add(10, "10 - Range : Long Range");
			items.Add(11, "11 - Track Link Availability : Downlinked");
			return items;
		}
	}


	public class HQTFFDItemsSource : IItemsSource {

		public static ItemCollection Items = new HQTFFDItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(0, "0 - Unknown");
			items.Add(1, "1 - Feint/Dummy");
			items.Add(2, "2 - Headquarters");
			items.Add(3, "3 - Feint/Dummy Headquarters");
			items.Add(4, "4 - Task Force");
			items.Add(5, "5 - Feint/Dummy Task Force");
			items.Add(6, "6 - Task Force Headquarters");
			items.Add(7, "7 - Feint/Dummy Task Force HQ");
			return items;
		}
	}


	public class Operational_Condition_AmplifierItemsSource : IItemsSource {

		public static ItemCollection Items = new Operational_Condition_AmplifierItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(0, "0 - Present");
			items.Add(1, "1 - Planned/Anticipated/Suspect");
			items.Add(2, "2 - Fully Capable");
			items.Add(3, "3 - Damaged");
			items.Add(4, "4 - Destroyed");
			items.Add(5, "5 - Full");
			return items;
		}
	}


	public class CredibilityItemsSource : IItemsSource {

		public static ItemCollection Items = new CredibilityItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(1, "1 - Confirmed by Other Sources");
			items.Add(2, "2 - Probably True");
			items.Add(3, "3 - Possibly True");
			items.Add(4, "4 - Doubtfully True");
			items.Add(5, "5 - Improbable");
			items.Add(6, "6 - Truth Cannot Be Judged");
			return items;
		}
	}


	public class ReliabilityItemsSource : IItemsSource {

		public static ItemCollection Items = new ReliabilityItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add("A", "'A' - Completely Reliable");
			items.Add("B", "'B' - Usually Reliable");
			items.Add("C", "'C' - Fairly Reliable");
			items.Add("D", "'D' - Not Usually Reliable");
			items.Add("E", "'E' - Unreliable");
			items.Add("F", "'F' - Reliability Cannot Be Judged");
			return items;
		}
	}


	public class SpeedUnitsItemsSource : IItemsSource {

		public static ItemCollection Items = new SpeedUnitsItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add("KPH", "'KPH' - Kilometers Per Hour");
			items.Add("MPS", "'MPS' - Meters Per Second");
			items.Add("KTS", "'KTS' - Nautical Miles Per Hour (Knots)");
			items.Add("MPH", "'MPH' - Statute Miles Per Hour");
			return items;
		}
	}


	public class CountryCodesItemsSource : IItemsSource {

		public static ItemCollection Items = new CountryCodesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add("AFG", "'AFG' - Afghanistan");
			items.Add("XQZ", "'XQZ' - Akrotiri");
			items.Add("ALB", "'ALB' - Albania");
			items.Add("DZA", "'DZA' - Algeria");
			items.Add("ASM", "'ASM' - American Samoa");
			items.Add("AND", "'AND' - Andorra");
			items.Add("AGO", "'AGO' - Angola");
			items.Add("AIA", "'AIA' - Anguilla");
			items.Add("ATA", "'ATA' - Antarctica");
			items.Add("ATG", "'ATG' - Antigua and Barbuda");
			items.Add("ARG", "'ARG' - Argentina");
			items.Add("ARM", "'ARM' - Armenia");
			items.Add("ABW", "'ABW' - Aruba");
			items.Add("XAC", "'XAC' - Ashmore and Cartier Islands");
			items.Add("AUS", "'AUS' - Australia");
			items.Add("AUT", "'AUT' - Austria");
			items.Add("AZE", "'AZE' - Azerbaijan");
			items.Add("BHS", "'BHS' - Bahamas, The");
			items.Add("BHR", "'BHR' - Bahrain");
			items.Add("XBK", "'XBK' - Baker Island");
			items.Add("BGD", "'BGD' - Bangladesh");
			items.Add("BRB", "'BRB' - Barbados");
			items.Add("XBI", "'XBI' - Bassas Da India");
			items.Add("BLR", "'BLR' - Belarus");
			items.Add("BEL", "'BEL' - Belgium");
			items.Add("BLZ", "'BLZ' - Belize");
			items.Add("BEN", "'BEN' - Benin");
			items.Add("BMU", "'BMU' - Bermuda");
			items.Add("BTN", "'BTN' - Bhutan");
			items.Add("BOL", "'BOL' - Bolivia");
			items.Add("BES", "'BES' - Bonaire, Sint Eustatius, and Saba");
			items.Add("BIH", "'BIH' - Bosnia and Herzegovina");
			items.Add("BWA", "'BWA' - Botswana");
			items.Add("BVT", "'BVT' - Bouvet Island");
			items.Add("BRA", "'BRA' - Brazil");
			items.Add("IOT", "'IOT' - British Indian Ocean Territory");
			items.Add("BRN", "'BRN' - Brunei");
			items.Add("BGR", "'BGR' - Bulgaria");
			items.Add("BFA", "'BFA' - Burkina Faso");
			items.Add("MMR", "'MMR' - Burma");
			items.Add("BDI", "'BDI' - Burundi");
			items.Add("CPV", "'CPV' - Cabo Verde");
			items.Add("KHM", "'KHM' - Cambodia");
			items.Add("CMR", "'CMR' - Cameroon");
			items.Add("CAN", "'CAN' - Canada");
			items.Add("CYM", "'CYM' - Cayman Islands");
			items.Add("CAF", "'CAF' - Central African Republic");
			items.Add("TCD", "'TCD' - Chad");
			items.Add("CHL", "'CHL' - Chile");
			items.Add("CHN", "'CHN' - China");
			items.Add("CXR", "'CXR' - Christmas Island");
			items.Add("CPT", "'CPT' - Clipperton Island");
			items.Add("CCK", "'CCK' - Cocos (Keeling) Islands");
			items.Add("COL", "'COL' - Colombia");
			items.Add("COM", "'COM' - Comoros");
			items.Add("COG", "'COG' - Congo (Brazzaville)");
			items.Add("COD", "'COD' - Congo (Kinshasa)");
			items.Add("COK", "'COK' - Cook Islands");
			items.Add("XCS", "'XCS' - Coral Sea Islands");
			items.Add("CRI", "'CRI' - Costa Rica");
			items.Add("CIV", "'CIV' - Côte d’Ivoire");
			items.Add("HRV", "'HRV' - Croatia");
			items.Add("CUB", "'CUB' - Cuba");
			items.Add("CUW", "'CUW' - Curaçao");
			items.Add("CYP", "'CYP' - Cyprus");
			items.Add("CZE", "'CZE' - Czech Republic");
			items.Add("DNK", "'DNK' - Denmark");
			items.Add("XXD", "'XXD' - Dhekelia");
			items.Add("DGA", "'DGA' - Diego Garcia");
			items.Add("DJI", "'DJI' - Djibouti");
			items.Add("DMA", "'DMA' - Dominica");
			items.Add("DOM", "'DOM' - Dominican Republic");
			items.Add("ECU", "'ECU' - Ecuador");
			items.Add("EGY", "'EGY' - Egypt");
			items.Add("SLV", "'SLV' - El Salvador");
			items.Add("XAZ", "'XAZ' - Entity 1");
			items.Add("XCR", "'XCR' - Entity 2");
			items.Add("XCY", "'XCY' - Entity 3");
			items.Add("XKM", "'XKM' - Entity 4");
			items.Add("XKN", "'XKN' - Entity 5");
			items.Add("AX3", "'AX3' - Entity 6");
			items.Add("GNQ", "'GNQ' - Equatorial Guinea");
			items.Add("ERI", "'ERI' - Eritrea");
			items.Add("EST", "'EST' - Estonia");
			items.Add("ETH", "'ETH' - Ethiopia");
			items.Add("XEU", "'XEU' - Europa Island");
			items.Add("FLK", "'FLK' - Falkland Islands (Islas Malvinas)");
			items.Add("FRO", "'FRO' - Faroe Islands");
			items.Add("FJI", "'FJI' - Fiji");
			items.Add("FIN", "'FIN' - Finland");
			items.Add("FRA", "'FRA' - France");
			items.Add("GUF", "'GUF' - French Guiana");
			items.Add("PYF", "'PYF' - French Polynesia");
			items.Add("ATF", "'ATF' - French Southern and Antarctic Lands");
			items.Add("GAB", "'GAB' - Gabon");
			items.Add("GMB", "'GMB' - Gambia, The");
			items.Add("XGZ", "'XGZ' - Gaza Strip");
			items.Add("GEO", "'GEO' - Georgia");
			items.Add("DEU", "'DEU' - Germany");
			items.Add("GHA", "'GHA' - Ghana");
			items.Add("GIB", "'GIB' - Gibraltar");
			items.Add("XGL", "'XGL' - Glorioso Islands");
			items.Add("GRC", "'GRC' - Greece");
			items.Add("GRL", "'GRL' - Greenland");
			items.Add("GRD", "'GRD' - Grenada");
			items.Add("GLP", "'GLP' - Guadeloupe");
			items.Add("GUM", "'GUM' - Guam");
			items.Add("AX2", "'AX2' - Guantanamo Bay Naval Base");
			items.Add("GTM", "'GTM' - Guatemala");
			items.Add("GGY", "'GGY' - Guernsey");
			items.Add("GIN", "'GIN' - Guinea");
			items.Add("GNB", "'GNB' - Guinea-Bissau");
			items.Add("GUY", "'GUY' - Guyana");
			items.Add("HTI", "'HTI' - Haiti");
			items.Add("HMD", "'HMD' - Heard Island and Mcdonald Islands");
			items.Add("HND", "'HND' - Honduras");
			items.Add("HKG", "'HKG' - Hong Kong");
			items.Add("XHO", "'XHO' - Howland Island");
			items.Add("HUN", "'HUN' - Hungary");
			items.Add("ISL", "'ISL' - Iceland");
			items.Add("IND", "'IND' - India");
			items.Add("IDN", "'IDN' - Indonesia");
			items.Add("IRN", "'IRN' - Iran");
			items.Add("IRQ", "'IRQ' - Iraq");
			items.Add("IRL", "'IRL' - Ireland");
			items.Add("IMN", "'IMN' - Isle Of Man");
			items.Add("ISR", "'ISR' - Israel");
			items.Add("ITA", "'ITA' - Italy");
			items.Add("JAM", "'JAM' - Jamaica");
			items.Add("XJM", "'XJM' - Jan Mayen");
			items.Add("JPN", "'JPN' - Japan");
			items.Add("XJV", "'XJV' - Jarvis Island");
			items.Add("JEY", "'JEY' - Jersey");
			items.Add("XJA", "'XJA' - Johnston Atoll");
			items.Add("JOR", "'JOR' - Jordan");
			items.Add("XJN", "'XJN' - Juan De Nova Island");
			items.Add("KAZ", "'KAZ' - Kazakhstan");
			items.Add("KEN", "'KEN' - Kenya");
			items.Add("XKR", "'XKR' - Kingman Reef");
			items.Add("KIR", "'KIR' - Kiribati");
			items.Add("PRK", "'PRK' - Korea, North");
			items.Add("KOR", "'KOR' - Korea, South");
			items.Add("XKS", "'XKS' - Kosovo");
			items.Add("KWT", "'KWT' - Kuwait");
			items.Add("KGZ", "'KGZ' - Kyrgyzstan");
			items.Add("LAO", "'LAO' - Laos");
			items.Add("LVA", "'LVA' - Latvia");
			items.Add("LBN", "'LBN' - Lebanon");
			items.Add("LSO", "'LSO' - Lesotho");
			items.Add("LBR", "'LBR' - Liberia");
			items.Add("LBY", "'LBY' - Libya");
			items.Add("LIE", "'LIE' - Liechtenstein");
			items.Add("LTU", "'LTU' - Lithuania");
			items.Add("LUX", "'LUX' - Luxembourg");
			items.Add("MAC", "'MAC' - Macau");
			items.Add("MKD", "'MKD' - Macedonia");
			items.Add("MDG", "'MDG' - Madagascar");
			items.Add("MWI", "'MWI' - Malawi");
			items.Add("MYS", "'MYS' - Malaysia");
			items.Add("MDV", "'MDV' - Maldives");
			items.Add("MLI", "'MLI' - Mali");
			items.Add("MLT", "'MLT' - Malta");
			items.Add("MHL", "'MHL' - Marshall Islands");
			items.Add("MTQ", "'MTQ' - Martinique");
			items.Add("MRT", "'MRT' - Mauritania");
			items.Add("MUS", "'MUS' - Mauritius");
			items.Add("MYT", "'MYT' - Mayotte");
			items.Add("MEX", "'MEX' - Mexico");
			items.Add("FSM", "'FSM' - Micronesia, Federated States Of");
			items.Add("XMW", "'XMW' - Midway Islands");
			items.Add("MDA", "'MDA' - Moldova");
			items.Add("MCO", "'MCO' - Monaco");
			items.Add("MNG", "'MNG' - Mongolia");
			items.Add("MNE", "'MNE' - Montenegro");
			items.Add("MSR", "'MSR' - Montserrat");
			items.Add("MAR", "'MAR' - Morocco");
			items.Add("MOZ", "'MOZ' - Mozambique");
			items.Add("NAM", "'NAM' - Namibia");
			items.Add("NRU", "'NRU' - Nauru");
			items.Add("XNV", "'XNV' - Navassa Island");
			items.Add("NPL", "'NPL' - Nepal");
			items.Add("NLD", "'NLD' - Netherlands");
			items.Add("NCL", "'NCL' - New Caledonia");
			items.Add("NZL", "'NZL' - New Zealand");
			items.Add("NIC", "'NIC' - Nicaragua");
			items.Add("NER", "'NER' - Niger");
			items.Add("NGA", "'NGA' - Nigeria");
			items.Add("NIU", "'NIU' - Niue");
			items.Add("NFK", "'NFK' - Norfolk Island");
			items.Add("MNP", "'MNP' - Northern Mariana Islands");
			items.Add("NOR", "'NOR' - Norway");
			items.Add("OMN", "'OMN' - Oman");
			items.Add("PAK", "'PAK' - Pakistan");
			items.Add("PLW", "'PLW' - Palau");
			items.Add("XPL", "'XPL' - Palmyra Atoll");
			items.Add("PAN", "'PAN' - Panama");
			items.Add("PNG", "'PNG' - Papua New Guinea");
			items.Add("XPR", "'XPR' - Paracel Islands");
			items.Add("PRY", "'PRY' - Paraguay");
			items.Add("PER", "'PER' - Peru");
			items.Add("PHL", "'PHL' - Philippines");
			items.Add("PCN", "'PCN' - Pitcairn Islands");
			items.Add("POL", "'POL' - Poland");
			items.Add("PRT", "'PRT' - Portugal");
			items.Add("PRI", "'PRI' - Puerto Rico");
			items.Add("QAT", "'QAT' - Qatar");
			items.Add("REU", "'REU' - Reunion");
			items.Add("ROU", "'ROU' - Romania");
			items.Add("RUS", "'RUS' - Russia");
			items.Add("RWA", "'RWA' - Rwanda");
			items.Add("BLM", "'BLM' - Saint Barthelemy");
			items.Add("SHN", "'SHN' - Saint Helena, Ascension, and Tristan Da Cunha");
			items.Add("KNA", "'KNA' - Saint Kitts and Nevis");
			items.Add("LCA", "'LCA' - Saint Lucia");
			items.Add("MAF", "'MAF' - Saint Martin");
			items.Add("SPM", "'SPM' - Saint Pierre and Miquelon");
			items.Add("VCT", "'VCT' - Saint Vincent and The Grenadines");
			items.Add("WSM", "'WSM' - Samoa");
			items.Add("SMR", "'SMR' - San Marino");
			items.Add("STP", "'STP' - Sao Tome and Principe");
			items.Add("SAU", "'SAU' - Saudi Arabia");
			items.Add("SEN", "'SEN' - Senegal");
			items.Add("SRB", "'SRB' - Serbia");
			items.Add("SYC", "'SYC' - Seychelles");
			items.Add("SLE", "'SLE' - Sierra Leone");
			items.Add("SGP", "'SGP' - Singapore");
			items.Add("SXM", "'SXM' - Sint Maarten");
			items.Add("SVK", "'SVK' - Slovakia");
			items.Add("SVN", "'SVN' - Slovenia");
			items.Add("SLB", "'SLB' - Solomon Islands");
			items.Add("SOM", "'SOM' - Somalia");
			items.Add("ZAF", "'ZAF' - South Africa");
			items.Add("SGS", "'SGS' - South Georgia and South Sandwich Islands");
			items.Add("SSD", "'SSD' - South Sudan");
			items.Add("ESP", "'ESP' - Spain");
			items.Add("XSP", "'XSP' - Spratly Islands");
			items.Add("LKA", "'LKA' - Sri Lanka");
			items.Add("SDN", "'SDN' - Sudan");
			items.Add("SUR", "'SUR' - Suriname");
			items.Add("XSV", "'XSV' - Svalbard");
			items.Add("SWZ", "'SWZ' - Swaziland");
			items.Add("SWE", "'SWE' - Sweden");
			items.Add("CHE", "'CHE' - Switzerland");
			items.Add("SYR", "'SYR' - Syria");
			items.Add("TWN", "'TWN' - Taiwan");
			items.Add("TJK", "'TJK' - Tajikistan");
			items.Add("TZA", "'TZA' - Tanzania");
			items.Add("THA", "'THA' - Thailand");
			items.Add("TLS", "'TLS' - Timor-Leste");
			items.Add("TGO", "'TGO' - Togo");
			items.Add("TKL", "'TKL' - Tokelau");
			items.Add("TON", "'TON' - Tonga");
			items.Add("TTO", "'TTO' - Trinidad and Tobago");
			items.Add("XTR", "'XTR' - Tromelin Island");
			items.Add("TUN", "'TUN' - Tunisia");
			items.Add("TUR", "'TUR' - Turkey");
			items.Add("TKM", "'TKM' - Turkmenistan");
			items.Add("TCA", "'TCA' - Turks and Caicos Islands");
			items.Add("TUV", "'TUV' - Tuvalu");
			items.Add("UGA", "'UGA' - Uganda");
			items.Add("UKR", "'UKR' - Ukraine");
			items.Add("ARE", "'ARE' - United Arab Emirates");
			items.Add("GBR", "'GBR' - United Kingdom");
			items.Add("USA", "'USA' - United States");
			items.Add("AX1", "'AX1' - Unknown");
			items.Add("URY", "'URY' - Uruguay");
			items.Add("UZB", "'UZB' - Uzbekistan");
			items.Add("VUT", "'VUT' - Vanuatu");
			items.Add("VAT", "'VAT' - Vatican City");
			items.Add("VEN", "'VEN' - Venezuela");
			items.Add("VNM", "'VNM' - Vietnam");
			items.Add("VGB", "'VGB' - Virgin Islands, British");
			items.Add("VIR", "'VIR' - Virgin Islands, U.S.");
			items.Add("XWK", "'XWK' - Wake Island");
			items.Add("WLF", "'WLF' - Wallis and Futuna");
			items.Add("XWB", "'XWB' - West Bank");
			items.Add("ESH", "'ESH' - Western Sahara");
			items.Add("YEM", "'YEM' - Yemen");
			items.Add("ZMB", "'ZMB' - Zambia");
			items.Add("ZWE", "'ZWE' - Zimbabwe");
			return items;
		}
	}


	public class TrueFalseItemsSource : IItemsSource {

		public static ItemCollection Items = new TrueFalseItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(0, "0 - False");
			items.Add(1, "1 - True");
			return items;
		}
	}


	public class Air_Missile_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Air_Missile_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Missile (Air Missile)");
			return items;
		}
	}


	public class Air_Missile_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Air_Missile_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Launch Origin : Air");
			items.Add(02, "02 - Launch Origin : Surface");
			items.Add(03, "03 - Launch Origin : Subsurface");
			items.Add(04, "04 - Launch Origin : Space");
			items.Add(05, "05 - Missile Class : Anti-Ballistic");
			items.Add(06, "06 - Missile Class : Ballistic (Air Missile)");
			items.Add(07, "07 - Missile Class : Cruise");
			items.Add(08, "08 - Missile Class : Interceptor (Air Missile)");
			return items;
		}
	}


	public class Air_Missile_Modifier_TwosItemsSource : IItemsSource {

		public static ItemCollection Items = new Air_Missile_Modifier_TwosItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Missile Destination : Air");
			items.Add(02, "02 - Missile Destination : Surface");
			items.Add(03, "03 - Missile Destination : Subsurface");
			items.Add(04, "04 - Missile Destination : Space");
			items.Add(05, "05 - Missile Status : Launched");
			items.Add(06, "06 - Missile Status : Missile");
			items.Add(07, "07 - Missile Type-BMD : Patriot");
			items.Add(08, "08 - Missile Type-AAW : Standard Missile-2 (SM-2)");
			items.Add(09, "09 - Missile Type-AAW : Standard Missile-6 (SM-6)");
			items.Add(10, "10 - Missile Type-AAW : Evolved Sea Sparrow Missile (ESSM)");
			items.Add(11, "11 - Missile Type-AAW : Rolling Airframe Missile (RAM)");
			items.Add(12, "12 - Missile Range : Short Range (Air Missile)");
			items.Add(13, "13 - Missile Range : Medium Range (Air Missile)");
			items.Add(14, "14 - Missile Range : Intermediate Range (Air Missile)");
			items.Add(15, "15 - Missile Range : Long Range (Air Missile)");
			items.Add(16, "16 - Missile Range : Intercontinental (Air Missile)");
			return items;
		}
	}


	public class SpaceItemsSource : IItemsSource {

		public static ItemCollection Items = new SpaceItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(05, "05 - Space");
			items.Add(06, "06 - Space Missile");
			return items;
		}
	}


	public class Space_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Space_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Military (Space)");
			items.Add(110100, "110100 - Military (Space) : Space Vehicle");
			items.Add(110200, "110200 - Military (Space) : Re-Entry Vehicle");
			items.Add(110300, "110300 - Military (Space) : Planet Lander");
			items.Add(110400, "110400 - Military (Space) : Orbiter Shuttle");
			items.Add(110500, "110500 - Military (Space) : Capsule");
			items.Add(110600, "110600 - Military (Space) : Satellite- General");
			items.Add(110700, "110700 - Military (Space) : Satellite");
			items.Add(110800, "110800 - Military (Space) : Antisatellite Weapon");
			items.Add(110900, "110900 - Military (Space) : Astronomical Satellite");
			items.Add(111000, "111000 - Military (Space) : Biosatellite");
			items.Add(111100, "111100 - Military (Space) : Communications Satellite");
			items.Add(111200, "111200 - Military (Space) : Earth Observation Satellite");
			items.Add(111300, "111300 - Military (Space) : Miniaturized Satellite");
			items.Add(111400, "111400 - Military (Space) : Navigational Satellite");
			items.Add(111500, "111500 - Military (Space) : Reconnaissance Satellite");
			items.Add(111600, "111600 - Military (Space) : Space Station");
			items.Add(111700, "111700 - Military (Space) : Tethered Satellite");
			items.Add(111800, "111800 - Military (Space) : Weather Satellite");
			items.Add(111900, "111900 - Military (Space) : Space Launched Vehicle (SLV)");
			items.Add(120000, "120000 - Civilian (Space)");
			items.Add(120100, "120100 - Civilian (Space) : Orbiter Shuttle");
			items.Add(120200, "120200 - Civilian (Space) : Capsule");
			items.Add(120300, "120300 - Civilian (Space) : Satellite");
			items.Add(120400, "120400 - Civilian (Space) : Astronomical Satellite");
			items.Add(120500, "120500 - Civilian (Space) : Biosatellite");
			items.Add(120600, "120600 - Civilian (Space) : Communications Satellite");
			items.Add(120700, "120700 - Civilian (Space) : Earth Observation Satellite");
			items.Add(120800, "120800 - Civilian (Space) : Miniaturized Satellite");
			items.Add(120900, "120900 - Civilian (Space) : Navigational Satellite");
			items.Add(121000, "121000 - Civilian (Space) : Space Station");
			items.Add(121100, "121100 - Civilian (Space) : Tethered Satellite");
			items.Add(121200, "121200 - Civilian (Space) : Weather Satellite");
			items.Add(130000, "130000 - Manual Track (Space)");
			return items;
		}
	}


	public class Space_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Space_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Orbit : Low Earth Orbit (LEO)");
			items.Add(02, "02 - Orbit : Medium Earth Orbit (MEO)");
			items.Add(03, "03 - Orbit : High Earth Orbit (HEO)");
			items.Add(04, "04 - Orbit : Geosynchronous Orbit (GSO)");
			items.Add(05, "05 - Orbit : Geostationary Orbit (GO)");
			items.Add(06, "06 - Orbit : Molniya Orbit (MO)");
			return items;
		}
	}


	public class Space_Modifier_TwosItemsSource : IItemsSource {

		public static ItemCollection Items = new Space_Modifier_TwosItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Sensor : Optical");
			items.Add(02, "02 - Sensor : Infrared");
			items.Add(03, "03 - Sensor : Radar");
			items.Add(04, "04 - Sensor : Signals Intelligence (SIGINT)");
			return items;
		}
	}


	public class Space_Missile_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Space_Missile_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Missile (Space Missile)");
			return items;
		}
	}


	public class Space_Missile_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Space_Missile_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Missile Class : Ballistic (Space Missile)");
			items.Add(02, "02 - Launch Origin : Space 1");
			items.Add(03, "03 - Missile Class : Interceptor (Space Missile)");
			return items;
		}
	}


	public class Space_Missile_Modifier_TwosItemsSource : IItemsSource {

		public static ItemCollection Items = new Space_Missile_Modifier_TwosItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Missile Range : Short Range (Space Missile)");
			items.Add(02, "02 - Missile Range : Medium Range (Space Missile)");
			items.Add(03, "03 - Missile Range : Intermediate Range (Space Missile)");
			items.Add(04, "04 - Missile Range : Long Range (Space Missile)");
			items.Add(05, "05 - Missile Range : Intercontinental (Space Missile)");
			items.Add(06, "06 - Missile Type - BMD : Arrow");
			items.Add(07, "07 - Missile Type - BMD : Ground-Based Interceptor (GBI)");
			items.Add(08, "08 - Missile Type - BMD : Patriot");
			items.Add(09, "09 - Missile Type - BMD : Standard Missile - Terminal Phase (SM-T)");
			items.Add(10, "10 - Missile Type - BMD : Standard Missile - 3 (SM-3)");
			items.Add(11, "11 - Missile Type - BMD : Terminal High-Altitude Area Defense (THAAD)");
			items.Add(12, "12 - Launch Origin : Space 2");
			return items;
		}
	}


	public class UnitsItemsSource : IItemsSource {

		public static ItemCollection Items = new UnitsItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(10, "10 - Land Units");
			return items;
		}
	}


	public class Land_Unit_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Unit_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Command and Control");
			items.Add(110100, "110100 - Command and Control : Broadcast Transmitter Antennae");
			items.Add(110200, "110200 - Command and Control : Civil Affairs");
			items.Add(110300, "110300 - Command and Control : Civil-Military Cooperation");
			items.Add(110400, "110400 - Command and Control : Information Operations");
			items.Add(110500, "110500 - Command and Control : Liaison");
			items.Add(110600, "110600 - Command and Control : Military Information Support (MISO)");
			items.Add(110601, "110601 - Command and Control : Military Information Support (MISO) : Broadcast Transmitter Antennae");
			items.Add(110700, "110700 - Command and Control : Radio");
			items.Add(110800, "110800 - Command and Control : Radio Relay");
			items.Add(110900, "110900 - Command and Control : Radio Teletype Center");
			items.Add(111000, "111000 - Command and Control : Signal");
			items.Add(111001, "111001 - Command and Control : Signal : Radio");
			items.Add(111002, "111002 - Command and Control : Signal : Radio Relay");
			items.Add(111003, "111003 - Command and Control : Signal : Teletype");
			items.Add(111004, "111004 - Command and Control : Signal : Tactical Satellite");
			items.Add(111005, "111005 - Command and Control : Signal : Video Imagery (Combat Camera)");
			items.Add(111100, "111100 - Command and Control : Tactical Satellite");
			items.Add(111200, "111200 - Command and Control : Video Imagery (Combat Camera)");
			items.Add(120100, "120100 - Movement and Maneuver : Air Assault with Organic Lift");
			items.Add(120200, "120200 - Movement and Maneuver : Air Traffic Services/Airfield Operations");
			items.Add(120300, "120300 - Movement and Maneuver : Amphibious");
			items.Add(120400, "120400 - Movement and Maneuver : Antitank/Antiarmor");
			items.Add(120401, "120401 - Movement and Maneuver : Antitank/Antiarmor : Armored");
			items.Add(120402, "120402 - Movement and Maneuver : Antitank/Antiarmor : Motorized");
			items.Add(120500, "120500 - Movement and Maneuver : Armor/Armored/Mechanized/Self-Propelled/Tracked");
			items.Add(120501, "120501 - Movement and Maneuver : Armor/Armored/Mechanized/Self-Propelled/Tracked : Reconnaissance/Cavalry/Scout");
			items.Add(120502, "120502 - Movement and Maneuver : Armor/Armored/Mechanized/Self-Propelled/Tracked : Amphibious");
			items.Add(120600, "120600 - Movement and Maneuver : Army Aviation/Aviation Rotary Wing");
			items.Add(120601, "120601 - Movement and Maneuver : Army Aviation/Aviation Rotary Wing : Reconnaissance");
			items.Add(120700, "120700 - Movement and Maneuver : Aviation Composite");
			items.Add(120800, "120800 - Movement and Maneuver : Aviation Fixed Wing");
			items.Add(120801, "120801 - Movement and Maneuver : Aviation Fixed Wing : Reconnaissance");
			items.Add(120900, "120900 - Movement and Maneuver : Combat");
			items.Add(121000, "121000 - Movement and Maneuver : Combined Arms");
			items.Add(121100, "121100 - Movement and Maneuver : Infantry");
			items.Add(121101, "121101 - Movement and Maneuver : Infantry : Amphibious");
			items.Add(121102, "121102 - Movement and Maneuver : Infantry : Armored/Mechanized/Tracked");
			items.Add(121103, "121103 - Movement and Maneuver : Infantry : Main Gun System");
			items.Add(121104, "121104 - Movement and Maneuver : Infantry : Motorized");
			items.Add(121105, "121105 - Movement and Maneuver : Infantry : Infantry Fighting Vehicle");
			items.Add(121200, "121200 - Movement and Maneuver : Observer");
			items.Add(121300, "121300 - Movement and Maneuver : Reconnaissance/Cavalry/Scout");
			items.Add(121301, "121301 - Movement and Maneuver : Reconnaissance/Cavalry/Scout : Reconnaissance and Surveillance");
			items.Add(121302, "121302 - Movement and Maneuver : Reconnaissance/Cavalry/Scout : Marine");
			items.Add(121303, "121303 - Movement and Maneuver : Reconnaissance/Cavalry/Scout : Motorized");
			items.Add(121400, "121400 - Movement and Maneuver : Sea Air Land (SEAL)");
			items.Add(121500, "121500 - Movement and Maneuver : Sniper");
			items.Add(121600, "121600 - Movement and Maneuver : Surveillance");
			items.Add(121700, "121700 - Movement and Maneuver : Special Forces");
			items.Add(121800, "121800 - Movement and Maneuver : SOF");
			items.Add(121801, "121801 - Movement and Maneuver : SOF : Fixed Wing MISO");
			items.Add(121802, "121802 - Movement and Maneuver : SOF : Ground");
			items.Add(121803, "121803 - Movement and Maneuver : SOF : Special Boat");
			items.Add(121804, "121804 - Movement and Maneuver : SOF : Special SSNR");
			items.Add(121805, "121805 - Movement and Maneuver : SOF : Underwater Demolition Team");
			items.Add(121900, "121900 - Movement and Maneuver : Unmanned Aerial Systems");
			items.Add(130100, "130100 - Fires : Air Defense");
			items.Add(130101, "130101 - Fires : Air Defense : Main Gun System");
			items.Add(130102, "130102 - Fires : Air Defense : Missile");
			items.Add(130200, "130200 - Fires : Air/Land Naval Gunfire Liaison");
			items.Add(130300, "130300 - Fires : Field Artillery");
			items.Add(130301, "130301 - Fires : Field Artillery : Self-propelled");
			items.Add(130302, "130302 - Fires : Field Artillery : Target Acquisition");
			items.Add(130400, "130400 - Fires : Field Artillery Observer");
			items.Add(130500, "130500 - Fires : Joint Fire Support");
			items.Add(130600, "130600 - Fires : Meteorological");
			items.Add(130700, "130700 - Fires : Missile");
			items.Add(130800, "130800 - Fires : Mortar");
			items.Add(130801, "130801 - Fires : Mortar : Armored/Mechanized/Tracked");
			items.Add(130802, "130802 - Fires : Mortar : Self-Propelled Wheeled");
			items.Add(130803, "130803 - Fires : Mortar : Towed");
			items.Add(130900, "130900 - Fires : Survey");
			items.Add(140100, "140100 - Protection : CBRN Defense");
			items.Add(140101, "140101 - Protection : CBRN Defense : Mechanized");
			items.Add(140102, "140102 - Protection : CBRN Defense : Motorized");
			items.Add(140103, "140103 - Protection : CBRN Defense : Reconnaissance");
			items.Add(140104, "140104 - Protection : CBRN Defense : Reconnaissance Armored");
			items.Add(140105, "140105 - Protection : CBRN Defense : Reconnaissance Equipped");
			items.Add(140200, "140200 - Protection : Combat Support (Maneuver Enhancement)");
			items.Add(140300, "140300 - Protection : Criminal Investigation Division");
			items.Add(140400, "140400 - Protection : Diving");
			items.Add(140500, "140500 - Protection : Dog");
			items.Add(140600, "140600 - Protection : Drilling");
			items.Add(140700, "140700 - Protection : Engineer");
			items.Add(140701, "140701 - Protection : Engineer : Mechanized");
			items.Add(140702, "140702 - Protection : Engineer : Motorized");
			items.Add(140703, "140703 - Protection : Engineer : Reconnaissance");
			items.Add(140800, "140800 - Protection : Explosive Ordnance Disposal (EOD)");
			items.Add(140900, "140900 - Protection : Field Camp Construction");
			items.Add(141000, "141000 - Protection : Fire Fighting/Fire Protection");
			items.Add(141100, "141100 - Protection : Geospatial Support/Geospatial Information Support");
			items.Add(141200, "141200 - Protection : Military Police");
			items.Add(141300, "141300 - Protection : Mine");
			items.Add(141400, "141400 - Protection : Mine Clearing");
			items.Add(141500, "141500 - Protection : Mine Launching");
			items.Add(141600, "141600 - Protection : Mine Laying");
			items.Add(141700, "141700 - Protection : Security");
			items.Add(141701, "141701 - Protection : Security : Mechanized");
			items.Add(141702, "141702 - Protection : Security : Motorized");
			items.Add(141800, "141800 - Protection : Search and Rescue");
			items.Add(141900, "141900 - Protection : Security Police (Air)");
			items.Add(142000, "142000 - Protection : Shore Patrol");
			items.Add(142100, "142100 - Protection : Topographic");
			items.Add(150100, "150100 - Intelligence : Analysis");
			items.Add(150200, "150200 - Intelligence : Counterintelligence");
			items.Add(150300, "150300 - Intelligence : Direction Finding");
			items.Add(150400, "150400 - Intelligence : Electronic Ranging");
			items.Add(150500, "150500 - Intelligence : Electronic Warfare");
			items.Add(150501, "150501 - Intelligence : Electronic Warfare : Analysis");
			items.Add(150502, "150502 - Intelligence : Electronic Warfare : Direction Finding");
			items.Add(150503, "150503 - Intelligence : Electronic Warfare : Intercept");
			items.Add(150504, "150504 - Intelligence : Electronic Warfare : Jamming");
			items.Add(150505, "150505 - Intelligence : Electronic Warfare : Search");
			items.Add(150600, "150600 - Intelligence : Intercept (Search and Recording)");
			items.Add(150700, "150700 - Intelligence : Interrogation");
			items.Add(150800, "150800 - Intelligence : Jamming");
			items.Add(150900, "150900 - Intelligence : Joint Intelligence Center");
			items.Add(151000, "151000 - Intelligence : Military Intelligence");
			items.Add(151100, "151100 - Intelligence : Search");
			items.Add(151200, "151200 - Intelligence : Sensor");
			items.Add(160000, "160000 - Sustainment");
			items.Add(160100, "160100 - Sustainment : Administrative");
			items.Add(160200, "160200 - Sustainment : All Classes of Supply");
			items.Add(160300, "160300 - Sustainment : Airport of Debarkation/Airport of Embarkation");
			items.Add(160400, "160400 - Sustainment : Ammunition");
			items.Add(160500, "160500 - Sustainment : Band");
			items.Add(160600, "160600 - Sustainment : Combat Service Support");
			items.Add(160700, "160700 - Sustainment : Finance");
			items.Add(160800, "160800 - Sustainment : Judge Advocate General");
			items.Add(160900, "160900 - Sustainment : Labor");
			items.Add(161000, "161000 - Sustainment : Laundry/Bath");
			items.Add(161100, "161100 - Sustainment : Maintenance");
			items.Add(161200, "161200 - Sustainment : Material");
			items.Add(161300, "161300 - Sustainment : Medical");
			items.Add(161400, "161400 - Sustainment : Medical Treatment Facility");
			items.Add(161500, "161500 - Sustainment : Morale Welfare and Recreation");
			items.Add(161600, "161600 - Sustainment : Mortuary Affairs/Graves Registration");
			items.Add(161700, "161700 - Sustainment : Multiple Classes of Supply");
			items.Add(161800, "161800 - Sustainment : NATO Supply Class I");
			items.Add(161900, "161900 - Sustainment : NATO Supply Class II");
			items.Add(162000, "162000 - Sustainment : NATO Supply Class III");
			items.Add(162100, "162100 - Sustainment : NATO Supply Class IV");
			items.Add(162200, "162200 - Sustainment : NATO Supply Class V");
			items.Add(162300, "162300 - Sustainment : Ordnance");
			items.Add(162400, "162400 - Sustainment : Personnel Services");
			items.Add(162500, "162500 - Sustainment : Petroleum Oil and Lubricants");
			items.Add(162600, "162600 - Sustainment : Pipeline");
			items.Add(162700, "162700 - Sustainment : Postal");
			items.Add(162800, "162800 - Sustainment : Public Affairs/Public Information");
			items.Add(162900, "162900 - Sustainment : Quartermaster");
			items.Add(163000, "163000 - Sustainment : Railhead");
			items.Add(163100, "163100 - Sustainment : Religious Support");
			items.Add(163200, "163200 - Sustainment : Replacement Holding Unit");
			items.Add(163300, "163300 - Sustainment : Sea Port of Debarkation/Sea Port of Embarkation");
			items.Add(163400, "163400 - Sustainment : Supply");
			items.Add(163500, "163500 - Sustainment : Joint Information Bureau");
			items.Add(163600, "163600 - Sustainment : Transportation");
			items.Add(163700, "163700 - Sustainment : US Supply Class I");
			items.Add(163800, "163800 - Sustainment : US Supply Class II");
			items.Add(163900, "163900 - Sustainment : US Supply Class III");
			items.Add(164000, "164000 - Sustainment : US Supply Class IV");
			items.Add(164100, "164100 - Sustainment : US Supply Class V");
			items.Add(164200, "164200 - Sustainment : US Supply Class VI");
			items.Add(164300, "164300 - Sustainment : US Supply Class VII");
			items.Add(164400, "164400 - Sustainment : US Supply Class VIII");
			items.Add(164500, "164500 - Sustainment : US Supply Class IX");
			items.Add(164600, "164600 - Sustainment : US Supply Class X");
			items.Add(164700, "164700 - Sustainment : Water");
			items.Add(164800, "164800 - Sustainment : Water Purification");
			items.Add(164900, "164900 - Sustainment : Broadcast");
			items.Add(170100, "170100 - Naval : Naval");
			items.Add(180100, "180100 - Named Headquarters : Allied Command Europe Rapid Reaction Corps (ARRC)");
			items.Add(180200, "180200 - Named Headquarters : Allied Command Operations");
			items.Add(180300, "180300 - Named Headquarters : International Security Assistance Force (ISAF)");
			items.Add(180400, "180400 - Named Headquarters : Multinational (MN)");
			items.Add(190000, "190000 - Emergency Operation (Land Units)");
			items.Add(200000, "200000 - Law Enforcement (Land Units)");
			items.Add(200100, "200100 - Law Enforcement (Land Units) : ATF DOJ");
			items.Add(200200, "200200 - Law Enforcement (Land Units) : Border Patrol");
			items.Add(200300, "200300 - Law Enforcement (Land Units) : Customs Service");
			items.Add(200400, "200400 - Law Enforcement (Land Units) : DEA");
			items.Add(200500, "200500 - Law Enforcement (Land Units) : DOJ");
			items.Add(200600, "200600 - Law Enforcement (Land Units) : FBI");
			items.Add(200700, "200700 - Law Enforcement (Land Units) : Police");
			items.Add(200800, "200800 - Law Enforcement (Land Units) : Prison");
			items.Add(200900, "200900 - Law Enforcement (Land Units) : US Secret Service (USSS)");
			items.Add(201000, "201000 - Law Enforcement (Land Units) : TSA");
			items.Add(201100, "201100 - Law Enforcement (Land Units) : Coast Guard");
			items.Add(201200, "201200 - Law Enforcement (Land Units) : US Marshals Service");
			items.Add(201300, "201300 - Law Enforcement (Land Units) : Internal Security Force");
			return items;
		}
	}


	public class Land_Unit_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Unit_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Mobility : Air Mobile/Air Assault (US Only)");
			items.Add(02, "02 - Capability : Area");
			items.Add(03, "03 - Capability : Attack 1");
			items.Add(04, "04 - Capability : Biological");
			items.Add(05, "05 - Capability : Border");
			items.Add(06, "06 - Capability : Bridging");
			items.Add(07, "07 - Capability : Chemical");
			items.Add(08, "08 - Capability : Close Protection");
			items.Add(09, "09 - Capability : Combat");
			items.Add(10, "10 - Capability : Command and Control");
			items.Add(11, "11 - Capability : Communications Contingency Package");
			items.Add(12, "12 - Capability : Construction");
			items.Add(13, "13 - Capability : Cross Cultural Communication");
			items.Add(14, "14 - Capability : Crowd and Riot Control");
			items.Add(15, "15 - Capability : Decontamination 1");
			items.Add(16, "16 - Capability : Detention");
			items.Add(17, "17 - Capability : Direct Communications");
			items.Add(18, "18 - Capability : Diving");
			items.Add(19, "19 - Capability : Division");
			items.Add(20, "20 - Capability : Dog");
			items.Add(21, "21 - Capability : Drilling");
			items.Add(22, "22 - Capability : Electro-Optical");
			items.Add(23, "23 - Capability : Enhanced");
			items.Add(24, "24 - Capability : Explosive Ordnance Disposal (EOD)");
			items.Add(25, "25 - Capability : Fire Direction Center");
			items.Add(26, "26 - Capability : Force");
			items.Add(27, "27 - Capability : Forward");
			items.Add(28, "28 - Capability : Ground Station Module");
			items.Add(29, "29 - Capability : Landing Support");
			items.Add(30, "30 - Capability : Large Extension Node");
			items.Add(31, "31 - Capability : Maintenance");
			items.Add(32, "32 - Capability : Meteorological");
			items.Add(33, "33 - Capability : Mine Countermeasure");
			items.Add(34, "34 - Capability : Missile");
			items.Add(35, "35 - Capability : Mobile Advisor and Support");
			items.Add(36, "36 - Capability : Mobile Subscriber Equipment");
			items.Add(37, "37 - Capability : Mobility Support");
			items.Add(38, "38 - Capability : Movement Control Center");
			items.Add(39, "39 - Capability : Multinational");
			items.Add(40, "40 - Capability : Multinational Specialized Unit");
			items.Add(41, "41 - Capability : Multiple Rocket Launcher");
			items.Add(42, "42 - Capability : NATO Medical Role 1");
			items.Add(43, "43 - Capability : NATO Medical Role 2");
			items.Add(44, "44 - Capability : NATO Medical Role 3");
			items.Add(45, "45 - Capability : NATO Medical Role 4");
			items.Add(46, "46 - Capability : Naval");
			items.Add(47, "47 - Capability : Node Center");
			items.Add(48, "48 - Capability : Nuclear");
			items.Add(49, "49 - Capability : Operations");
			items.Add(50, "50 - Capability : Radar");
			items.Add(51, "51 - Capability : RFID Interrogator/Sensor");
			items.Add(52, "52 - Capability : Radiological");
			items.Add(53, "53 - Capability : Search and Rescue");
			items.Add(54, "54 - Capability : Security");
			items.Add(55, "55 - Capability : Sensor");
			items.Add(56, "56 - Capability : Sensor Control Module (SCM)");
			items.Add(57, "57 - Capability : Signals Intelligence");
			items.Add(58, "58 - Capability : Single Shelter Switch");
			items.Add(59, "59 - Capability : Single Rocket Launcher");
			items.Add(60, "60 - Capability : Smoke");
			items.Add(61, "61 - Capability : Sniper");
			items.Add(62, "62 - Capability : Sound Ranging");
			items.Add(63, "63 - Capability : Special Operations Forces (SOF)");
			items.Add(64, "64 - Capability : Special Weapons and Tactics");
			items.Add(65, "65 - Capability : Survey");
			items.Add(66, "66 - Capability : Tactical Exploitation");
			items.Add(67, "67 - Capability : Target Acquisition");
			items.Add(68, "68 - Capability : Topographic");
			items.Add(69, "69 - Capability : Utility 1");
			items.Add(70, "70 - Capability : Video Imagery (Combat Camera)");
			items.Add(71, "71 - Composite Loss : Accident (Land Units)");
			items.Add(72, "72 - Composite Loss : Other (Land Units)");
			items.Add(73, "73 - Operation : Civilian (Land Units)");
			items.Add(74, "74 - Capability : Antisubmarine Warfare");
			items.Add(75, "75 - Capability : Medevac");
			items.Add(76, "76 - Capability : Ranger");
			items.Add(77, "77 - Capability : Support 1");
			items.Add(78, "78 - Capability : Aviation");
			return items;
		}
	}


	public class Land_Unit_Modifier_TwosItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Unit_Modifier_TwosItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Mobility : Airborne");
			items.Add(02, "02 - Mobility : Arctic");
			items.Add(03, "03 - Capability : Battle Damage Repair");
			items.Add(04, "04 - Mobility : Bicycle Equipped");
			items.Add(05, "05 - Close Range and Support : Casualty Staging");
			items.Add(06, "06 - Capability : Clearing");
			items.Add(07, "07 - Capability : Close Range");
			items.Add(08, "08 - Capability : Control");
			items.Add(09, "09 - Capability : Decontamination 2");
			items.Add(10, "10 - Capability : Demolition");
			items.Add(11, "11 - Capability : Dental");
			items.Add(12, "12 - Capability : Digital");
			items.Add(13, "13 - Capability : Enhanced Position Location Reporting System (EPLRS)");
			items.Add(14, "14 - Capability : Equipment");
			items.Add(15, "15 - Capability : Heavy");
			items.Add(16, "16 - Capability : High Altitude");
			items.Add(17, "17 - Capability : Intermodal");
			items.Add(18, "18 - Capability : Intensive Care");
			items.Add(19, "19 - Capability : Light");
			items.Add(20, "20 - Capability : Laboratory");
			items.Add(21, "21 - Capability : Launcher");
			items.Add(22, "22 - Capability : Long Range");
			items.Add(23, "23 - Capability : Low Altitude");
			items.Add(24, "24 - Capability : Medium");
			items.Add(25, "25 - Capability : Medium Altitude");
			items.Add(26, "26 - Capability : Medium Range");
			items.Add(27, "27 - Capability : Mountain");
			items.Add(28, "28 - Capability : High to Medium Altitude");
			items.Add(29, "29 - Capability : Multi-Channel");
			items.Add(30, "30 - Capability : Optical (Flash)");
			items.Add(31, "31 - Capability : Pack Animal");
			items.Add(32, "32 - Capability : Patient Evacuation Coordination");
			items.Add(33, "33 - Capability : Preventive Maintenance");
			items.Add(34, "34 - Capability : Psychological");
			items.Add(35, "35 - Capability : Radio Relay Line of Sight");
			items.Add(36, "36 - Mobility : Railroad");
			items.Add(37, "37 - Capability : Recovery (Unmanned Systems)");
			items.Add(38, "38 - Capability : Recovery (Maintenance)");
			items.Add(39, "39 - Capability : Rescue Coordination Center");
			items.Add(40, "40 - Mobility : Riverine");
			items.Add(41, "41 - Capability : Single Channel");
			items.Add(42, "42 - Mobility : Ski");
			items.Add(43, "43 - Capability : Short Range");
			items.Add(44, "44 - Capability : Strategic");
			items.Add(45, "45 - Capability : Support 2");
			items.Add(46, "46 - Capability : Tactical");
			items.Add(47, "47 - Mobility : Towed");
			items.Add(48, "48 - Capability : Troop");
			items.Add(49, "49 - Mobility : Vertical or Short Take-Off and Landing (VTOL/VSTOL)");
			items.Add(50, "50 - Capability : Veterinary");
			items.Add(51, "51 - Mobility : Wheeled");
			items.Add(52, "52 - Capability : High to Low Altitude");
			items.Add(53, "53 - Capability : Medium to Low Altitude");
			items.Add(54, "54 - Capability : Attack 2");
			items.Add(55, "55 - Capability : Refuel");
			items.Add(56, "56 - Capability : Utility 2");
			items.Add(57, "57 - Capability : Combat Search and Rescue");
			return items;
		}
	}


	public class Land_Unit_Special_Entity_SubtypeItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Unit_Special_Entity_SubtypeItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(95, "95 - Headquarters Element");
			items.Add(96, "96 - Division and Below Support");
			items.Add(97, "97 - Corps Support");
			items.Add(98, "98 - Theater/Echelons Above Corps Support");
			return items;
		}
	}


	public class EchelonsItemsSource : IItemsSource {

		public static ItemCollection Items = new EchelonsItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(11, "11 - Team/Crew");
			items.Add(12, "12 - Squad");
			items.Add(13, "13 - Section");
			items.Add(14, "14 - Platoon/Detachment");
			items.Add(15, "15 - Company/Battery/Troop");
			items.Add(16, "16 - Battalion/Squadron");
			items.Add(17, "17 - Regiment/Group");
			items.Add(18, "18 - Brigade");
			items.Add(21, "21 - Division");
			items.Add(22, "22 - Corps/MEF");
			items.Add(23, "23 - Army");
			items.Add(24, "24 - Army Group/Front");
			items.Add(25, "25 - Region/Theater");
			items.Add(26, "26 - Command");
			return items;
		}
	}


	public class StatusesItemsSource : IItemsSource {

		public static ItemCollection Items = new StatusesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(0, "0 - Present");
			items.Add(1, "1 - Planned/Anticipated/Suspect");
			return items;
		}
	}


	public class ReinforcedItemsSource : IItemsSource {

		public static ItemCollection Items = new ReinforcedItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(0, "0 - +");
			items.Add(1, "1 - -");
			items.Add(2, "2 - +/-");
			return items;
		}
	}


	public class CombatEffectivenessItemsSource : IItemsSource {

		public static ItemCollection Items = new CombatEffectivenessItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add("FO", "'FO' - Fully Operational");
			items.Add("SO", "'SO' - Substantially Operational");
			items.Add("MO", "'MO' - Marginally Operational");
			items.Add("NO", "'NO' - Not Operational");
			items.Add("UNK", "'UNK' - Unknown");
			return items;
		}
	}


	public class CivilianItemsSource : IItemsSource {

		public static ItemCollection Items = new CivilianItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(11, "11 - Land Civilian");
			return items;
		}
	}


	public class Land_Unit_Civilian_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Unit_Civilian_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Civilian (Land Civilian)");
			items.Add(110100, "110100 - Civilian (Land Civilian) : Environmental Protection");
			items.Add(110200, "110200 - Civilian (Land Civilian) : Government Organization");
			items.Add(110300, "110300 - Civilian (Land Civilian) : Individual");
			items.Add(110400, "110400 - Civilian (Land Civilian) : Organization or Group");
			items.Add(110500, "110500 - Civilian (Land Civilian) : Killing Victim");
			items.Add(110600, "110600 - Civilian (Land Civilian) : Killing Victims");
			items.Add(110700, "110700 - Civilian (Land Civilian) : Victim of an Attempted Crime");
			items.Add(110800, "110800 - Civilian (Land Civilian) : Spy");
			items.Add(110900, "110900 - Civilian (Land Civilian) : Composite Loss");
			items.Add(111000, "111000 - Civilian (Land Civilian) : Emergency Medical Operation");
			return items;
		}
	}


	public class Land_Unit_Civilian_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Unit_Civilian_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Crime : Assassination (Land Civilian)");
			items.Add(02, "02 - Crime : Execution (Wrongful Killing) (Land Civilian)");
			items.Add(03, "03 - Crime : Murder Victims");
			items.Add(04, "04 - Crime : Hijacking (Land Civilian)");
			items.Add(05, "05 - Crime : Kidnapping (Land Civilian)");
			items.Add(06, "06 - Crime : Piracy (Land Civilian)");
			items.Add(07, "07 - Crime : Rape (Land Civilian)");
			items.Add(08, "08 - Organization : Civilian (Land Civilian)");
			items.Add(09, "09 - Organization : Displaced Person(s)- Refugee(s) and Evacuee(s)");
			items.Add(10, "10 - Organization : Foreign Fighter(s)");
			items.Add(11, "11 - Organization : Gang Member or Gang");
			items.Add(12, "12 - Organization : Government Organization");
			items.Add(13, "13 - Organization : Leader or Leadership 1");
			items.Add(14, "14 - Organization : Nongovernmental Organization Member or Nongovernmental Organization");
			items.Add(15, "15 - Organization : Coerced/Impressed Recruit");
			items.Add(16, "16 - Organization : Willing Recruit");
			items.Add(17, "17 - Organization : Religious or Religious Organization");
			items.Add(18, "18 - Organization : Targeted Individual or Organization");
			items.Add(19, "19 - Organization : Terrorist or Terrorist Organization");
			items.Add(20, "20 - Organization : Speaker");
			items.Add(21, "21 - Composite Loss : Accident (Land Civilian)");
			items.Add(22, "22 - Composite Loss : Combat");
			items.Add(23, "23 - Composite Loss : Other (Land Civilian)");
			items.Add(24, "24 - Crime : Loot");
			return items;
		}
	}


	public class Land_Unit_Civilian_Modifier_TwosItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Unit_Civilian_Modifier_TwosItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Organization : Leader or Leadership 2");
			return items;
		}
	}


	public class LandItemsSource : IItemsSource {

		public static ItemCollection Items = new LandItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(15, "15 - Land Equipment");
			return items;
		}
	}


	public class Land_Equipment_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Equipment_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Weapon/Weapon System");
			items.Add(110100, "110100 - Weapon/Weapon System : Rifle");
			items.Add(110101, "110101 - Weapon/Weapon System : Rifle : Single Shot Rifle");
			items.Add(110102, "110102 - Weapon/Weapon System : Rifle : Semiautomatic Rifle");
			items.Add(110103, "110103 - Weapon/Weapon System : Rifle : Automatic Rifle");
			items.Add(110200, "110200 - Weapon/Weapon System : Machine Gun");
			items.Add(110201, "110201 - Weapon/Weapon System : Machine Gun : Light");
			items.Add(110202, "110202 - Weapon/Weapon System : Machine Gun : Medium");
			items.Add(110203, "110203 - Weapon/Weapon System : Machine Gun : Heavy");
			items.Add(110300, "110300 - Weapon/Weapon System : Grenade Launcher");
			items.Add(110301, "110301 - Weapon/Weapon System : Grenade Launcher : Light");
			items.Add(110302, "110302 - Weapon/Weapon System : Grenade Launcher : Medium");
			items.Add(110303, "110303 - Weapon/Weapon System : Grenade Launcher : Heavy");
			items.Add(110400, "110400 - Weapon/Weapon System : Flame Thrower");
			items.Add(110500, "110500 - Weapon/Weapon System : Air Defense Gun");
			items.Add(110501, "110501 - Weapon/Weapon System : Air Defense Gun : Light");
			items.Add(110502, "110502 - Weapon/Weapon System : Air Defense Gun : Medium");
			items.Add(110503, "110503 - Weapon/Weapon System : Air Defense Gun : Heavy");
			items.Add(110600, "110600 - Weapon/Weapon System : Antitank Gun");
			items.Add(110601, "110601 - Weapon/Weapon System : Antitank Gun : Light");
			items.Add(110602, "110602 - Weapon/Weapon System : Antitank Gun : Medium");
			items.Add(110603, "110603 - Weapon/Weapon System : Antitank Gun : Heavy");
			items.Add(110700, "110700 - Weapon/Weapon System : Direct Fire Gun");
			items.Add(110701, "110701 - Weapon/Weapon System : Direct Fire Gun : Light");
			items.Add(110702, "110702 - Weapon/Weapon System : Direct Fire Gun : Medium");
			items.Add(110703, "110703 - Weapon/Weapon System : Direct Fire Gun : Heavy");
			items.Add(110800, "110800 - Weapon/Weapon System : Recoilless Gun");
			items.Add(110801, "110801 - Weapon/Weapon System : Recoilless Gun : Light");
			items.Add(110802, "110802 - Weapon/Weapon System : Recoilless Gun : Medium");
			items.Add(110803, "110803 - Weapon/Weapon System : Recoilless Gun : Heavy");
			items.Add(110900, "110900 - Weapon/Weapon System : Howitzer");
			items.Add(110901, "110901 - Weapon/Weapon System : Howitzer : Light");
			items.Add(110902, "110902 - Weapon/Weapon System : Howitzer : Medium");
			items.Add(110903, "110903 - Weapon/Weapon System : Howitzer : Heavy");
			items.Add(111000, "111000 - Weapon/Weapon System : Missile Launcher");
			items.Add(111001, "111001 - Weapon/Weapon System : Missile Launcher : Light");
			items.Add(111002, "111002 - Weapon/Weapon System : Missile Launcher : Medium");
			items.Add(111003, "111003 - Weapon/Weapon System : Missile Launcher : Heavy");
			items.Add(111100, "111100 - Weapon/Weapon System : ADML");
			items.Add(111101, "111101 - Weapon/Weapon System : ADML : Light");
			items.Add(111102, "111102 - Weapon/Weapon System : ADML : Light- Light Transporter-Launcher and Radar (TLAR)");
			items.Add(111103, "111103 - Weapon/Weapon System : ADML : Light- Light Tactical Landing Approach Radar (TELAR)");
			items.Add(111104, "111104 - Weapon/Weapon System : ADML : Medium");
			items.Add(111105, "111105 - Weapon/Weapon System : ADML : Medium- TLAR");
			items.Add(111106, "111106 - Weapon/Weapon System : ADML : Medium- TELAR Air Defense Missile Launcher");
			items.Add(111107, "111107 - Weapon/Weapon System : ADML : Heavy");
			items.Add(111108, "111108 - Weapon/Weapon System : ADML : Heavy- TLAR");
			items.Add(111109, "111109 - Weapon/Weapon System : ADML : Heavy- TELAR");
			items.Add(111200, "111200 - Weapon/Weapon System : Antitank Missile Launcher");
			items.Add(111201, "111201 - Weapon/Weapon System : Antitank Missile Launcher : Light");
			items.Add(111202, "111202 - Weapon/Weapon System : Antitank Missile Launcher : Medium");
			items.Add(111203, "111203 - Weapon/Weapon System : Antitank Missile Launcher : Heavy");
			items.Add(111300, "111300 - Weapon/Weapon System : Surface-to-Surface Missile Launcher");
			items.Add(111301, "111301 - Weapon/Weapon System : Surface-to-Surface Missile Launcher : Light");
			items.Add(111302, "111302 - Weapon/Weapon System : Surface-to-Surface Missile Launcher : Medium");
			items.Add(111303, "111303 - Weapon/Weapon System : Surface-to-Surface Missile Launcher : Heavy");
			items.Add(111400, "111400 - Weapon/Weapon System : Mortar");
			items.Add(111401, "111401 - Weapon/Weapon System : Mortar : Light");
			items.Add(111402, "111402 - Weapon/Weapon System : Mortar : Medium");
			items.Add(111403, "111403 - Weapon/Weapon System : Mortar : Heavy");
			items.Add(111500, "111500 - Weapon/Weapon System : Single Rocket Launcher");
			items.Add(111501, "111501 - Weapon/Weapon System : Single Rocket Launcher : Light");
			items.Add(111502, "111502 - Weapon/Weapon System : Single Rocket Launcher : Medium");
			items.Add(111503, "111503 - Weapon/Weapon System : Single Rocket Launcher : Heavy");
			items.Add(111600, "111600 - Weapon/Weapon System : Multiple Rocket Launcher");
			items.Add(111601, "111601 - Weapon/Weapon System : Multiple Rocket Launcher : Light");
			items.Add(111602, "111602 - Weapon/Weapon System : Multiple Rocket Launcher : Medium");
			items.Add(111603, "111603 - Weapon/Weapon System : Multiple Rocket Launcher : Heavy");
			items.Add(111700, "111700 - Weapon/Weapon System : Antitank Rocket Launcher");
			items.Add(111701, "111701 - Weapon/Weapon System : Antitank Rocket Launcher : Light");
			items.Add(111702, "111702 - Weapon/Weapon System : Antitank Rocket Launcher : Medium");
			items.Add(111703, "111703 - Weapon/Weapon System : Antitank Rocket Launcher : Heavy");
			items.Add(111800, "111800 - Weapon/Weapon System : Nonlethal Weapon");
			items.Add(111900, "111900 - Weapon/Weapon System : Taser");
			items.Add(112000, "112000 - Weapon/Weapon System : Water Cannon");
			items.Add(120000, "120000 - Vehicle");
			items.Add(120100, "120100 - Vehicle : Armored Vehicle");
			items.Add(120101, "120101 - Vehicle : Armored Vehicle : Armored Fighting Vehicle");
			items.Add(120102, "120102 - Vehicle : Armored Vehicle : Armored Fighting Vehicle C2");
			items.Add(120103, "120103 - Vehicle : Armored Vehicle : Armored Personnel Carrier");
			items.Add(120104, "120104 - Vehicle : Armored Vehicle : Armored Personnel Carrier Ambulance");
			items.Add(120105, "120105 - Vehicle : Armored Vehicle : Armored Protected Vehicle");
			items.Add(120106, "120106 - Vehicle : Armored Vehicle : Armored Protected Vehicle Recovery");
			items.Add(120107, "120107 - Vehicle : Armored Vehicle : Armored Protected Medical Evacuation");
			items.Add(120108, "120108 - Vehicle : Armored Vehicle : Armored Personnel Carrier-Recovery");
			items.Add(120109, "120109 - Vehicle : Armored Vehicle : Combat Service Support Vehicle");
			items.Add(120110, "120110 - Vehicle : Armored Vehicle : Light Wheeled Armored Vehicle");
			items.Add(120200, "120200 - Vehicle : Tank");
			items.Add(120201, "120201 - Vehicle : Tank : Light");
			items.Add(120202, "120202 - Vehicle : Tank : Medium");
			items.Add(120203, "120203 - Vehicle : Tank : Heavy");
			items.Add(120300, "120300 - Vehicle : Tank Recovery Vehicle");
			items.Add(120301, "120301 - Vehicle : Tank Recovery Vehicle : Light");
			items.Add(120302, "120302 - Vehicle : Tank Recovery Vehicle : Medium");
			items.Add(120303, "120303 - Vehicle : Tank Recovery Vehicle : Heavy");
			items.Add(130000, "130000 - Engineer Equipment");
			items.Add(130100, "130100 - Engineer Equipment : Bridge");
			items.Add(130200, "130200 - Engineer Equipment : Bridge Mounted on Utility Vehicle");
			items.Add(130300, "130300 - Engineer Equipment : Fixed Bridge");
			items.Add(130400, "130400 - Engineer Equipment : Floating Bridge");
			items.Add(130500, "130500 - Engineer Equipment : Folding Girder Bridge");
			items.Add(130600, "130600 - Engineer Equipment : Hollow Deck Bridge");
			items.Add(130700, "130700 - Engineer Equipment : Drill");
			items.Add(130701, "130701 - Engineer Equipment : Drill : Drill Mounted on Utility Vehicle");
			items.Add(130800, "130800 - Engineer Equipment : Earthmover");
			items.Add(130801, "130801 - Engineer Equipment : Earthmover : Multifunctional Earthmover/Digger");
			items.Add(130900, "130900 - Engineer Equipment : Mine Clearing Equipment");
			items.Add(130901, "130901 - Engineer Equipment : Mine Clearing Equipment : Trailer Mounted");
			items.Add(130902, "130902 - Engineer Equipment : Mine Clearing Equipment : Mine Clearing Equipment on Tank Chassis");
			items.Add(131000, "131000 - Engineer Equipment : Mine Laying Equipment");
			items.Add(131001, "131001 - Engineer Equipment : Mine Laying Equipment : Mine Laying Equipment on Utility Vehicle");
			items.Add(131002, "131002 - Engineer Equipment : Mine Laying Equipment : Armored Carrier with Volcano");
			items.Add(131003, "131003 - Engineer Equipment : Mine Laying Equipment : Truck Mounted with Volcano");
			items.Add(131100, "131100 - Engineer Equipment : Dozer");
			items.Add(131101, "131101 - Engineer Equipment : Dozer : Dozer-Armored");
			items.Add(131200, "131200 - Engineer Equipment : Armored Assault");
			items.Add(131300, "131300 - Engineer Equipment : Armored Engineer Recon Vehicle (AERV)");
			items.Add(131400, "131400 - Engineer Equipment : Backhoe");
			items.Add(131500, "131500 - Engineer Equipment : Construction Vehicle");
			items.Add(131600, "131600 - Engineer Equipment : Ferry Transporter");
			items.Add(140100, "140100 - Utility Vehicles : Utility Vehicle");
			items.Add(140200, "140200 - Utility Vehicles : Medical");
			items.Add(140300, "140300 - Utility Vehicles : Medical Evacuation");
			items.Add(140400, "140400 - Utility Vehicles : Mobile Emergency Physician");
			items.Add(140500, "140500 - Utility Vehicles : Bus");
			items.Add(140600, "140600 - Utility Vehicles : Semi-Trailer and Truck");
			items.Add(140601, "140601 - Utility Vehicles : Semi-Trailer and Truck : Light");
			items.Add(140602, "140602 - Utility Vehicles : Semi-Trailer and Truck : Medium");
			items.Add(140603, "140603 - Utility Vehicles : Semi-Trailer and Truck : Heavy");
			items.Add(140700, "140700 - Utility Vehicles : Limited Cross Country Truck");
			items.Add(140800, "140800 - Utility Vehicles : Cross Country Truck");
			items.Add(140900, "140900 - Utility Vehicles : Petroleum-Oil and Lubricant");
			items.Add(141000, "141000 - Utility Vehicles : Water");
			items.Add(141100, "141100 - Utility Vehicles : Amphibious Utility Wheeled Vehicle");
			items.Add(141200, "141200 - Utility Vehicles : Tow Truck");
			items.Add(141201, "141201 - Utility Vehicles : Tow Truck : Light");
			items.Add(141202, "141202 - Utility Vehicles : Tow Truck : Heavy");
			items.Add(150100, "150100 - Train : Locomotive");
			items.Add(150200, "150200 - Train : Railcar");
			items.Add(160100, "160100 - Civilian Vehicle : Automobile");
			items.Add(160101, "160101 - Civilian Vehicle : Automobile : Compact");
			items.Add(160102, "160102 - Civilian Vehicle : Automobile : Midsize");
			items.Add(160103, "160103 - Civilian Vehicle : Automobile : Sedan");
			items.Add(160200, "160200 - Civilian Vehicle : Open-Bed Truck");
			items.Add(160201, "160201 - Civilian Vehicle : Open-Bed Truck : Pickup");
			items.Add(160202, "160202 - Civilian Vehicle : Open-Bed Truck : Small");
			items.Add(160203, "160203 - Civilian Vehicle : Open-Bed Truck : Large");
			items.Add(160300, "160300 - Civilian Vehicle : Multiple Passenger Vehicle");
			items.Add(160301, "160301 - Civilian Vehicle : Multiple Passenger Vehicle : Van");
			items.Add(160302, "160302 - Civilian Vehicle : Multiple Passenger Vehicle : Small Bus");
			items.Add(160303, "160303 - Civilian Vehicle : Multiple Passenger Vehicle : Large Bus");
			items.Add(160400, "160400 - Civilian Vehicle : Utility Vehicle");
			items.Add(160401, "160401 - Civilian Vehicle : Utility Vehicle : Sport Utility Vehicle (SUV)");
			items.Add(160402, "160402 - Civilian Vehicle : Utility Vehicle : Small Box Truck");
			items.Add(160403, "160403 - Civilian Vehicle : Utility Vehicle : Large Box Truck");
			items.Add(160500, "160500 - Civilian Vehicle : Jeep Type Vehicle");
			items.Add(160501, "160501 - Civilian Vehicle : Jeep Type Vehicle : Small/Light");
			items.Add(160502, "160502 - Civilian Vehicle : Jeep Type Vehicle : Medium");
			items.Add(160503, "160503 - Civilian Vehicle : Jeep Type Vehicle : Large/Heavy");
			items.Add(160600, "160600 - Civilian Vehicle : Tractor Trailer with Box");
			items.Add(160601, "160601 - Civilian Vehicle : Tractor Trailer with Box : Small/Light");
			items.Add(160602, "160602 - Civilian Vehicle : Tractor Trailer with Box : Medium");
			items.Add(160603, "160603 - Civilian Vehicle : Tractor Trailer with Box : Large/Heavy");
			items.Add(160700, "160700 - Civilian Vehicle : Tractor Trailer with Flatbed");
			items.Add(160701, "160701 - Civilian Vehicle : Tractor Trailer with Flatbed : Small/Light");
			items.Add(160702, "160702 - Civilian Vehicle : Tractor Trailer with Flatbed : Medium");
			items.Add(160703, "160703 - Civilian Vehicle : Tractor Trailer with Flatbed : Large/Heavy");
			items.Add(160800, "160800 - Civilian Vehicle : Known Insurgent Vehicle");
			items.Add(160900, "160900 - Civilian Vehicle : Drug Vehicle");
			items.Add(170000, "170000 - Law Enforcement (Land Equipment)");
			items.Add(170100, "170100 - Law Enforcement (Land Equipment) : ATF DOJ");
			items.Add(170200, "170200 - Law Enforcement (Land Equipment) : Border Patrol");
			items.Add(170300, "170300 - Law Enforcement (Land Equipment) : Customs Service");
			items.Add(170400, "170400 - Law Enforcement (Land Equipment) : DEA");
			items.Add(170500, "170500 - Law Enforcement (Land Equipment) : DOJ");
			items.Add(170600, "170600 - Law Enforcement (Land Equipment) : FBI");
			items.Add(170700, "170700 - Law Enforcement (Land Equipment) : Police");
			items.Add(170800, "170800 - Law Enforcement (Land Equipment) : US Secret Service (USSS)");
			items.Add(170900, "170900 - Law Enforcement (Land Equipment) : TSA");
			items.Add(171000, "171000 - Law Enforcement (Land Equipment) : Coast Guard");
			items.Add(171100, "171100 - Law Enforcement (Land Equipment) : US Marshals Service");
			items.Add(180000, "180000 - Pack Animals");
			items.Add(190000, "190000 - Missile Support");
			items.Add(190100, "190100 - Missile Support : Transloader");
			items.Add(190200, "190200 - Missile Support : Transporter");
			items.Add(190300, "190300 - Missile Support : Crane/Loading Device");
			items.Add(190400, "190400 - Missile Support : Propellant Transporter");
			items.Add(190500, "190500 - Missile Support : Warhead Transporter");
			items.Add(200100, "200100 - Other Equipment : Antennae");
			items.Add(200200, "200200 - Other Equipment : Bomb");
			items.Add(200300, "200300 - Other Equipment : Booby Trap");
			items.Add(200400, "200400 - Other Equipment : CBRN Equipment");
			items.Add(200500, "200500 - Other Equipment : Computer System");
			items.Add(200600, "200600 - Other Equipment : Command Launch Equipment (CLE)");
			items.Add(200700, "200700 - Other Equipment : Generator Set");
			items.Add(200800, "200800 - Other Equipment : Ground-based Midcourse Defense (GMD) Fire Control (GFC) Center");
			items.Add(200900, "200900 - Other Equipment : In-Flight Interceptor Communications System (IFICS) Data Terminal (IDT)");
			items.Add(201000, "201000 - Other Equipment : Laser");
			items.Add(201100, "201100 - Other Equipment : Military Information Support Operations (MISO)");
			items.Add(201200, "201200 - Other Equipment : Sustainment Shipments");
			items.Add(201300, "201300 - Other Equipment : Tent");
			items.Add(201400, "201400 - Other Equipment : Unit Deployment Shipments");
			items.Add(201500, "201500 - Other Equipment : Emergency Medical Operation");
			items.Add(201501, "201501 - Other Equipment : Emergency Medical Operation : Medical Evacuation Helicopter");
			items.Add(210100, "210100 - Land Mines : Land Mine");
			items.Add(210200, "210200 - Land Mines : Antipersonnel Land Mine (APL)");
			items.Add(210300, "210300 - Land Mines : Antitank Mine");
			items.Add(210400, "210400 - Land Mines : Improvised Explosives Device (IED)");
			items.Add(210500, "210500 - Land Mines : Less than lethal");
			items.Add(220100, "220100 - Sensors : Sensor");
			items.Add(220200, "220200 - Sensors : Sensor Emplaced");
			items.Add(220300, "220300 - Sensors : Radar");
			items.Add(230000, "230000 - Emergency Operation (Land Equipment)");
			items.Add(230100, "230100 - Emergency Operation (Land Equipment) : Ambulance");
			items.Add(230200, "230200 - Emergency Operation (Land Equipment) : Fire Fighting/Fire Protection");
			items.Add(240000, "240000 - Manual Track (Land Equipment)");
			return items;
		}
	}


	public class Land_Equipment_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Equipment_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Sensor Type : Biological");
			items.Add(02, "02 - Sensor Type : Chemical");
			items.Add(03, "03 - Sensor Type : Early Warning Radar");
			items.Add(04, "04 - Sensor Type : Intrusion");
			items.Add(05, "05 - Sensor Type : Nuclear");
			items.Add(06, "06 - Sensor Type : Radiological");
			items.Add(07, "07 - Sensor Type : Upgraded Early Warning Radar");
			items.Add(08, "08 - Crime : Hijacking (Land Equipment)");
			items.Add(09, "09 - Organization : Civilian (Land Equipment)");
			return items;
		}
	}


	public class MobilitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new MobilitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(31, "31 - Wheeled limited cross country");
			items.Add(32, "32 - Wheeled cross country");
			items.Add(33, "33 - Tracked");
			items.Add(34, "34 - Wheeled and tracked combination");
			items.Add(35, "35 - Towed");
			items.Add(36, "36 - Rail");
			items.Add(37, "37 - Pack animals");
			items.Add(41, "41 - Over snow (prime mover)");
			items.Add(42, "42 - Sled");
			items.Add(51, "51 - Barge");
			items.Add(52, "52 - Amphibious");
			return items;
		}
	}


	public class InstallationsItemsSource : IItemsSource {

		public static ItemCollection Items = new InstallationsItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(20, "20 - Land Installation");
			return items;
		}
	}


	public class Land_Installation_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Installation_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Installation");
			items.Add(110100, "110100 - Installation : Aircraft Production/Assembly");
			items.Add(110200, "110200 - Installation : Ammunition and Explosives/Assembly");
			items.Add(110300, "110300 - Installation : Ammunition Cache");
			items.Add(110400, "110400 - Installation : Armament Production");
			items.Add(110500, "110500 - Installation : Black List Location");
			items.Add(110600, "110600 - Installation : Chemical-Biological-Radiological and Nuclear (CBRN)");
			items.Add(110700, "110700 - Installation : Engineering Equipment Production");
			items.Add(110701, "110701 - Installation : Engineering Equipment Production : Bridge");
			items.Add(110800, "110800 - Installation : Equipment Manufacture");
			items.Add(110900, "110900 - Installation : Government Leadership");
			items.Add(111000, "111000 - Installation : Gray List Location");
			items.Add(111100, "111100 - Installation : Mass Grave Site");
			items.Add(111200, "111200 - Installation : Materiel");
			items.Add(111300, "111300 - Installation : Mine");
			items.Add(111400, "111400 - Installation : Missile and Space System Production");
			items.Add(111500, "111500 - Installation : Nuclear (Non CBRN Defense)");
			items.Add(111600, "111600 - Installation : Printed Media");
			items.Add(111700, "111700 - Installation : Safe House");
			items.Add(111800, "111800 - Installation : White List Location");
			items.Add(111900, "111900 - Installation : Tented Camp");
			items.Add(111901, "111901 - Installation : Tented Camp : Displaced Persons / Refugee / Evacuees Camp");
			items.Add(111902, "111902 - Installation : Tented Camp : Training Camp");
			items.Add(112000, "112000 - Installation : Warehouse/Storage Facility");
			items.Add(112100, "112100 - Installation : Law Enforcement");
			items.Add(112101, "112101 - Installation : Law Enforcement : Bureau of Alcohol-Tobacco-Firearms and Explosives (ATF) (Department of Justice)");
			items.Add(112102, "112102 - Installation : Law Enforcement : Border Patrol");
			items.Add(112103, "112103 - Installation : Law Enforcement : Customs Service");
			items.Add(112104, "112104 - Installation : Law Enforcement : Drug Enforcement Administration (DEA)");
			items.Add(112105, "112105 - Installation : Law Enforcement : Department of Justice (DOJ)");
			items.Add(112106, "112106 - Installation : Law Enforcement : Federal Bureau of Investigation (FBI)");
			items.Add(112107, "112107 - Installation : Law Enforcement : Police");
			items.Add(112108, "112108 - Installation : Law Enforcement : Prison");
			items.Add(112109, "112109 - Installation : Law Enforcement : United States Secret Service (USSS)");
			items.Add(112110, "112110 - Installation : Law Enforcement : Transportation Security Administration (TSA)");
			items.Add(112111, "112111 - Installation : Law Enforcement : Coast Guard");
			items.Add(112112, "112112 - Installation : Law Enforcement : US Marshals Service");
			items.Add(112200, "112200 - Installation : Emergency Operation");
			items.Add(112201, "112201 - Installation : Emergency Operation : Fire Station");
			items.Add(112202, "112202 - Installation : Emergency Operation : Emergency Medical Operation");
			items.Add(120100, "120100 - Infrastructure : Agriculture and Food");
			items.Add(120101, "120101 - Infrastructure : Agriculture and Food : Agriculture Laboratory");
			items.Add(120102, "120102 - Infrastructure : Agriculture and Food : Animal Feedlot");
			items.Add(120103, "120103 - Infrastructure : Agriculture and Food : Commercial Food Distribution Center");
			items.Add(120104, "120104 - Infrastructure : Agriculture and Food : Farm/Ranch");
			items.Add(120105, "120105 - Infrastructure : Agriculture and Food : Food Distribution");
			items.Add(120106, "120106 - Infrastructure : Agriculture and Food : Food Production Center");
			items.Add(120107, "120107 - Infrastructure : Agriculture and Food : Food Retail");
			items.Add(120108, "120108 - Infrastructure : Agriculture and Food : Grain Storage");
			items.Add(120200, "120200 - Infrastructure : Banking- Finance- and Insurance");
			items.Add(120201, "120201 - Infrastructure : Banking- Finance- and Insurance : ATM");
			items.Add(120202, "120202 - Infrastructure : Banking- Finance- and Insurance : Bank");
			items.Add(120203, "120203 - Infrastructure : Banking- Finance- and Insurance : Bullion Storage");
			items.Add(120204, "120204 - Infrastructure : Banking- Finance- and Insurance : Economic Infrastructure Asset");
			items.Add(120205, "120205 - Infrastructure : Banking- Finance- and Insurance : Federal Reserve Bank");
			items.Add(120206, "120206 - Infrastructure : Banking- Finance- and Insurance : Financial Exchange");
			items.Add(120207, "120207 - Infrastructure : Banking- Finance- and Insurance : Financial Services-Other");
			items.Add(120300, "120300 - Infrastructure : Commercial");
			items.Add(120301, "120301 - Infrastructure : Commercial : Chemical Plant");
			items.Add(120302, "120302 - Infrastructure : Commercial : Firearms Manufacturer");
			items.Add(120303, "120303 - Infrastructure : Commercial : Firearms Retailer");
			items.Add(120304, "120304 - Infrastructure : Commercial : Hazardous Material Production");
			items.Add(120305, "120305 - Infrastructure : Commercial : Hazardous Material Storage");
			items.Add(120306, "120306 - Infrastructure : Commercial : Industrial Site");
			items.Add(120307, "120307 - Infrastructure : Commercial : Landfill");
			items.Add(120308, "120308 - Infrastructure : Commercial : Pharmaceutical Manufacturer");
			items.Add(120309, "120309 - Infrastructure : Commercial : Contaminated Hazardous Waste Site");
			items.Add(120310, "120310 - Infrastructure : Commercial : Toxic Release Inventory");
			items.Add(120400, "120400 - Infrastructure : Educational Facilities");
			items.Add(120401, "120401 - Infrastructure : Educational Facilities : College/University");
			items.Add(120402, "120402 - Infrastructure : Educational Facilities : School");
			items.Add(120500, "120500 - Infrastructure : Energy Facility");
			items.Add(120501, "120501 - Infrastructure : Energy Facility : Electric Power");
			items.Add(120502, "120502 - Infrastructure : Energy Facility : Generation Station");
			items.Add(120503, "120503 - Infrastructure : Energy Facility : Natural Gas Facility");
			items.Add(120504, "120504 - Infrastructure : Energy Facility : Petroleum Facility");
			items.Add(120505, "120505 - Infrastructure : Energy Facility : Petroleum/Gas/Oil");
			items.Add(120506, "120506 - Infrastructure : Energy Facility : Propane Facility");
			items.Add(120600, "120600 - Infrastructure : Government Site Infrastructure");
			items.Add(120701, "120701 - Infrastructure : Medical : Medical");
			items.Add(120702, "120702 - Infrastructure : Medical : Medical Treatment Facility (Hospital)");
			items.Add(120800, "120800 - Infrastructure : Military");
			items.Add(120801, "120801 - Infrastructure : Military : Military Armory");
			items.Add(120802, "120802 - Infrastructure : Military : Military Base");
			items.Add(120900, "120900 - Infrastructure : Postal Services");
			items.Add(120901, "120901 - Infrastructure : Postal Services : Postal Distribution Center");
			items.Add(120902, "120902 - Infrastructure : Postal Services : Post Office");
			items.Add(121000, "121000 - Infrastructure : Public Venues");
			items.Add(121001, "121001 - Infrastructure : Public Venues : Enclosed Facility");
			items.Add(121002, "121002 - Infrastructure : Public Venues : Open Facility");
			items.Add(121003, "121003 - Infrastructure : Public Venues : Recreational Area");
			items.Add(121004, "121004 - Infrastructure : Public Venues : Religious Institution");
			items.Add(121100, "121100 - Infrastructure : Special Needs");
			items.Add(121101, "121101 - Infrastructure : Special Needs : Adult Day Care");
			items.Add(121102, "121102 - Infrastructure : Special Needs : Child Day Care");
			items.Add(121103, "121103 - Infrastructure : Special Needs : Elder Care");
			items.Add(121200, "121200 - Infrastructure : Telecommunications");
			items.Add(121201, "121201 - Infrastructure : Telecommunications : Broadcast Transmitter Antennae");
			items.Add(121202, "121202 - Infrastructure : Telecommunications : Telecommunications");
			items.Add(121203, "121203 - Infrastructure : Telecommunications : Telecommunications Tower");
			items.Add(121300, "121300 - Infrastructure : Transportation");
			items.Add(121301, "121301 - Infrastructure : Transportation : Airport/Air Base");
			items.Add(121302, "121302 - Infrastructure : Transportation : Air Traffic Control Facility");
			items.Add(121303, "121303 - Infrastructure : Transportation : Bus Station");
			items.Add(121304, "121304 - Infrastructure : Transportation : Ferry Terminal");
			items.Add(121305, "121305 - Infrastructure : Transportation : Helicopter Landing Site");
			items.Add(121306, "121306 - Infrastructure : Transportation : Maintenance Facility");
			items.Add(121307, "121307 - Infrastructure : Transportation : Railhead/Railroad Station");
			items.Add(121308, "121308 - Infrastructure : Transportation : Rest Stop");
			items.Add(121309, "121309 - Infrastructure : Transportation : Sea Port/Naval Base");
			items.Add(121310, "121310 - Infrastructure : Transportation : Ship Yard");
			items.Add(121311, "121311 - Infrastructure : Transportation : Toll Facility");
			items.Add(121312, "121312 - Infrastructure : Transportation : Traffic Inspection Facility");
			items.Add(121313, "121313 - Infrastructure : Transportation : Tunnel");
			items.Add(121400, "121400 - Infrastructure : Water Supply");
			items.Add(121401, "121401 - Infrastructure : Water Supply : Control Valve");
			items.Add(121402, "121402 - Infrastructure : Water Supply : Dam");
			items.Add(121403, "121403 - Infrastructure : Water Supply : Discharge Outfall");
			items.Add(121404, "121404 - Infrastructure : Water Supply : Ground Water Well");
			items.Add(121405, "121405 - Infrastructure : Water Supply : Pumping Station");
			items.Add(121406, "121406 - Infrastructure : Water Supply : Reservoir");
			items.Add(121407, "121407 - Infrastructure : Water Supply : Storage Tower");
			items.Add(121408, "121408 - Infrastructure : Water Supply : Surface Water Intake");
			items.Add(121409, "121409 - Infrastructure : Water Supply : Wastewater Treatment Facility");
			items.Add(121410, "121410 - Infrastructure : Water Supply : Water");
			items.Add(121411, "121411 - Infrastructure : Water Supply : Water Treatment");
			return items;
		}
	}


	public class Land_Installation_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Installation_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - CBRN Type : Biological");
			items.Add(02, "02 - CBRN Type : Chemical");
			items.Add(03, "03 - CBRN Type : Nuclear");
			items.Add(04, "04 - CBRN Type : Radiological");
			items.Add(05, "05 - CBRN Type : Decontamination");
			items.Add(06, "06 - Electric Power Type : Coal");
			items.Add(07, "07 - Electric Power Type : Geothermal");
			items.Add(08, "08 - Electric Power Type : Hydroelectric");
			items.Add(09, "09 - Electric Power Type : Natural Gas");
			items.Add(10, "10 - Electric Power Type : Petroleum");
			items.Add(11, "11 - Operation : Civilian (Land Installation)");
			items.Add(12, "12 - Civilian Telecommunications Type : Civilian Telephone");
			items.Add(13, "13 - Civilian Telecommunications Type : Civilian Television");
			return items;
		}
	}


	public class Land_Installation_Modifier_TwosItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_Installation_Modifier_TwosItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - No Category Listed : Biological");
			items.Add(02, "02 - No Category Listed : Chemical");
			items.Add(03, "03 - No Category Listed : Nuclear");
			items.Add(04, "04 - No Category Listed : Radiological");
			items.Add(05, "05 - No Category Listed : Atomic Energy Reactor");
			items.Add(06, "06 - No Category Listed : Nuclear Material Production");
			items.Add(07, "07 - No Category Listed : Nuclear Material Storage");
			items.Add(08, "08 - No Category Listed : Weapons Grade");
			return items;
		}
	}


	public class ControlMeasuresPointsItemsSource : IItemsSource {

		public static ItemCollection Items = new ControlMeasuresPointsItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(25, "25 - Control Measure");
			return items;
		}
	}


	public class Control_Measure_Point_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Control_Measure_Point_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(130100, "130100 - Command and Control Points : Action Point (General)");
			items.Add(130200, "130200 - Command and Control Points : Amnesty Point");
			items.Add(130300, "130300 - Command and Control Points : Checkpoint");
			items.Add(130400, "130400 - Command and Control Points : Center of Main Effort");
			items.Add(130500, "130500 - Command and Control Points : Contact Point");
			items.Add(130600, "130600 - Command and Control Points : Coordinating Point");
			items.Add(130700, "130700 - Command and Control Points : Decision Point");
			items.Add(130800, "130800 - Command and Control Points : Distress Call");
			items.Add(130900, "130900 - Command and Control Points : Entry Control Point");
			items.Add(131001, "131001 - Command and Control Points : Fly-To-Point : Fly-To-Point (Sonobuoy)");
			items.Add(131002, "131002 - Command and Control Points : Fly-To-Point : Fly-To-Point (Weapon)");
			items.Add(131003, "131003 - Command and Control Points : Fly-To-Point : Fly-To-Point (Normal)");
			items.Add(131100, "131100 - Command and Control Points : Linkup Point");
			items.Add(131200, "131200 - Command and Control Points : Passage Point");
			items.Add(131300, "131300 - Command and Control Points : Point of Interest");
			items.Add(131301, "131301 - Command and Control Points : Point of Interest : Launch Event (Point of Interest)");
			items.Add(131400, "131400 - Command and Control Points : Rally Point");
			items.Add(131500, "131500 - Command and Control Points : Release Point");
			items.Add(131600, "131600 - Command and Control Points : Start Point");
			items.Add(131700, "131700 - Command and Control Points : Special Point");
			items.Add(131800, "131800 - Command and Control Points : Waypoint");
			items.Add(131900, "131900 - Command and Control Points : Airfield");
			items.Add(160100, "160100 - Maneuver Points : Observation Post/Outpost (Unspecified)");
			items.Add(160200, "160200 - Maneuver Points : Observation Post/Outpost (Specified)");
			items.Add(160201, "160201 - Maneuver Points : Observation Post/Outpost (Specified) : Reconnaissance Outpost");
			items.Add(160202, "160202 - Maneuver Points : Observation Post/Outpost (Specified) : Forward Observer Outpost");
			items.Add(160203, "160203 - Maneuver Points : Observation Post/Outpost (Specified) : CBRN Observation Outpost");
			items.Add(160204, "160204 - Maneuver Points : Observation Post/Outpost (Specified) : Sensor Outpost/Listening Post");
			items.Add(160205, "160205 - Maneuver Points : Observation Post/Outpost (Specified) : Combat Outpost");
			items.Add(160300, "160300 - Maneuver Points : Target Reference Point");
			items.Add(160400, "160400 - Maneuver Points : Point of Departure");
			items.Add(180000, "180000 - Airspace Control Points");
			items.Add(180100, "180100 - Airspace Control Points : Air Control Point");
			items.Add(180200, "180200 - Airspace Control Points : Communications Checkpoint");
			items.Add(180300, "180300 - Airspace Control Points : Downed Aircrew Pick-Up Point");
			items.Add(180400, "180400 - Airspace Control Points : Pop-up Point");
			items.Add(180500, "180500 - Airspace Control Points : Air Control Rendezvous");
			items.Add(180600, "180600 - Airspace Control Points : TACAN");
			items.Add(180700, "180700 - Airspace Control Points : CAP Station");
			items.Add(180800, "180800 - Airspace Control Points : AEW Station");
			items.Add(180900, "180900 - Airspace Control Points : ASW (Helo and F/W) Station");
			items.Add(181000, "181000 - Airspace Control Points : Strike Initial Point");
			items.Add(181100, "181100 - Airspace Control Points : Replemenshment Station");
			items.Add(181200, "181200 - Airspace Control Points : Tanking");
			items.Add(181300, "181300 - Airspace Control Points : Antisubmarine Warfare- Rotary Wing");
			items.Add(181400, "181400 - Airspace Control Points : SUCAP - Fixed Wing");
			items.Add(181500, "181500 - Airspace Control Points : SUCAP - Rotary Wing");
			items.Add(181600, "181600 - Airspace Control Points : MIW - Fixed Wing");
			items.Add(181700, "181700 - Airspace Control Points : MIW - Rotary Wing");
			items.Add(181800, "181800 - Airspace Control Points : Tomcat");
			items.Add(181900, "181900 - Airspace Control Points : Rescue");
			items.Add(182000, "182000 - Airspace Control Points : Unmanned Aerial System (UAS/UA)");
			items.Add(182100, "182100 - Airspace Control Points : VTUA");
			items.Add(182200, "182200 - Airspace Control Points : Orbit");
			items.Add(182300, "182300 - Airspace Control Points : Orbit - Figure Eight");
			items.Add(182400, "182400 - Airspace Control Points : Orbit - Race Track");
			items.Add(182500, "182500 - Airspace Control Points : Orbit - Random Closed");
			items.Add(200400, "200400 - Maritime Areas : Ship Area of Interest");
			items.Add(200500, "200500 - Maritime Areas : Active Maneuver Area");
			items.Add(200600, "200600 - Maritime Areas : Cued Acquisition Doctrine");
			items.Add(200700, "200700 - Maritime Areas : Radar Search Doctrine");
			items.Add(210100, "210100 - Maritime Points : Plan Ship");
			items.Add(210200, "210200 - Maritime Points : Aim Point");
			items.Add(210300, "210300 - Maritime Points : Defended Asset");
			items.Add(210400, "210400 - Maritime Points : Drop Point");
			items.Add(210500, "210500 - Maritime Points : Entry Point");
			items.Add(210600, "210600 - Maritime Points : Air Detonation");
			items.Add(210700, "210700 - Maritime Points : Ground Zero");
			items.Add(210800, "210800 - Maritime Points : Impact Point");
			items.Add(210900, "210900 - Maritime Points : Predicted Impact Point");
			items.Add(211000, "211000 - Maritime Points : Launched Torpedo");
			items.Add(211100, "211100 - Maritime Points : Missile Detection Point");
			items.Add(211200, "211200 - Maritime Points : Acoustic Countermeasure (Decoy)");
			items.Add(211300, "211300 - Maritime Points : Electronic Countermeasures (ECM) Decoy");
			items.Add(211400, "211400 - Maritime Points : Brief Contact");
			items.Add(211500, "211500 - Maritime Points : Datum Lost Contact");
			items.Add(211600, "211600 - Maritime Points : BT Buoy Drop");
			items.Add(211700, "211700 - Maritime Points : Reported Bottom Sub");
			items.Add(211800, "211800 - Maritime Points : Moving Haven");
			items.Add(211900, "211900 - Maritime Points : Screen Center");
			items.Add(212000, "212000 - Maritime Points : Lost Contact");
			items.Add(212100, "212100 - Maritime Points : Sinker");
			items.Add(212200, "212200 - Maritime Points : Trial Track");
			items.Add(212300, "212300 - Maritime Points : Acoustic Fix");
			items.Add(212400, "212400 - Maritime Points : Electromagnetic Fix");
			items.Add(212500, "212500 - Maritime Points : Electromagnetic - Magnetic Anomaly Detection (MAD)");
			items.Add(212600, "212600 - Maritime Points : Optical Fix");
			items.Add(212700, "212700 - Maritime Points : Formation");
			items.Add(212800, "212800 - Maritime Points : Harbor");
			items.Add(212901, "212901 - Maritime Points : Harbor Entrance Point : A");
			items.Add(212902, "212902 - Maritime Points : Harbor Entrance Point : Q");
			items.Add(212903, "212903 - Maritime Points : Harbor Entrance Point : X");
			items.Add(212904, "212904 - Maritime Points : Harbor Entrance Point : Y");
			items.Add(213000, "213000 - Maritime Points : Dip Position");
			items.Add(213100, "213100 - Maritime Points : Search");
			items.Add(213200, "213200 - Maritime Points : Search Area");
			items.Add(213300, "213300 - Maritime Points : Search Center");
			items.Add(213400, "213400 - Maritime Points : Navigational Reference Point (Search)");
			items.Add(213500, "213500 - Maritime Points : Sonobuoy");
			items.Add(213501, "213501 - Maritime Points : Sonobuoy : Ambient Noise");
			items.Add(213502, "213502 - Maritime Points : Sonobuoy : Air Transportable Communication");
			items.Add(213503, "213503 - Maritime Points : Sonobuoy : Barra");
			items.Add(213504, "213504 - Maritime Points : Sonobuoy : Bathythermograph Transmitting");
			items.Add(213505, "213505 - Maritime Points : Sonobuoy : Command Active Multi-Beam (CAMBS)");
			items.Add(213506, "213506 - Maritime Points : Sonobuoy : Command Active Sonobuoy Directional Command Active Sonobuoy System (CASS)");
			items.Add(213507, "213507 - Maritime Points : Sonobuoy : Digital Frequency Analysis and Recording (DIFAR)");
			items.Add(213508, "213508 - Maritime Points : Sonobuoy : Directional Command Active Sonobuoy System (DICASS)");
			items.Add(213509, "213509 - Maritime Points : Sonobuoy : Expendable Reliable Acoustic Path Sonobuoy (ERAPS)");
			items.Add(213510, "213510 - Maritime Points : Sonobuoy : Expired");
			items.Add(213511, "213511 - Maritime Points : Sonobuoy : Kingpin");
			items.Add(213512, "213512 - Maritime Points : Sonobuoy : Low Frequency Analysis and Recording (LOFAR)");
			items.Add(213513, "213513 - Maritime Points : Sonobuoy : Pattern Center");
			items.Add(213514, "213514 - Maritime Points : Sonobuoy : Range Only");
			items.Add(213515, "213515 - Maritime Points : Sonobuoy : Vertical Line Array Directional Frequency Analysis and Recording (DIFAR)");
			items.Add(213600, "213600 - Maritime Points : Reference Point");
			items.Add(213700, "213700 - Maritime Points : Special Point");
			items.Add(213800, "213800 - Maritime Points : Navigational Reference Point");
			items.Add(213900, "213900 - Maritime Points : Data Link Reference Point");
			items.Add(214000, "214000 - Maritime Points : Forward Observer / Spotter Position");
			items.Add(214100, "214100 - Maritime Points : Vital Area Center");
			items.Add(214200, "214200 - Maritime Points : Corridor Tab Point");
			items.Add(214300, "214300 - Maritime Points : Enemy Point");
			items.Add(214400, "214400 - Maritime Points : Marshall Point");
			items.Add(214500, "214500 - Maritime Points : Position and Intended Movement (PIM)");
			items.Add(214600, "214600 - Maritime Points : Pre-Landfall Waypoint");
			items.Add(214700, "214700 - Maritime Points : Estimated Position (EP)");
			items.Add(214800, "214800 - Maritime Points : Waypoint");
			items.Add(214900, "214900 - Maritime Points : General Subsurface Station");
			items.Add(215000, "215000 - Maritime Points : Submarine Subsurface Station");
			items.Add(215100, "215100 - Maritime Points : Submarine Antisubmarine Warfare Subsurface Station");
			items.Add(215200, "215200 - Maritime Points : Unmanned Underwater Vehicle Subsurface Station");
			items.Add(215300, "215300 - Maritime Points : Antisubmarine Warfare (ASW) Unmanned Underwater Vehicle Subsurface Station");
			items.Add(215400, "215400 - Maritime Points : Mine Warfare Unmanned Underwater Vehicle Subsurface Station");
			items.Add(215500, "215500 - Maritime Points : Surface Warfare Unmanned Underwater Vehicle Subsurface Station");
			items.Add(215600, "215600 - Maritime Points : General Surface Station");
			items.Add(215700, "215700 - Maritime Points : Antisubmarine Warfare (ASW) Surface Station");
			items.Add(215800, "215800 - Maritime Points : Mine Warfare Surface Station");
			items.Add(215900, "215900 - Maritime Points : Non-Combatant Surface Station");
			items.Add(216000, "216000 - Maritime Points : Picket Surface Station");
			items.Add(216100, "216100 - Maritime Points : Rendezvous Surface Station");
			items.Add(216200, "216200 - Maritime Points : Replenishment at Sea Surface Station");
			items.Add(216300, "216300 - Maritime Points : Rescue Surface Station");
			items.Add(216400, "216400 - Maritime Points : Surface Warfare Surface Station");
			items.Add(216500, "216500 - Maritime Points : Unmanned Underwater Vehicle Surface Station");
			items.Add(216600, "216600 - Maritime Points : Antisubmarine Warfare (ASW) Unmanned Underwater Vehicle Surface Station");
			items.Add(216700, "216700 - Maritime Points : Mine Warfare Unmanned Underwater Vehicle Surface Station");
			items.Add(216800, "216800 - Maritime Points : Remote Multi-Mission Vehicle Mine Warfare Unmanned Underwater");
			items.Add(216900, "216900 - Maritime Points : Surface Warfare Mine Warfare Unmanned Underwater Vehicle");
			items.Add(217000, "217000 - Maritime Points : Shore Control Station");
			items.Add(217100, "217100 - Maritime Points : General Route");
			items.Add(217200, "217200 - Maritime Points : Diversion Route");
			items.Add(217300, "217300 - Maritime Points : Position and Intended Movement (PIM) Route");
			items.Add(217400, "217400 - Maritime Points : Picket Route");
			items.Add(217500, "217500 - Maritime Points : Point R Route");
			items.Add(217600, "217600 - Maritime Points : Rendezvous Route");
			items.Add(217700, "217700 - Maritime Points : Waypoint Route");
			items.Add(217800, "217800 - Maritime Points : Clutter-Stationary or Cease Reporting");
			items.Add(217900, "217900 - Maritime Points : Tentative or Provisional Track");
			items.Add(218000, "218000 - Maritime Points : Distressed Vessel");
			items.Add(218100, "218100 - Maritime Points : Ditched Aircraft/Downed Aircraft");
			items.Add(218200, "218200 - Maritime Points : Person in Water/Bailout");
			items.Add(218300, "218300 - Maritime Points : Iceberg");
			items.Add(218500, "218500 - Maritime Points : Oil Rig");
			items.Add(218600, "218600 - Maritime Points : Sea Mine-Like");
			items.Add(218700, "218700 - Maritime Points : Bottom Return/Non-Mine Like Bottom Object (NOMBO)");
			items.Add(218800, "218800 - Maritime Points : Bottom Return/Non-Mine Like Bottom Object (NOMBO)/Installation Manmade");
			items.Add(218900, "218900 - Maritime Points : Marine Life");
			items.Add(219000, "219000 - Maritime Points : Sea Anomaly (Wake-Current-Knuckle)");
			items.Add(219100, "219100 - Maritime Points : Bottom Return/Non-MILCO-Wreck-Dangerous");
			items.Add(219200, "219200 - Maritime Points : Bottom Return/Non-MILCO-Wreck-Non Dangerous");
			items.Add(240601, "240601 - Fires Areas : Point Targets : Point or Single Target");
			items.Add(240602, "240602 - Fires Areas : Point Targets : Nuclear Target");
			items.Add(240603, "240603 - Fires Areas : Point Targets : Target-Recorded");
			items.Add(240900, "240900 - Fires Areas : Fire Support Station");
			items.Add(250100, "250100 - Fires Points : Firing Point");
			items.Add(250200, "250200 - Fires Points : Hide Point");
			items.Add(250300, "250300 - Fires Points : Launch Point");
			items.Add(250400, "250400 - Fires Points : Reload Point");
			items.Add(250500, "250500 - Fires Points : Survey Control Point");
			items.Add(270705, "270705 - Protection Areas : Minefield : Dummy");
			items.Add(280200, "280200 - Protection Points : Antipersonnel Mine");
			items.Add(280201, "280201 - Protection Points : Antipersonnel Mine : With Directional Effects");
			items.Add(280300, "280300 - Protection Points : Antitank Mine");
			items.Add(280400, "280400 - Protection Points : Antitank Mine with Anti-handling Device");
			items.Add(280500, "280500 - Protection Points : Wide Area Antitank Mine");
			items.Add(280600, "280600 - Protection Points : Unspecified Mine");
			items.Add(280700, "280700 - Protection Points : Booby Trap");
			items.Add(280800, "280800 - Protection Points : Engineer Regulating Point");
			items.Add(280900, "280900 - Protection Points : Shelter");
			items.Add(281000, "281000 - Protection Points : Shelter Above Ground");
			items.Add(281100, "281100 - Protection Points : Below Ground Shelter");
			items.Add(281200, "281200 - Protection Points : Fort");
			items.Add(281300, "281300 - Protection Points : Chemical Event");
			items.Add(281301, "281301 - Protection Points : Chemical Event : Toxic Industrial Material");
			items.Add(281400, "281400 - Protection Points : Biological Event");
			items.Add(281401, "281401 - Protection Points : Biological Event : Toxic Industrial Material");
			items.Add(281500, "281500 - Protection Points : Nuclear Event");
			items.Add(281600, "281600 - Protection Points : Nuclear Fallout Producing Event");
			items.Add(281700, "281700 - Protection Points : Radiological");
			items.Add(281701, "281701 - Protection Points : Radiological : Toxic Industrial Material");
			items.Add(281800, "281800 - Protection Points : Decontamination/Site");
			items.Add(281801, "281801 - Protection Points : Decontamination/Site : Alternate");
			items.Add(281802, "281802 - Protection Points : Decontamination/Site : Equipment");
			items.Add(281803, "281803 - Protection Points : Decontamination/Site : Troop");
			items.Add(281804, "281804 - Protection Points : Decontamination/Site : Equipment/Troop");
			items.Add(281805, "281805 - Protection Points : Decontamination/Site : Operational");
			items.Add(281806, "281806 - Protection Points : Decontamination/Site : Thorough");
			items.Add(281807, "281807 - Protection Points : Decontamination/Site : Main Equipment");
			items.Add(281808, "281808 - Protection Points : Decontamination/Site : Forward Troop");
			items.Add(281809, "281809 - Protection Points : Decontamination/Site : Wounded Personnel");
			items.Add(281901, "281901 - Protection Points : Tetrahedrons- Dragons Teeth- and Other Similar Obstacles : Fixed and Prefabricated");
			items.Add(281902, "281902 - Protection Points : Tetrahedrons- Dragons Teeth- and Other Similar Obstacles : Movable");
			items.Add(281903, "281903 - Protection Points : Tetrahedrons- Dragons Teeth- and Other Similar Obstacles : Movable and Prefabricated");
			items.Add(282001, "282001 - Protection Points : Vertical Obstructions : Tower-Low");
			items.Add(282002, "282002 - Protection Points : Vertical Obstructions : Tower-High");
			items.Add(320100, "320100 - Sustainment Points : Ambulance Exchange Point");
			items.Add(320200, "320200 - Sustainment Points : Ammunition Supply Point");
			items.Add(320300, "320300 - Sustainment Points : Ammunition Transfer Point");
			items.Add(320400, "320400 - Sustainment Points : Cannibalization Point");
			items.Add(320500, "320500 - Sustainment Points : Casualty Collection Point");
			items.Add(320600, "320600 - Sustainment Points : Civilian Collection Point");
			items.Add(320700, "320700 - Sustainment Points : Detainee Collection Point");
			items.Add(320800, "320800 - Sustainment Points : Enemy Prisoner of War Collection Point");
			items.Add(320900, "320900 - Sustainment Points : Logistics Release Point");
			items.Add(321000, "321000 - Sustainment Points : Maintenance Collection Point (MCP)");
			items.Add(321100, "321100 - Sustainment Points : Medical Evacuation (MEDEVAC) Pick-up Point");
			items.Add(321200, "321200 - Sustainment Points : Rearm-Refuel and Resupply Point (R3P)");
			items.Add(321300, "321300 - Sustainment Points : Refuel on the Move (ROM) Point");
			items.Add(321400, "321400 - Sustainment Points : Traffic Control Post (TCP)");
			items.Add(321500, "321500 - Sustainment Points : Trailer Transfer Point (TTP)");
			items.Add(321600, "321600 - Sustainment Points : Unit Maintenance Collection Point (UMCP)");
			items.Add(321700, "321700 - Sustainment Points : General Supply");
			items.Add(321701, "321701 - Sustainment Points : General Supply : NATO Class I Supply Point");
			items.Add(321702, "321702 - Sustainment Points : General Supply : NATO Class II Supply Point");
			items.Add(321703, "321703 - Sustainment Points : General Supply : NATO Class III Supply Point");
			items.Add(321704, "321704 - Sustainment Points : General Supply : NATO Class IV Supply Point");
			items.Add(321705, "321705 - Sustainment Points : General Supply : NATO Class V Supply Point");
			items.Add(321706, "321706 - Sustainment Points : General Supply : NATO Multiple Class Supply Point");
			items.Add(321707, "321707 - Sustainment Points : General Supply : US Class I Supply Point");
			items.Add(321708, "321708 - Sustainment Points : General Supply : US Class II Supply Point");
			items.Add(321709, "321709 - Sustainment Points : General Supply : US Class III Supply Point");
			items.Add(321710, "321710 - Sustainment Points : General Supply : US Class IV Supply Point");
			items.Add(321711, "321711 - Sustainment Points : General Supply : US Class V Supply Point");
			items.Add(321712, "321712 - Sustainment Points : General Supply : US Class VI Supply Point");
			items.Add(321713, "321713 - Sustainment Points : General Supply : US Class VII Supply Point");
			items.Add(321714, "321714 - Sustainment Points : General Supply : US Class VIII Supply Point");
			items.Add(321715, "321715 - Sustainment Points : General Supply : US Class IX Supply Point");
			items.Add(321716, "321716 - Sustainment Points : General Supply : US Class X Supply Point");
			items.Add(321800, "321800 - Sustainment Points : Medical Supply Point");
			items.Add(340900, "340900 - Mission Tasks : Destroy");
			items.Add(341400, "341400 - Mission Tasks : Interdict");
			items.Add(341600, "341600 - Mission Tasks : Neutralize");
			return items;
		}
	}


	public class ControlMeasuresLinesItemsSource : IItemsSource {

		public static ItemCollection Items = new ControlMeasuresLinesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(25, "25 - Control Measure");
			return items;
		}
	}


	public class Control_Measure_Line_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Control_Measure_Line_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110100, "110100 - Command and Control Lines : Boundary");
			items.Add(110200, "110200 - Command and Control Lines : Light Line");
			items.Add(140101, "140101 - Maneuver Lines : Forward Line of Troops : Friendly Present");
			items.Add(140102, "140102 - Maneuver Lines : Forward Line of Troops : Friendly Planned or on Order");
			items.Add(140103, "140103 - Maneuver Lines : Forward Line of Troops : Enemy Known");
			items.Add(140104, "140104 - Maneuver Lines : Forward Line of Troops : Enemy Suspected or Templated");
			items.Add(140300, "140300 - Maneuver Lines : Phase Line");
			items.Add(140400, "140400 - Maneuver Lines : Forward Edge of the Battle Area");
			items.Add(140401, "140401 - Maneuver Lines : Forward Edge of the Battle Area : Proposed or On Order");
			items.Add(140500, "140500 - Maneuver Lines : Principal Direction of Fire");
			items.Add(140601, "140601 - Maneuver Lines : Direction of Attack : Friendly Aviation");
			items.Add(140602, "140602 - Maneuver Lines : Direction of Attack : Friendly Direction of Main Attack");
			items.Add(140603, "140603 - Maneuver Lines : Direction of Attack : Friendly Direction of Supporting Attack");
			items.Add(140604, "140604 - Maneuver Lines : Direction of Attack : Friendly Planned or On Order");
			items.Add(140605, "140605 - Maneuver Lines : Direction of Attack : Feint");
			items.Add(140606, "140606 - Maneuver Lines : Direction of Attack : Enemy Confirmed");
			items.Add(140607, "140607 - Maneuver Lines : Direction of Attack : Enemy Templated or Suspected");
			items.Add(140700, "140700 - Maneuver Lines : Final Coordination Line");
			items.Add(140800, "140800 - Maneuver Lines : Infiltration Lane");
			items.Add(140900, "140900 - Maneuver Lines : Limit of Advance");
			items.Add(141000, "141000 - Maneuver Lines : Line of Departure");
			items.Add(141100, "141100 - Maneuver Lines : Line of Departure/Line of Contact");
			items.Add(141200, "141200 - Maneuver Lines : Probable Line of Deployment");
			items.Add(141400, "141400 - Maneuver Lines : Bridgehead Line");
			items.Add(141500, "141500 - Maneuver Lines : Holding Line");
			items.Add(141600, "141600 - Maneuver Lines : Release Line");
			items.Add(141700, "141700 - Maneuver Lines : Ambush");
			items.Add(151204, "151204 - Maneuver Areas : Battle Position : Contain");
			items.Add(151205, "151205 - Maneuver Areas : Battle Position : Retain");
			items.Add(151401, "151401 - Maneuver Areas : Axis of Advance : Friendly Airborne/Aviation");
			items.Add(151402, "151402 - Maneuver Areas : Axis of Advance : Attack Helicopter");
			items.Add(151403, "151403 - Maneuver Areas : Axis of Advance : Main Attack");
			items.Add(151404, "151404 - Maneuver Areas : Axis of Advance : Supporting Attack");
			items.Add(151405, "151405 - Maneuver Areas : Axis of Advance : Supporting Attack Planned or On Order");
			items.Add(151406, "151406 - Maneuver Areas : Axis of Advance : Feint");
			items.Add(151407, "151407 - Maneuver Areas : Axis of Advance : Enemy Confirmed");
			items.Add(151408, "151408 - Maneuver Areas : Axis of Advance : Enemy Templated or Suspected");
			items.Add(152000, "152000 - Maneuver Areas : Attack by Fire Position");
			items.Add(152100, "152100 - Maneuver Areas : Support by Fire");
			items.Add(152200, "152200 - Maneuver Areas : Search Area/Reconnaissance Area");
			items.Add(170100, "170100 - Air Corridors : Air Corridor");
			items.Add(170200, "170200 - Air Corridors : Low Level Transit Route");
			items.Add(170300, "170300 - Air Corridors : Minimum-Risk Route");
			items.Add(170400, "170400 - Air Corridors : Safe Lane");
			items.Add(170500, "170500 - Air Corridors : Standard Use Army Aircraft Flight Route");
			items.Add(170600, "170600 - Air Corridors : Transit Corridor");
			items.Add(170700, "170700 - Air Corridors : Unmanned Aircraft (UA) Route");
			items.Add(190100, "190100 - Airspace Control Lines : Identification Friend or Foe Off Line");
			items.Add(190200, "190200 - Airspace Control Lines : Identification Friend or Foe On Line");
			items.Add(218400, "218400 - Maritime Points : Navigational");
			items.Add(220100, "220100 - Maritime Lines : Bearing Line");
			items.Add(220101, "220101 - Maritime Lines : Bearing Line : Electronic");
			items.Add(220102, "220102 - Maritime Lines : Bearing Line : Electronic Warfare (EW)");
			items.Add(220103, "220103 - Maritime Lines : Bearing Line : Acoustic");
			items.Add(220104, "220104 - Maritime Lines : Bearing Line : Acoustic (Ambiguous)");
			items.Add(220105, "220105 - Maritime Lines : Bearing Line : Torpedo");
			items.Add(220106, "220106 - Maritime Lines : Bearing Line : Electro-Optical Intercept");
			items.Add(220107, "220107 - Maritime Lines : Bearing Line : Jammer");
			items.Add(220108, "220108 - Maritime Lines : Bearing Line : Radio Direction Finder (RDF)");
			items.Add(230100, "230100 - Deception : Decoy/Dummy");
			items.Add(230200, "230200 - Deception : Decoy/Dummy/Feint");
			items.Add(240701, "240701 - Fires Areas : Linear Targets : Linear Target");
			items.Add(240702, "240702 - Fires Areas : Linear Targets : Linear Smoke Target");
			items.Add(240703, "240703 - Fires Areas : Linear Targets : Final Protective Fire (FPF)");
			items.Add(260100, "260100 - Fire Lines : Fire Support Coordination Line (FSCL)");
			items.Add(260200, "260200 - Fire Lines : Coordinated Fire Line (CFL)");
			items.Add(260300, "260300 - Fire Lines : No Fire Line");
			items.Add(260400, "260400 - Fire Lines : Battlefield Coordination Line");
			items.Add(260500, "260500 - Fire Lines : Restrictive Fire Line");
			items.Add(260600, "260600 - Fire Lines : Munition Flight Path");
			items.Add(270501, "270501 - Protection Areas : Obstacle Effects : Block");
			items.Add(270502, "270502 - Protection Areas : Obstacle Effects : Disrupt");
			items.Add(270503, "270503 - Protection Areas : Obstacle Effects : Fix");
			items.Add(270504, "270504 - Protection Areas : Obstacle Effects : Turn");
			items.Add(270601, "270601 - Protection Areas : Obstacle Bypass : Easy");
			items.Add(270602, "270602 - Protection Areas : Obstacle Bypass : Difficult");
			items.Add(270603, "270603 - Protection Areas : Obstacle Bypass : Impossible");
			items.Add(271100, "271100 - Protection Areas : Bridge or Gap");
			items.Add(271201, "271201 - Protection Areas : Roadblocks- Craters and Blown Bridges : Planned");
			items.Add(271202, "271202 - Protection Areas : Roadblocks- Craters and Blown Bridges : Explosives-State of Readiness 1 (Safe)");
			items.Add(271203, "271203 - Protection Areas : Roadblocks- Craters and Blown Bridges : Explosives-State of Readiness 2 (armed but passable)");
			items.Add(271204, "271204 - Protection Areas : Roadblocks- Craters and Blown Bridges : Roadblock Complete (Executed)");
			items.Add(271400, "271400 - Protection Areas : Bridge");
			items.Add(271500, "271500 - Protection Areas : Ford Easy");
			items.Add(271600, "271600 - Protection Areas : Ford Difficult");
			items.Add(280100, "280100 - Protection Points : Abatis");
			items.Add(282003, "282003 - Protection Points : Vertical Obstructions : Overhead Wire");
			items.Add(290100, "290100 - Protection Lines : Obstacle Line");
			items.Add(290201, "290201 - Protection Lines : Antitank Obstacles : Under Construction");
			items.Add(290202, "290202 - Protection Lines : Antitank Obstacles : Completed");
			items.Add(290203, "290203 - Protection Lines : Antitank Obstacles : Reinforced-with Antitank Mines");
			items.Add(290204, "290204 - Protection Lines : Antitank Obstacles : Antitank Wall");
			items.Add(290301, "290301 - Protection Lines : Wire Obstacles : Unspecified Wire");
			items.Add(290302, "290302 - Protection Lines : Wire Obstacles : Single Fence Wire");
			items.Add(290303, "290303 - Protection Lines : Wire Obstacles : Double Fence Wire");
			items.Add(290304, "290304 - Protection Lines : Wire Obstacles : Double Apron Fence");
			items.Add(290305, "290305 - Protection Lines : Wire Obstacles : Low Wire Fence");
			items.Add(290306, "290306 - Protection Lines : Wire Obstacles : High Wire Fence");
			items.Add(290307, "290307 - Protection Lines : Wire Obstacles : Single Concertina");
			items.Add(290308, "290308 - Protection Lines : Wire Obstacles : Double Strand Concertina");
			items.Add(290309, "290309 - Protection Lines : Wire Obstacles : Triple Strand Concertina");
			items.Add(290400, "290400 - Protection Lines : Mine Cluster");
			items.Add(290500, "290500 - Protection Lines : Trip Wire");
			items.Add(290600, "290600 - Protection Lines : Lane");
			items.Add(290700, "290700 - Protection Lines : Ferry");
			items.Add(290800, "290800 - Protection Lines : Raft Site");
			items.Add(290900, "290900 - Protection Lines : Fortified Line");
			items.Add(291000, "291000 - Protection Lines : Fortified Position");
			items.Add(300100, "300100 - Intelligence Lines : Intelligence Coordination Line");
			items.Add(330100, "330100 - Sustainment Lines : Moving Convoy");
			items.Add(330200, "330200 - Sustainment Lines : Halted Convoy");
			items.Add(330300, "330300 - Sustainment Lines : Main Supply Route");
			items.Add(330301, "330301 - Sustainment Lines : Main Supply Route : One Way Traffic");
			items.Add(330302, "330302 - Sustainment Lines : Main Supply Route : Two Way Traffic");
			items.Add(330303, "330303 - Sustainment Lines : Main Supply Route : Alternating Traffic");
			items.Add(330400, "330400 - Sustainment Lines : Alternate Supply Route");
			items.Add(330401, "330401 - Sustainment Lines : Alternate Supply Route : One Way Traffic");
			items.Add(330402, "330402 - Sustainment Lines : Alternate Supply Route : Two Way Traffic");
			items.Add(330403, "330403 - Sustainment Lines : Alternate Supply Route : Alternating Traffic");
			items.Add(340100, "340100 - Mission Tasks : Block");
			items.Add(340200, "340200 - Mission Tasks : Breach");
			items.Add(340300, "340300 - Mission Tasks : Bypass");
			items.Add(340400, "340400 - Mission Tasks : Canalize");
			items.Add(340500, "340500 - Mission Tasks : Clear");
			items.Add(340600, "340600 - Mission Tasks : Counterattack");
			items.Add(340700, "340700 - Mission Tasks : Counterattack by Fire");
			items.Add(340800, "340800 - Mission Tasks : Delay");
			items.Add(341000, "341000 - Mission Tasks : Disrupt");
			items.Add(341100, "341100 - Mission Tasks : Fix");
			items.Add(341200, "341200 - Mission Tasks : Follow and Assume");
			items.Add(341300, "341300 - Mission Tasks : Follow and Support");
			items.Add(341500, "341500 - Mission Tasks : Isolate");
			items.Add(341700, "341700 - Mission Tasks : Occupy");
			items.Add(341800, "341800 - Mission Tasks : Penetrate");
			items.Add(341900, "341900 - Mission Tasks : Relief in Place (RIP)");
			items.Add(342000, "342000 - Mission Tasks : Retire/Retirement");
			items.Add(342100, "342100 - Mission Tasks : Secure");
			items.Add(342201, "342201 - Mission Tasks : Security : Cover");
			items.Add(342202, "342202 - Mission Tasks : Security : Guard");
			items.Add(342203, "342203 - Mission Tasks : Security : Screen");
			items.Add(342300, "342300 - Mission Tasks : Seize");
			items.Add(342400, "342400 - Mission Tasks : Withdraw");
			items.Add(342500, "342500 - Mission Tasks : Withdraw Under Pressure");
			return items;
		}
	}


	public class ControlMeasuresAreasItemsSource : IItemsSource {

		public static ItemCollection Items = new ControlMeasuresAreasItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(25, "25 - Control Measure");
			return items;
		}
	}


	public class Control_Measure_Area_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Control_Measure_Area_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(120100, "120100 - Command and Control Areas : Area of Operations");
			items.Add(120200, "120200 - Command and Control Areas : Named Area of Interest");
			items.Add(120300, "120300 - Command and Control Areas : Targeted Area of Interest");
			items.Add(120400, "120400 - Command and Control Areas : Airfield Zone");
			items.Add(141300, "141300 - Maneuver Lines : Airhead Line");
			items.Add(150101, "150101 - Maneuver Areas : Area : Friendly");
			items.Add(150102, "150102 - Maneuver Areas : Area : Friendly Planned or On Order");
			items.Add(150103, "150103 - Maneuver Areas : Area : Enemy Known or Confirmed");
			items.Add(150104, "150104 - Maneuver Areas : Area : Enemy Suspected");
			items.Add(150200, "150200 - Maneuver Areas : Assembly Area");
			items.Add(150300, "150300 - Maneuver Areas : Occupied Assembly Area");
			items.Add(150400, "150400 - Maneuver Areas : Proposed or On Order Assembly Area");
			items.Add(150501, "150501 - Maneuver Areas : Action Area : Joint Tactical Action Area (JTAA)");
			items.Add(150502, "150502 - Maneuver Areas : Action Area : Submarine Action Area (SAA)");
			items.Add(150503, "150503 - Maneuver Areas : Action Area : Submarine-Generated Action Area (SGAA)");
			items.Add(150600, "150600 - Maneuver Areas : Drop Zone");
			items.Add(150700, "150700 - Maneuver Areas : Extraction Zone");
			items.Add(150800, "150800 - Maneuver Areas : Landing Zone");
			items.Add(150900, "150900 - Maneuver Areas : Pick-Up Zone");
			items.Add(151000, "151000 - Maneuver Areas : Fortified Area");
			items.Add(151100, "151100 - Maneuver Areas : Limited Access Area");
			items.Add(151200, "151200 - Maneuver Areas : Battle Position");
			items.Add(151201, "151201 - Maneuver Areas : Battle Position : Battle Position - Planned");
			items.Add(151202, "151202 - Maneuver Areas : Battle Position : Battle Position - Prepared (P) but not Occupied");
			items.Add(151203, "151203 - Maneuver Areas : Battle Position : Strong Point");
			items.Add(151300, "151300 - Maneuver Areas : Engagement Area (EA)");
			items.Add(151500, "151500 - Maneuver Areas : Assault Position");
			items.Add(151600, "151600 - Maneuver Areas : Attack Position");
			items.Add(151700, "151700 - Maneuver Areas : Objective");
			items.Add(151801, "151801 - Maneuver Areas : Encirclement : Friendly");
			items.Add(151802, "151802 - Maneuver Areas : Encirclement : Enemy");
			items.Add(151900, "151900 - Maneuver Areas : Penetration Box");
			items.Add(170800, "170800 - Air Corridors : Base Defense Zone");
			items.Add(170900, "170900 - Air Corridors : High-Density Airspace Control Zone");
			items.Add(171000, "171000 - Air Corridors : Restricted Operations Zone");
			items.Add(171100, "171100 - Air Corridors : Air-to-Air Restricted Operating Zone");
			items.Add(171200, "171200 - Air Corridors : Unmanned Aircraft Restricted Operating Zone");
			items.Add(171300, "171300 - Air Corridors : Weapon Engagement Zone");
			items.Add(171400, "171400 - Air Corridors : Fighter Engagement Zone");
			items.Add(171500, "171500 - Air Corridors : Joint Engagement Zone");
			items.Add(171600, "171600 - Air Corridors : Missile Engagement Zone");
			items.Add(171700, "171700 - Air Corridors : Low Altitude Missile Engagement Zone");
			items.Add(171800, "171800 - Air Corridors : High Altitude Missile Engagement Zone");
			items.Add(171900, "171900 - Air Corridors : Short Range Air Defense Engagement Zone");
			items.Add(172000, "172000 - Air Corridors : Weapons Free Zone");
			items.Add(200101, "200101 - Maritime Areas : Launch Area : Ellipse/Circle");
			items.Add(200201, "200201 - Maritime Areas : Defended Area : Ellipse/Circle");
			items.Add(200202, "200202 - Maritime Areas : Defended Area : Rectangle");
			items.Add(200300, "200300 - Maritime Areas : No Attack (NOTACK) Zone");
			items.Add(200401, "200401 - Maritime Areas : Ship Area of Interest : Ellipse/Circle");
			items.Add(200402, "200402 - Maritime Areas : Ship Area of Interest : Rectangle");
			items.Add(240101, "240101 - Fires Areas : Airspace Coordination Area : Irregular");
			items.Add(240102, "240102 - Fires Areas : Airspace Coordination Area : Rectangular");
			items.Add(240103, "240103 - Fires Areas : Airspace Coordination Area : Circular");
			items.Add(240201, "240201 - Fires Areas : Free Fire Area : Irregular");
			items.Add(240202, "240202 - Fires Areas : Free Fire Area : Rectangular");
			items.Add(240203, "240203 - Fires Areas : Free Fire Area : Circular");
			items.Add(240301, "240301 - Fires Areas : No Fire Area : Irregular");
			items.Add(240302, "240302 - Fires Areas : No Fire Area : Rectangular");
			items.Add(240303, "240303 - Fires Areas : No Fire Area : Circular");
			items.Add(240401, "240401 - Fires Areas : Restricted Fire Area : Irregular");
			items.Add(240402, "240402 - Fires Areas : Restricted Fire Area : Rectangular");
			items.Add(240403, "240403 - Fires Areas : Restricted Fire Area : Circular");
			items.Add(240501, "240501 - Fires Areas : Position Area For Artillery (PAA) : Rectangular");
			items.Add(240502, "240502 - Fires Areas : Position Area For Artillery (PAA) : Circular");
			items.Add(240801, "240801 - Fires Areas : Area Targets : Area Target");
			items.Add(240802, "240802 - Fires Areas : Area Targets : Rectangular Target");
			items.Add(240803, "240803 - Fires Areas : Area Targets : Circular Target");
			items.Add(240804, "240804 - Fires Areas : Area Targets : Rectangular Target - Single Target");
			items.Add(240805, "240805 - Fires Areas : Area Targets : Series of Targets");
			items.Add(240806, "240806 - Fires Areas : Area Targets : Smoke Target");
			items.Add(240807, "240807 - Fires Areas : Area Targets : Smoke Planned or On Order");
			items.Add(240808, "240808 - Fires Areas : Area Targets : Bomb Area");
			items.Add(241001, "241001 - Fires Areas : Fire Support Area : Irregular");
			items.Add(241002, "241002 - Fires Areas : Fire Support Area : Rectangular");
			items.Add(241003, "241003 - Fires Areas : Fire Support Area : Circular");
			items.Add(241101, "241101 - Fires Areas : Artillery Target Intelligence Zone : Irregular");
			items.Add(241102, "241102 - Fires Areas : Artillery Target Intelligence Zone : Rectangular");
			items.Add(241103, "241103 - Fires Areas : Artillery Target Intelligence Zone : Circular");
			items.Add(241201, "241201 - Fires Areas : Call for Fire Zone (CFFZ) : Irregular");
			items.Add(241202, "241202 - Fires Areas : Call for Fire Zone (CFFZ) : Rectangular");
			items.Add(241203, "241203 - Fires Areas : Call for Fire Zone (CFFZ) : Circular");
			items.Add(241301, "241301 - Fires Areas : Censor Zone : Irregular");
			items.Add(241302, "241302 - Fires Areas : Censor Zone : Rectangular");
			items.Add(241303, "241303 - Fires Areas : Censor Zone : Circular");
			items.Add(241401, "241401 - Fires Areas : Critical Friendly Zone : Irregular");
			items.Add(241402, "241402 - Fires Areas : Critical Friendly Zone : Rectangular");
			items.Add(241403, "241403 - Fires Areas : Critical Friendly Zone : Circular");
			items.Add(241501, "241501 - Fires Areas : Dead Space Area : Irregular");
			items.Add(241502, "241502 - Fires Areas : Dead Space Area : Rectangular");
			items.Add(241503, "241503 - Fires Areas : Dead Space Area : Circular");
			items.Add(241601, "241601 - Fires Areas : Sensor Zone : Irregular");
			items.Add(241602, "241602 - Fires Areas : Sensor Zone : Rectangular");
			items.Add(241603, "241603 - Fires Areas : Sensor Zone : Circular");
			items.Add(241701, "241701 - Fires Areas : Target Build-up Area : Irregular");
			items.Add(241702, "241702 - Fires Areas : Target Build-up Area : Rectangular");
			items.Add(241703, "241703 - Fires Areas : Target Build-up Area : Circular");
			items.Add(241801, "241801 - Fires Areas : Target Value Area : Irregular");
			items.Add(241802, "241802 - Fires Areas : Target Value Area : Rectangular");
			items.Add(241803, "241803 - Fires Areas : Target Value Area : Circular");
			items.Add(241901, "241901 - Fires Areas : Zone of Responsibility : Irregular");
			items.Add(241902, "241902 - Fires Areas : Zone of Responsibility : Rectangular");
			items.Add(241903, "241903 - Fires Areas : Zone of Responsibility : Circular");
			items.Add(242000, "242000 - Fires Areas : Terminally Guided Munition Footprint (TGMF)");
			items.Add(242100, "242100 - Fires Areas : Weapon/Sensor Range fan-Circular");
			items.Add(242200, "242200 - Fires Areas : Weapon/Sensor Range fan-Sector");
			items.Add(242301, "242301 - Fires Areas : Kill Box : Irregular-Blue");
			items.Add(242302, "242302 - Fires Areas : Kill Box : Rectangular-Blue");
			items.Add(242303, "242303 - Fires Areas : Kill Box : Circular-Blue");
			items.Add(242304, "242304 - Fires Areas : Kill Box : Irregular-Purple");
			items.Add(242305, "242305 - Fires Areas : Kill Box : Rectangular-Purple");
			items.Add(242306, "242306 - Fires Areas : Kill Box : Circular-Purple");
			items.Add(270100, "270100 - Protection Areas : Obstacle Belt");
			items.Add(270200, "270200 - Protection Areas : Obstacle Zone");
			items.Add(270300, "270300 - Protection Areas : Obstacle Free Zone");
			items.Add(270400, "270400 - Protection Areas : Obstacle Restricted Zone");
			items.Add(270701, "270701 - Protection Areas : Minefield : Completed");
			items.Add(270702, "270702 - Protection Areas : Minefield : Planned");
			items.Add(270703, "270703 - Protection Areas : Minefield : Known Enemy");
			items.Add(270704, "270704 - Protection Areas : Minefield : Suspected or Templated Enemy");
			items.Add(270706, "270706 - Protection Areas : Minefield : Dummy Minefield- Dymanic");
			items.Add(270707, "270707 - Protection Areas : Minefield : Dynamic Depiction");
			items.Add(270800, "270800 - Protection Areas : Mined Area");
			items.Add(270900, "270900 - Protection Areas : Decoy Mined Area");
			items.Add(270901, "270901 - Protection Areas : Decoy Mined Area : Fenced");
			items.Add(271000, "271000 - Protection Areas : Unexploded Explosive Ordnance (UXO) Area");
			items.Add(271300, "271300 - Protection Areas : Assault Crossing");
			items.Add(271700, "271700 - Protection Areas : Biological Contaminated Area");
			items.Add(271701, "271701 - Protection Areas : Biological Contaminated Area : Toxic Industrial Material");
			items.Add(271800, "271800 - Protection Areas : Chemical Contaminated Area");
			items.Add(271801, "271801 - Protection Areas : Chemical Contaminated Area : Toxic Industrial Material");
			items.Add(271900, "271900 - Protection Areas : Nuclear Contaminated Area");
			items.Add(272000, "272000 - Protection Areas : Radiological Contaminated Area");
			items.Add(272001, "272001 - Protection Areas : Radiological Contaminated Area : Toxic Industrial Material");
			items.Add(272100, "272100 - Protection Areas : Minimum Safe Distance Zone");
			items.Add(272200, "272200 - Protection Areas : Radiation Dose Rate Contour Lines");
			items.Add(310100, "310100 - Sustainment Areas : Detainee Holding Area");
			items.Add(310200, "310200 - Sustainment Areas : Enemy Prisoner of War Holding Area");
			items.Add(310300, "310300 - Sustainment Areas : Forward Arming and Refueling Point");
			items.Add(310400, "310400 - Sustainment Areas : Refugee Holding Area");
			items.Add(310500, "310500 - Sustainment Areas : Regimental Support Area");
			items.Add(310600, "310600 - Sustainment Areas : Brigade Support Area");
			items.Add(310700, "310700 - Sustainment Areas : Division Support Area");
			return items;
		}
	}


	public class SeaSurfaceItemsSource : IItemsSource {

		public static ItemCollection Items = new SeaSurfaceItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(30, "30 - Sea Surface");
			return items;
		}
	}


	public class Sea_Surface_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Sea_Surface_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Military (Sea Surface)");
			items.Add(120000, "120000 - Military Combatant");
			items.Add(120100, "120100 - Military Combatant : Carrier");
			items.Add(120200, "120200 - Military Combatant : Surface Combatant- Line");
			items.Add(120201, "120201 - Military Combatant : Surface Combatant- Line : Battleship");
			items.Add(120202, "120202 - Military Combatant : Surface Combatant- Line : Cruiser");
			items.Add(120203, "120203 - Military Combatant : Surface Combatant- Line : Destroyer");
			items.Add(120204, "120204 - Military Combatant : Surface Combatant- Line : Frigate");
			items.Add(120205, "120205 - Military Combatant : Surface Combatant- Line : Corvette");
			items.Add(120206, "120206 - Military Combatant : Surface Combatant- Line : Littoral Combatant Ship");
			items.Add(120300, "120300 - Military Combatant : Amphibious Warfare Ship");
			items.Add(120301, "120301 - Military Combatant : Amphibious Warfare Ship : Command Ship");
			items.Add(120302, "120302 - Military Combatant : Amphibious Warfare Ship : Assault- Non-specified");
			items.Add(120303, "120303 - Military Combatant : Amphibious Warfare Ship : Assault Ship- General");
			items.Add(120304, "120304 - Military Combatant : Amphibious Warfare Ship : Assault Ship- Multipurpose");
			items.Add(120305, "120305 - Military Combatant : Amphibious Warfare Ship : Assault Ship- Helicopter");
			items.Add(120306, "120306 - Military Combatant : Amphibious Warfare Ship : Transport Dock");
			items.Add(120307, "120307 - Military Combatant : Amphibious Warfare Ship : Landing Ship");
			items.Add(120308, "120308 - Military Combatant : Amphibious Warfare Ship : Landing Craft");
			items.Add(120400, "120400 - Military Combatant : Mine Warfare Ship");
			items.Add(120401, "120401 - Military Combatant : Mine Warfare Ship : Mine Layer");
			items.Add(120402, "120402 - Military Combatant : Mine Warfare Ship : Mine Sweeper");
			items.Add(120403, "120403 - Military Combatant : Mine Warfare Ship : Mine Sweeper- Drone");
			items.Add(120404, "120404 - Military Combatant : Mine Warfare Ship : Mine Hunter");
			items.Add(120405, "120405 - Military Combatant : Mine Warfare Ship : Mine Countermeasures");
			items.Add(120406, "120406 - Military Combatant : Mine Warfare Ship : Mine Countermeasures- Support Ship");
			items.Add(120500, "120500 - Military Combatant : Patrol Boat");
			items.Add(120501, "120501 - Military Combatant : Patrol Boat : Patrol Craft- Submarine Chaser/Escort- General");
			items.Add(120502, "120502 - Military Combatant : Patrol Boat : Patrol Ship- General");
			items.Add(120600, "120600 - Military Combatant : Decoy");
			items.Add(120700, "120700 - Military Combatant : Unmanned Surface Water Vehicle (USV)");
			items.Add(120800, "120800 - Military Combatant : Speedboat");
			items.Add(120801, "120801 - Military Combatant : Speedboat : Rigid-Hull Inflatable Boat");
			items.Add(120900, "120900 - Military Combatant : Jet Ski");
			items.Add(121000, "121000 - Military Combatant : Navy Task Organization");
			items.Add(121001, "121001 - Military Combatant : Navy Task Organization : Navy Task Element");
			items.Add(121002, "121002 - Military Combatant : Navy Task Organization : Navy Task Force");
			items.Add(121003, "121003 - Military Combatant : Navy Task Organization : Navy Task Group");
			items.Add(121004, "121004 - Military Combatant : Navy Task Organization : Navy Task Unit");
			items.Add(121005, "121005 - Military Combatant : Navy Task Organization : Convoy");
			items.Add(121100, "121100 - Military Combatant : Sea-Based X-Band (SBX) Radar");
			items.Add(130000, "130000 - Military Noncombatant");
			items.Add(130100, "130100 - Military Noncombatant : Auxiliary Ship");
			items.Add(130101, "130101 - Military Noncombatant : Auxiliary Ship : Ammunition Ship");
			items.Add(130102, "130102 - Military Noncombatant : Auxiliary Ship : Naval Stores Ship");
			items.Add(130103, "130103 - Military Noncombatant : Auxiliary Ship : Auxiliary Flag Ship");
			items.Add(130104, "130104 - Military Noncombatant : Auxiliary Ship : Intelligence Collector");
			items.Add(130105, "130105 - Military Noncombatant : Auxiliary Ship : Oceanographic Research Ship");
			items.Add(130106, "130106 - Military Noncombatant : Auxiliary Ship : Survey Ship");
			items.Add(130107, "130107 - Military Noncombatant : Auxiliary Ship : Hospital Ship");
			items.Add(130108, "130108 - Military Noncombatant : Auxiliary Ship : Naval Cargo Ship");
			items.Add(130109, "130109 - Military Noncombatant : Auxiliary Ship : Combat Support Ship- Fast");
			items.Add(130110, "130110 - Military Noncombatant : Auxiliary Ship : Oiler- Replenishment");
			items.Add(130111, "130111 - Military Noncombatant : Auxiliary Ship : Repair Ship");
			items.Add(130112, "130112 - Military Noncombatant : Auxiliary Ship : Submarine Tender");
			items.Add(130113, "130113 - Military Noncombatant : Auxiliary Ship : Tug- Ocean Going");
			items.Add(130200, "130200 - Military Noncombatant : Service Craft/Yard");
			items.Add(130201, "130201 - Military Noncombatant : Service Craft/Yard : Barge- Not Self-Propelled");
			items.Add(130202, "130202 - Military Noncombatant : Service Craft/Yard : Barge- Self-Propelled");
			items.Add(130203, "130203 - Military Noncombatant : Service Craft/Yard : Tug- Harbor");
			items.Add(130204, "130204 - Military Noncombatant : Service Craft/Yard : Launch");
			items.Add(140000, "140000 - Civilian (Sea Surface)");
			items.Add(140100, "140100 - Civilian (Sea Surface) : Merchant Ship");
			items.Add(140101, "140101 - Civilian (Sea Surface) : Merchant Ship : Cargo- General");
			items.Add(140102, "140102 - Civilian (Sea Surface) : Merchant Ship : Container Ship");
			items.Add(140103, "140103 - Civilian (Sea Surface) : Merchant Ship : Dredge");
			items.Add(140104, "140104 - Civilian (Sea Surface) : Merchant Ship : Roll On/Roll Off");
			items.Add(140105, "140105 - Civilian (Sea Surface) : Merchant Ship : Ferry");
			items.Add(140106, "140106 - Civilian (Sea Surface) : Merchant Ship : Heavy Lift");
			items.Add(140107, "140107 - Civilian (Sea Surface) : Merchant Ship : Hovercraft");
			items.Add(140108, "140108 - Civilian (Sea Surface) : Merchant Ship : Lash Carrier (with Barges)");
			items.Add(140109, "140109 - Civilian (Sea Surface) : Merchant Ship : Oiler/Tanker");
			items.Add(140110, "140110 - Civilian (Sea Surface) : Merchant Ship : Passenger");
			items.Add(140111, "140111 - Civilian (Sea Surface) : Merchant Ship : Tug- Ocean Going");
			items.Add(140112, "140112 - Civilian (Sea Surface) : Merchant Ship : Tow");
			items.Add(140113, "140113 - Civilian (Sea Surface) : Merchant Ship : Transport Ship- Hazardous Material");
			items.Add(140114, "140114 - Civilian (Sea Surface) : Merchant Ship : Junk/Dhow");
			items.Add(140115, "140115 - Civilian (Sea Surface) : Merchant Ship : Barge- Not Self-Propelled");
			items.Add(140116, "140116 - Civilian (Sea Surface) : Merchant Ship : Hospital Ship");
			items.Add(140200, "140200 - Civilian (Sea Surface) : Fishing Vessel");
			items.Add(140201, "140201 - Civilian (Sea Surface) : Fishing Vessel : Drifter");
			items.Add(140202, "140202 - Civilian (Sea Surface) : Fishing Vessel : Trawler");
			items.Add(140203, "140203 - Civilian (Sea Surface) : Fishing Vessel : Dredger");
			items.Add(140300, "140300 - Civilian (Sea Surface) : Law Enforcement Vessel");
			items.Add(140400, "140400 - Civilian (Sea Surface) : Leisure Craft- Sailing");
			items.Add(140500, "140500 - Civilian (Sea Surface) : Leisure Craft- Motorized");
			items.Add(140501, "140501 - Civilian (Sea Surface) : Leisure Craft- Motorized : Rigid-Hull Inflatable Boat");
			items.Add(140502, "140502 - Civilian (Sea Surface) : Leisure Craft- Motorized : Speedboat");
			items.Add(140600, "140600 - Civilian (Sea Surface) : Jet Ski");
			items.Add(140700, "140700 - Civilian (Sea Surface) : Unmanned Surface Water Vehicle (USV)");
			items.Add(150000, "150000 - Own Ship");
			items.Add(160000, "160000 - Fused Track (Sea Surface)");
			items.Add(170000, "170000 - Manual Track (Sea Surface)");
			return items;
		}
	}


	public class Sea_Surface_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Sea_Surface_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Mission Area : Own Ship");
			items.Add(02, "02 - Mission Area : Antiair Warfare");
			items.Add(03, "03 - Mission Area : Antisubmarine Warfare (Sea Surface)");
			items.Add(04, "04 - Mission Area : Escort");
			items.Add(05, "05 - Mission Area : Electronic Warfare");
			items.Add(06, "06 - Mission Area : Intelligence- Surveillance- Reconnaissance");
			items.Add(07, "07 - Mission Area : Mine Countermeasures (Sea Surface)");
			items.Add(08, "08 - Mission Area : Missile Defense");
			items.Add(09, "09 - Mission Area : Medical");
			items.Add(10, "10 - Mission Area : Mine Warfare (Sea Surface)");
			items.Add(11, "11 - Mission Area : Remote Multi-Mission Vehicle (USV-only)");
			items.Add(12, "12 - Asset Capability : SOF (Sea Surface)");
			items.Add(13, "13 - Mission Area : Surface Warfare (Sea Surface)");
			items.Add(14, "14 - Weapons Capability : Ballistic Missile (Sea Surface)");
			items.Add(15, "15 - Weapons Capability : Guided Missile (Sea Surface)");
			items.Add(16, "16 - Weapons Capability : Other Guided Missile (Sea Surface)");
			items.Add(17, "17 - Weapons Capability : Torpedo");
			items.Add(18, "18 - Asset Capability : Drone-Equipped");
			items.Add(19, "19 - Asset Capability : Helicopter-Equipped/VSTOL");
			items.Add(20, "20 - Mission Area : Ballistic Missile Defense- Shooter");
			items.Add(21, "21 - Mission Area : Ballistic Missile Defense- Long-Range Surveillance and Track (LRST)");
			items.Add(22, "22 - Mission Area : Sea-Base X-Band");
			items.Add(23, "23 - Crime : Hijacking/Hijacked (Sea Surface)");
			return items;
		}
	}


	public class Sea_Surface_Modifier_TwosItemsSource : IItemsSource {

		public static ItemCollection Items = new Sea_Surface_Modifier_TwosItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Ship Propulsion : Nuclear Powered");
			items.Add(02, "02 - Ship Capacity : Heavy");
			items.Add(03, "03 - Ship Capacity : Light");
			items.Add(04, "04 - Ship Capacity : Medium");
			items.Add(05, "05 - Cargo Capacity : Dock");
			items.Add(06, "06 - Cargo Capacity : Logistics");
			items.Add(07, "07 - Cargo Capacity : Tank");
			items.Add(08, "08 - Cargo Capacity : Vehicle");
			items.Add(09, "09 - Ship Mobility : Fast");
			items.Add(10, "10 - Ship Mobility : Air-Cushioned (US)");
			items.Add(11, "11 - Ship Mobility : Air-Cushioned (NATO)");
			items.Add(12, "12 - Ship Mobility : Hydrofoil");
			items.Add(13, "13 - USV Control : Autonomous Control");
			items.Add(14, "14 - USV Control : Remotely Piloted");
			items.Add(15, "15 - USV Control : Expendable");
			return items;
		}
	}


	public class ArraysItemsSource : IItemsSource {

		public static ItemCollection Items = new ArraysItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(61, "61 - Short towed array");
			items.Add(62, "62 - Long towed array");
			return items;
		}
	}


	public class SeaSubsurfaceItemsSource : IItemsSource {

		public static ItemCollection Items = new SeaSubsurfaceItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(35, "35 - Sea Subsurface");
			items.Add(36, "36 - Mine Warfare");
			return items;
		}
	}


	public class Sea_Subsurface_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Sea_Subsurface_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Military (Sea Subsurface)");
			items.Add(110100, "110100 - Military (Sea Subsurface) : Submarine");
			items.Add(110101, "110101 - Military (Sea Subsurface) : Submarine : Submarine-Surfaced");
			items.Add(110102, "110102 - Military (Sea Subsurface) : Submarine : Submarine-Snorkeling");
			items.Add(110103, "110103 - Military (Sea Subsurface) : Submarine : Submarine-Bottomed");
			items.Add(110200, "110200 - Military (Sea Subsurface) : Other Submersible");
			items.Add(110300, "110300 - Military (Sea Subsurface) : Nonsubmarine");
			items.Add(110400, "110400 - Military (Sea Subsurface) : Autonomous Underwater Vehicle (AUV)");
			items.Add(110500, "110500 - Military (Sea Subsurface) : Diver");
			items.Add(120000, "120000 - Civilian (Sea Subsurface)");
			items.Add(120100, "120100 - Civilian (Sea Subsurface) : Submersible");
			items.Add(120200, "120200 - Civilian (Sea Subsurface) : Autonomous Underwater Vehicle (AUV)");
			items.Add(120300, "120300 - Civilian (Sea Subsurface) : Diver");
			items.Add(130000, "130000 - Weapon (Sea Subsurface)");
			items.Add(130100, "130100 - Weapon (Sea Subsurface) : Torpedo");
			items.Add(130200, "130200 - Weapon (Sea Subsurface) : Improvised Explosive Device (IED)");
			items.Add(130300, "130300 - Weapon (Sea Subsurface) : Decoy");
			items.Add(140000, "140000 - Echo Tracker Classifier (ETC) / Possible Contact (POSCON)");
			items.Add(150000, "150000 - Fused Track (Sea Subsurface)");
			items.Add(160000, "160000 - Manual Track (Sea Subsurface)");
			return items;
		}
	}


	public class Sea_Subsurface_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Sea_Subsurface_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Mission Area : Antisubmarine Warfare (Sea Subsurface)");
			items.Add(02, "02 - Mission Area : Auxiliary");
			items.Add(03, "03 - Mission Area : Command and Control");
			items.Add(04, "04 - Mission Area : Intelligence Surveillance Reconnaissance");
			items.Add(05, "05 - Mission Area : Mine Countermeasures (Sea Subsurface)");
			items.Add(06, "06 - Mission Area : Mine Warfare (Sea Subsurface)");
			items.Add(07, "07 - Mission Area : Surface Warfare (Sea Subsurface)");
			items.Add(08, "08 - Weapons Capability : Attack");
			items.Add(09, "09 - Weapons Capability : Ballistic Missile (Sea Subsurface)");
			items.Add(10, "10 - Weapons Capability : Guided Missile (Sea Subsurface)");
			items.Add(11, "11 - Weapons Capability : Other Guided Missile (Sea Subsurface)");
			items.Add(12, "12 - Asset Capability : SOF (Sea Subsurface)");
			items.Add(13, "13 - Submarine Confidence : Possible Submarine Low 1");
			items.Add(14, "14 - Submarine Confidence : Possible Submarine Low 2");
			items.Add(15, "15 - Submarine Confidence : Possible Submarine High 3");
			items.Add(16, "16 - Submarine Confidence : Possible Submarine High 4");
			items.Add(17, "17 - Submarine Confidence : Probable Submarine");
			items.Add(18, "18 - Submarine Confidence : Certain Submarine");
			items.Add(19, "19 - Weapons Capability : Anti-torpedo Torpedo");
			items.Add(20, "20 - Crime : Hijacking/Highjacked");
			return items;
		}
	}


	public class Sea_Subsurface_Modifier_TwosItemsSource : IItemsSource {

		public static ItemCollection Items = new Sea_Subsurface_Modifier_TwosItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Ship Propulsion : Air Independent Propulsion");
			items.Add(02, "02 - Ship Propulsion : Diesel Electric General");
			items.Add(03, "03 - Ship Propulsion : Diesel - Type 1");
			items.Add(04, "04 - Ship Propulsion : Diesel - Type 2");
			items.Add(05, "05 - Ship Propulsion : Diesel - Type 3");
			items.Add(06, "06 - Ship Propulsion : Nuclear Powered General");
			items.Add(07, "07 - Ship Propulsion : Nuclear - Type 1");
			items.Add(08, "08 - Ship Propulsion : Nuclear - Type 2");
			items.Add(09, "09 - Ship Propulsion : Nuclear - Type 3");
			items.Add(10, "10 - Ship Propulsion : Nuclear - Type 4");
			items.Add(11, "11 - Ship Propulsion : Nuclear - Type 5");
			items.Add(12, "12 - Ship Propulsion : Nuclear - Type 6");
			items.Add(13, "13 - Ship Propulsion : Nuclear - Type 7");
			items.Add(14, "14 - UUV Control : Autonomous Control");
			items.Add(15, "15 - UUV Control : Remotely Piloted");
			items.Add(16, "16 - UUV Control : Expendable");
			return items;
		}
	}


	public class Sea_Subsurface_Mine_Warfare_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Sea_Subsurface_Mine_Warfare_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110000, "110000 - Sea Mine-General");
			items.Add(110100, "110100 - Sea Mine-General : Sea Mine-Bottom");
			items.Add(110200, "110200 - Sea Mine-General : Sea Mine-Moored");
			items.Add(110300, "110300 - Sea Mine-General : Sea Mine-Floating");
			items.Add(110400, "110400 - Sea Mine-General : Sea Mine-Rising");
			items.Add(110500, "110500 - Sea Mine-General : Sea Mine-Other Position");
			items.Add(110800, "110800 - Sea Mine-General : Exercise Mine-General");
			items.Add(110801, "110801 - Sea Mine-General : Exercise Mine-General : Exercise Mine-Bottom");
			items.Add(110802, "110802 - Sea Mine-General : Exercise Mine-General : Exercise Mine-Moored");
			items.Add(110803, "110803 - Sea Mine-General : Exercise Mine-General : Exercise Mine-Floating");
			items.Add(110804, "110804 - Sea Mine-General : Exercise Mine-General : Exercise Mine-Rising");
			items.Add(110900, "110900 - Sea Mine-General : Neutralized");
			items.Add(110901, "110901 - Sea Mine-General : Neutralized : Neutralized Mine-Bottom");
			items.Add(110902, "110902 - Sea Mine-General : Neutralized : Neutralized Mine-Moored");
			items.Add(110903, "110903 - Sea Mine-General : Neutralized : Neutralized Mine-Floating");
			items.Add(110904, "110904 - Sea Mine-General : Neutralized : Neutralized Mine-Rising");
			items.Add(110905, "110905 - Sea Mine-General : Neutralized : Neutralized Mine-Other Position");
			items.Add(120000, "120000 - Unexploded Ordnance");
			items.Add(130000, "130000 - Sea Mine Decoy");
			items.Add(130100, "130100 - Sea Mine Decoy : Sea Mine Decoy-Bottom");
			items.Add(130200, "130200 - Sea Mine Decoy : Sea Mine Decoy-Moored");
			items.Add(140100, "140100 - MILCO : General");
			items.Add(140101, "140101 - MILCO : General : General-Confidence-Level 1");
			items.Add(140102, "140102 - MILCO : General : General-Confidence-Level 2");
			items.Add(140103, "140103 - MILCO : General : General-Confidence-Level 3");
			items.Add(140104, "140104 - MILCO : General : General-Confidence-Level 4");
			items.Add(140105, "140105 - MILCO : General : General-Confidence-Level 5");
			items.Add(140200, "140200 - MILCO : Bottom");
			items.Add(140201, "140201 - MILCO : Bottom : Bottom-Confidence-Level 1");
			items.Add(140202, "140202 - MILCO : Bottom : Bottom-Confidence-Level 2");
			items.Add(140203, "140203 - MILCO : Bottom : Bottom-Confidence-Level 3");
			items.Add(140204, "140204 - MILCO : Bottom : Bottom-Confidence-Level 4");
			items.Add(140205, "140205 - MILCO : Bottom : Bottom-Confidence-Level 5");
			items.Add(140300, "140300 - MILCO : Moored");
			items.Add(140301, "140301 - MILCO : Moored : Moored-Confidence-Level 1");
			items.Add(140302, "140302 - MILCO : Moored : Moored-Confidence-Level 2");
			items.Add(140303, "140303 - MILCO : Moored : Moored-Confidence-Level 3");
			items.Add(140304, "140304 - MILCO : Moored : Moored-Confidence-Level 4");
			items.Add(140305, "140305 - MILCO : Moored : Moored-Confidence-Level 5");
			items.Add(140400, "140400 - MILCO : Floating");
			items.Add(140401, "140401 - MILCO : Floating : Floating-Confidence-Level 1");
			items.Add(140402, "140402 - MILCO : Floating : Floating-Confidence-Level 2");
			items.Add(140403, "140403 - MILCO : Floating : Floating-Confidence-Level 3");
			items.Add(140404, "140404 - MILCO : Floating : Floating-Confidence-Level 4");
			items.Add(140405, "140405 - MILCO : Floating : Floating-Confidence-Level 5");
			items.Add(150000, "150000 - Mine-Like Echo (MILEC)-General");
			items.Add(150100, "150100 - Mine-Like Echo (MILEC)-General : Mine-Like Echo-Bottom");
			items.Add(150200, "150200 - Mine-Like Echo (MILEC)-General : Mine-Like Echo-Moored");
			items.Add(150300, "150300 - Mine-Like Echo (MILEC)-General : Mine-Like Echo-Floating");
			items.Add(160000, "160000 - Negative Reacquisition-General");
			items.Add(160100, "160100 - Negative Reacquisition-General : Negative Reacquisition-Bottom");
			items.Add(160200, "160200 - Negative Reacquisition-General : Negative Reacquisition-Moored");
			items.Add(160300, "160300 - Negative Reacquisition-General : Negative Reacquisition-Floating");
			items.Add(170000, "170000 - Obstructor");
			items.Add(170100, "170100 - Obstructor : Neutralized Obstructor");
			items.Add(180000, "180000 - General Mine Anchor");
			items.Add(190000, "190000 - NMLO-General");
			items.Add(190100, "190100 - NMLO-General : Non-Mine Mine-Like Object-Bottom");
			items.Add(190200, "190200 - NMLO-General : Non-Mine Mine-Like Object-Moored");
			items.Add(190300, "190300 - NMLO-General : Non-Mine Mine-Like Object-Floating");
			items.Add(200000, "200000 - Environmental Report Location");
			items.Add(210000, "210000 - Dive Report Location");
			return items;
		}
	}


	public class ActivitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new ActivitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(40, "40 - Activities");
			return items;
		}
	}


	public class Activities_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Activities_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110100, "110100 - Incident : Criminal Activity Incident");
			items.Add(110101, "110101 - Incident : Criminal Activity Incident : Arrest");
			items.Add(110102, "110102 - Incident : Criminal Activity Incident : Arson");
			items.Add(110103, "110103 - Incident : Criminal Activity Incident : Attempted Criminal Activity");
			items.Add(110104, "110104 - Incident : Criminal Activity Incident : Drive-by Shooting");
			items.Add(110105, "110105 - Incident : Criminal Activity Incident : Drug Related");
			items.Add(110106, "110106 - Incident : Criminal Activity Incident : Extortion");
			items.Add(110107, "110107 - Incident : Criminal Activity Incident : Graffiti");
			items.Add(110108, "110108 - Incident : Criminal Activity Incident : Killing");
			items.Add(110109, "110109 - Incident : Criminal Activity Incident : Poisoning");
			items.Add(110110, "110110 - Incident : Criminal Activity Incident : Civil Rioting");
			items.Add(110111, "110111 - Incident : Criminal Activity Incident : Booby Trap");
			items.Add(110112, "110112 - Incident : Criminal Activity Incident : Home Eviction");
			items.Add(110113, "110113 - Incident : Criminal Activity Incident : Black Marketing");
			items.Add(110114, "110114 - Incident : Criminal Activity Incident : Vandalism / Loot / Ransack / Plunder");
			items.Add(110115, "110115 - Incident : Criminal Activity Incident : Jail Break");
			items.Add(110116, "110116 - Incident : Criminal Activity Incident : Robbery");
			items.Add(110117, "110117 - Incident : Criminal Activity Incident : Theft");
			items.Add(110118, "110118 - Incident : Criminal Activity Incident : Burglary");
			items.Add(110119, "110119 - Incident : Criminal Activity Incident : Smuggling");
			items.Add(110120, "110120 - Incident : Criminal Activity Incident : Rock Throwing");
			items.Add(110121, "110121 - Incident : Criminal Activity Incident : Dead Body");
			items.Add(110122, "110122 - Incident : Criminal Activity Incident : Sabotage");
			items.Add(110123, "110123 - Incident : Criminal Activity Incident : Suspicious Activity");
			items.Add(110200, "110200 - Incident : Bomb/Bombing");
			items.Add(110201, "110201 - Incident : Bomb/Bombing : Bomb Threat");
			items.Add(110300, "110300 - Incident : IED Event");
			items.Add(110301, "110301 - Incident : IED Event : IED Explosion");
			items.Add(110302, "110302 - Incident : IED Event : Premature IED Explosion");
			items.Add(110303, "110303 - Incident : IED Event : IED Cache");
			items.Add(110304, "110304 - Incident : IED Event : IED Suicide Bomber");
			items.Add(110400, "110400 - Incident : Shooting");
			items.Add(110401, "110401 - Incident : Shooting : Sniping");
			items.Add(110500, "110500 - Incident : Illegal Drug Operation");
			items.Add(110501, "110501 - Incident : Illegal Drug Operation : Trafficking");
			items.Add(110502, "110502 - Incident : Illegal Drug Operation : Illegal Drug Lab");
			items.Add(110600, "110600 - Incident : Explosion");
			items.Add(110601, "110601 - Incident : Explosion : Grenade Explosion");
			items.Add(110602, "110602 - Incident : Explosion : Incendiary Explosion");
			items.Add(110603, "110603 - Incident : Explosion : Mine Explosion");
			items.Add(110604, "110604 - Incident : Explosion : Mortar Fire Explosion");
			items.Add(110605, "110605 - Incident : Explosion : Rocket Explosion");
			items.Add(110606, "110606 - Incident : Explosion : Bomb Explosion");
			items.Add(120000, "120000 - Civil Disturbance");
			items.Add(120100, "120100 - Civil Disturbance : Demonstration");
			items.Add(130100, "130100 - Operation : Patrolling");
			items.Add(130200, "130200 - Operation : Military Information Support Operation (MISO)");
			items.Add(130201, "130201 - Operation : Military Information Support Operation (MISO) : TV and Radio Propaganda");
			items.Add(130300, "130300 - Operation : Foraging/Searching");
			items.Add(130401, "130401 - Operation : Recruitment : Willing");
			items.Add(130402, "130402 - Operation : Recruitment : Coerced/Impressed");
			items.Add(130500, "130500 - Operation : Mine Laying");
			items.Add(130600, "130600 - Operation : Spy");
			items.Add(130700, "130700 - Operation : Warrant Served");
			items.Add(130800, "130800 - Operation : Exfiltration");
			items.Add(130900, "130900 - Operation : Infiltration");
			items.Add(131000, "131000 - Operation : Meeting");
			items.Add(131001, "131001 - Operation : Meeting : Polling Place/Election");
			items.Add(131100, "131100 - Operation : Raid on House");
			items.Add(131200, "131200 - Operation : Emergency Operation");
			items.Add(131201, "131201 - Operation : Emergency Operation : Emergency Collection Evacuation Point");
			items.Add(131202, "131202 - Operation : Emergency Operation : Emergency Food Distribution");
			items.Add(131203, "131203 - Operation : Emergency Operation : Emergency Incident Command Center");
			items.Add(131204, "131204 - Operation : Emergency Operation : Emergency Operations Center");
			items.Add(131205, "131205 - Operation : Emergency Operation : Emergency Public Information Center");
			items.Add(131206, "131206 - Operation : Emergency Operation : Emergency Shelter");
			items.Add(131207, "131207 - Operation : Emergency Operation : Emergency Staging Area");
			items.Add(131208, "131208 - Operation : Emergency Operation : Emergency Water Distribution Center");
			items.Add(131300, "131300 - Operation : Emergency Medical Operation");
			items.Add(131301, "131301 - Operation : Emergency Medical Operation : EMT Station Location");
			items.Add(131302, "131302 - Operation : Emergency Medical Operation : Health Department Facility");
			items.Add(131303, "131303 - Operation : Emergency Medical Operation : Medical Facilities Outpatient");
			items.Add(131304, "131304 - Operation : Emergency Medical Operation : Morgue");
			items.Add(131305, "131305 - Operation : Emergency Medical Operation : Pharmacy");
			items.Add(131306, "131306 - Operation : Emergency Medical Operation : Triage");
			items.Add(131400, "131400 - Operation : Fire Fighting Operation");
			items.Add(131401, "131401 - Operation : Fire Fighting Operation : Fire Hydrant");
			items.Add(131402, "131402 - Operation : Fire Fighting Operation : Fire Station");
			items.Add(131403, "131403 - Operation : Fire Fighting Operation : Other Water Supply Location");
			items.Add(131500, "131500 - Operation : Law Enforcement Operation");
			items.Add(131501, "131501 - Operation : Law Enforcement Operation : ATF");
			items.Add(131502, "131502 - Operation : Law Enforcement Operation : Border Patrol");
			items.Add(131503, "131503 - Operation : Law Enforcement Operation : Customs Service");
			items.Add(131504, "131504 - Operation : Law Enforcement Operation : DEA");
			items.Add(131505, "131505 - Operation : Law Enforcement Operation : DOJ");
			items.Add(131506, "131506 - Operation : Law Enforcement Operation : FBI");
			items.Add(131507, "131507 - Operation : Law Enforcement Operation : Police");
			items.Add(131508, "131508 - Operation : Law Enforcement Operation : Prison");
			items.Add(131509, "131509 - Operation : Law Enforcement Operation : USSS");
			items.Add(131510, "131510 - Operation : Law Enforcement Operation : TSA");
			items.Add(131511, "131511 - Operation : Law Enforcement Operation : Coast Guard");
			items.Add(131512, "131512 - Operation : Law Enforcement Operation : US Marshals Service");
			items.Add(131513, "131513 - Operation : Law Enforcement Operation : Internal Security Force");
			items.Add(140000, "140000 - Fire Event");
			items.Add(140100, "140100 - Fire Event : Fire Origin");
			items.Add(140200, "140200 - Fire Event : Smoke");
			items.Add(140300, "140300 - Fire Event : Hot Spot");
			items.Add(140400, "140400 - Fire Event : Non-Residential Fire");
			items.Add(140500, "140500 - Fire Event : Residential Fire");
			items.Add(140600, "140600 - Fire Event : School Fire");
			items.Add(140700, "140700 - Fire Event : Special Needs Fire");
			items.Add(140800, "140800 - Fire Event : Wild Fire");
			items.Add(150100, "150100 - Hazard Materials : Incident");
			items.Add(150101, "150101 - Hazard Materials : Incident : Chemical Agent");
			items.Add(150102, "150102 - Hazard Materials : Incident : Corrosive Material");
			items.Add(150103, "150103 - Hazard Materials : Incident : Hazardous when Wet");
			items.Add(150104, "150104 - Hazard Materials : Incident : Explosive Material");
			items.Add(150105, "150105 - Hazard Materials : Incident : Flammable Gas");
			items.Add(150106, "150106 - Hazard Materials : Incident : Flammable Liquid");
			items.Add(150107, "150107 - Hazard Materials : Incident : Flammable Solid");
			items.Add(150108, "150108 - Hazard Materials : Incident : Non-Flammable Gas");
			items.Add(150109, "150109 - Hazard Materials : Incident : Organic Peroxide");
			items.Add(150110, "150110 - Hazard Materials : Incident : Oxidizer");
			items.Add(150111, "150111 - Hazard Materials : Incident : Radioactive Material");
			items.Add(150112, "150112 - Hazard Materials : Incident : Spontaneously Combustible Material");
			items.Add(150113, "150113 - Hazard Materials : Incident : Toxic Gas");
			items.Add(150114, "150114 - Hazard Materials : Incident : Toxic Infectious Material");
			items.Add(150115, "150115 - Hazard Materials : Incident : Unexploded Ordnance");
			items.Add(160000, "160000 - Transportation Incident");
			items.Add(160100, "160100 - Transportation Incident : Air");
			items.Add(160200, "160200 - Transportation Incident : Marine");
			items.Add(160300, "160300 - Transportation Incident : Rail");
			items.Add(160400, "160400 - Transportation Incident : Vehicle");
			items.Add(160500, "160500 - Transportation Incident : Wheeled Vehicle Explosion");
			items.Add(170000, "170000 - Natural Event");
			items.Add(170100, "170100 - Natural Event : Geologic");
			items.Add(170101, "170101 - Natural Event : Geologic : Aftershock");
			items.Add(170102, "170102 - Natural Event : Geologic : Avalanche");
			items.Add(170103, "170103 - Natural Event : Geologic : Earthquake Epicenter");
			items.Add(170104, "170104 - Natural Event : Geologic : Landslide");
			items.Add(170105, "170105 - Natural Event : Geologic : Subsidence");
			items.Add(170106, "170106 - Natural Event : Geologic : Volcanic Eruption");
			items.Add(170107, "170107 - Natural Event : Geologic : Volcanic Threat");
			items.Add(170108, "170108 - Natural Event : Geologic : Cave Entrance");
			items.Add(170200, "170200 - Natural Event : Hydro-Meteorological");
			items.Add(170201, "170201 - Natural Event : Hydro-Meteorological : Drought");
			items.Add(170202, "170202 - Natural Event : Hydro-Meteorological : Flood");
			items.Add(170203, "170203 - Natural Event : Hydro-Meteorological : Tsunami");
			items.Add(170300, "170300 - Natural Event : Infestation");
			items.Add(170301, "170301 - Natural Event : Infestation : Bird");
			items.Add(170302, "170302 - Natural Event : Infestation : Insect");
			items.Add(170303, "170303 - Natural Event : Infestation : Microbial");
			items.Add(170304, "170304 - Natural Event : Infestation : Reptile");
			items.Add(170305, "170305 - Natural Event : Infestation : Rodent");
			items.Add(180100, "180100 - Individual : Religious Leader");
			items.Add(180200, "180200 - Individual : Speaker");
			return items;
		}
	}


	public class Activities_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Activities_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Crime : Assassination (Activities)");
			items.Add(02, "02 - Crime : Execution (Wrongful Killing) (Activities)");
			items.Add(03, "03 - Crime : Hijacking/Hijacked (Activities)");
			items.Add(04, "04 - Psychological Operations : House-to-House");
			items.Add(05, "05 - Crime : Kidnapping (Activities)");
			items.Add(06, "06 - Crime : Murder");
			items.Add(07, "07 - Crime : Piracy (Activities)");
			items.Add(08, "08 - Crime : Rape (Activities)");
			items.Add(09, "09 - Psychological Operations : Written Psychological Operations");
			items.Add(10, "10 - Crime : Pirate");
			items.Add(11, "11 - IED Category : False");
			items.Add(12, "12 - IED Category : Find");
			items.Add(13, "13 - IED Category : Found and Cleared");
			items.Add(14, "14 - IED Category : Hoax (Decoy)");
			items.Add(15, "15 - Incident Qualifier : Attempted");
			items.Add(16, "16 - Incident Qualifier : Accident");
			items.Add(17, "17 - Incident Qualifier : Incident");
			items.Add(18, "18 - Crime : Theft");
			return items;
		}
	}


	public class METOCPointsItemsSource : IItemsSource {

		public static ItemCollection Items = new METOCPointsItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(45, "45 - Meteorological - Atmospheric");
			items.Add(46, "46 - Meteorological - Oceanographic");
			items.Add(47, "47 - Meteorological - Space");
			return items;
		}
	}


	public class METOC_Atmospheric_Point_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new METOC_Atmospheric_Point_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110100, "110100 - Pressure Systems : Low Pressure Center");
			items.Add(110101, "110101 - Pressure Systems : Low Pressure Center : Cyclone Center");
			items.Add(110102, "110102 - Pressure Systems : Low Pressure Center : Tropopause Low");
			items.Add(110200, "110200 - Pressure Systems : High Pressure Center");
			items.Add(110201, "110201 - Pressure Systems : High Pressure Center : Anticyclone Center");
			items.Add(110202, "110202 - Pressure Systems : High Pressure Center : Tropopause High");
			items.Add(110501, "110501 - Pressure Systems : Pressure Tendency : Rise Then Fall Higher");
			items.Add(110502, "110502 - Pressure Systems : Pressure Tendency : Rise Then Steady");
			items.Add(110503, "110503 - Pressure Systems : Pressure Tendency : Rise");
			items.Add(110504, "110504 - Pressure Systems : Pressure Tendency : Rise Then Rise Higher");
			items.Add(110505, "110505 - Pressure Systems : Pressure Tendency : Steady");
			items.Add(110506, "110506 - Pressure Systems : Pressure Tendency : Fall Then Rise Lower");
			items.Add(110507, "110507 - Pressure Systems : Pressure Tendency : Fall Then Steady");
			items.Add(110508, "110508 - Pressure Systems : Pressure Tendency : Fall");
			items.Add(110509, "110509 - Pressure Systems : Pressure Tendency : Rise Then Fall Lower");
			items.Add(120100, "120100 - Turbulence : Light");
			items.Add(120200, "120200 - Turbulence : Moderate");
			items.Add(120300, "120300 - Turbulence : Severe");
			items.Add(120400, "120400 - Turbulence : Extreme");
			items.Add(120500, "120500 - Turbulence : Mountain Waves");
			items.Add(130101, "130101 - Icing : Clear Icing : Light");
			items.Add(130102, "130102 - Icing : Clear Icing : Moderate");
			items.Add(130103, "130103 - Icing : Clear Icing : Severe");
			items.Add(130201, "130201 - Icing : Rime Icing : Light");
			items.Add(130202, "130202 - Icing : Rime Icing : Moderate");
			items.Add(130203, "130203 - Icing : Rime Icing : Severe");
			items.Add(130301, "130301 - Icing : Mixed Icing : Light");
			items.Add(130302, "130302 - Icing : Mixed Icing : Moderate");
			items.Add(130303, "130303 - Icing : Mixed Icing : Severe");
			items.Add(140100, "140100 - Winds : Calm Winds");
			items.Add(140200, "140200 - Winds : Wind Plot");
			items.Add(150101, "150101 - Cloud Cover : Cloud Coverage : Clear Sky");
			items.Add(150102, "150102 - Cloud Cover : Cloud Coverage : Few Coverage");
			items.Add(150103, "150103 - Cloud Cover : Cloud Coverage : Scattered Coverage");
			items.Add(150104, "150104 - Cloud Cover : Cloud Coverage : Broken Coverage");
			items.Add(150105, "150105 - Cloud Cover : Cloud Coverage : Overcast Coverage");
			items.Add(150106, "150106 - Cloud Cover : Cloud Coverage : Sky Totally or Partially Obscured");
			items.Add(160101, "160101 - Weather Symbols : Rain : Intermittent Light");
			items.Add(160102, "160102 - Weather Symbols : Rain : Continuous Light");
			items.Add(160103, "160103 - Weather Symbols : Rain : Intermittent Moderate");
			items.Add(160104, "160104 - Weather Symbols : Rain : Intermittent Moderate/Continuous Moderate");
			items.Add(160105, "160105 - Weather Symbols : Rain : Intermittent Heavy");
			items.Add(160106, "160106 - Weather Symbols : Rain : Intermittent Heavy/Continuous Heavy");
			items.Add(160201, "160201 - Weather Symbols : Freezing Rain : Light");
			items.Add(160202, "160202 - Weather Symbols : Freezing Rain : Moderate/Heavy");
			items.Add(160301, "160301 - Weather Symbols : Rain Showers : Light");
			items.Add(160302, "160302 - Weather Symbols : Rain Showers : Moderate/Heavy");
			items.Add(160303, "160303 - Weather Symbols : Rain Showers : Torrential");
			items.Add(160401, "160401 - Weather Symbols : Drizzle : Intermittent Light");
			items.Add(160402, "160402 - Weather Symbols : Drizzle : Intermittent Light/Continuous Light");
			items.Add(160403, "160403 - Weather Symbols : Drizzle : Intermittent Moderate");
			items.Add(160404, "160404 - Weather Symbols : Drizzle : Intermittent Moderate/Continuous Moderate");
			items.Add(160405, "160405 - Weather Symbols : Drizzle : Intermittent Heavy");
			items.Add(160406, "160406 - Weather Symbols : Drizzle : Intermittent Heavy/Continuous Heavy");
			items.Add(160501, "160501 - Weather Symbols : Freezing Drizzle : Light");
			items.Add(160502, "160502 - Weather Symbols : Freezing Drizzle : Moderate/Heavy");
			items.Add(160601, "160601 - Weather Symbols : Rain and Snow Mixed : Rain or Drizzle and Snow - Light");
			items.Add(160602, "160602 - Weather Symbols : Rain and Snow Mixed : Rain or Drizzle and Snow - Moderate/Heavy");
			items.Add(160603, "160603 - Weather Symbols : Rain and Snow Mixed : Rain and Snow Showers - Light");
			items.Add(160604, "160604 - Weather Symbols : Rain and Snow Mixed : Rain and Snow Showers - Moderate/Heavy");
			items.Add(160701, "160701 - Weather Symbols : Snow : Intermittent Light");
			items.Add(160702, "160702 - Weather Symbols : Snow : Intermittent Light/Continuous Light");
			items.Add(160703, "160703 - Weather Symbols : Snow : Intermittent Moderate");
			items.Add(160704, "160704 - Weather Symbols : Snow : Intermittent Moderate/Continuous Moderate");
			items.Add(160705, "160705 - Weather Symbols : Snow : Intermittent Heavy");
			items.Add(160706, "160706 - Weather Symbols : Snow : Intermittent Heavy/Continuous Heavy");
			items.Add(160707, "160707 - Weather Symbols : Snow : Blowing Snow - Light/Moderate");
			items.Add(160708, "160708 - Weather Symbols : Snow : Blowing Snow - Heavy");
			items.Add(160800, "160800 - Weather Symbols : Snow Grains");
			items.Add(160901, "160901 - Weather Symbols : Snow Showers : Light");
			items.Add(160902, "160902 - Weather Symbols : Snow Showers : Moderate/Heavy");
			items.Add(161001, "161001 - Weather Symbols : Hail : Light not Associated with Thunder");
			items.Add(161002, "161002 - Weather Symbols : Hail : Moderate/Heavy not Associated with Thunder");
			items.Add(161100, "161100 - Weather Symbols : Ice Crystals (Diamond Dust)");
			items.Add(161201, "161201 - Weather Symbols : Ice Pellets (Sleet) : Light");
			items.Add(161202, "161202 - Weather Symbols : Ice Pellets (Sleet) : Moderate");
			items.Add(161203, "161203 - Weather Symbols : Ice Pellets (Sleet) : Heavy");
			items.Add(161300, "161300 - Weather Symbols : Inversion");
			items.Add(161401, "161401 - Weather Symbols : Storms : Thunderstorm - No Precipitation");
			items.Add(161402, "161402 - Weather Symbols : Storms : Thunderstorm Light to Moderate with Rain/Snow - No Hail");
			items.Add(161403, "161403 - Weather Symbols : Storms : Thunderstorm Heavy with Rain/Snow - No Hail");
			items.Add(161404, "161404 - Weather Symbols : Storms : Thunderstorm Light to Moderate - With Hail");
			items.Add(161405, "161405 - Weather Symbols : Storms : Thunderstorm Heavy - With Hail");
			items.Add(161406, "161406 - Weather Symbols : Storms : Funnel Cloud (Tornado/Waterspout)");
			items.Add(161407, "161407 - Weather Symbols : Storms : Squall");
			items.Add(161408, "161408 - Weather Symbols : Storms : Lightning");
			items.Add(161501, "161501 - Weather Symbols : Fog : Shallow Patches");
			items.Add(161502, "161502 - Weather Symbols : Fog : Shallow Continuous");
			items.Add(161503, "161503 - Weather Symbols : Fog : Patchy");
			items.Add(161504, "161504 - Weather Symbols : Fog : Sky Visible");
			items.Add(161505, "161505 - Weather Symbols : Fog : Sky Obscured");
			items.Add(161506, "161506 - Weather Symbols : Fog : Freezing-Sky Visible");
			items.Add(161507, "161507 - Weather Symbols : Fog : Freezing-Sky Obscured");
			items.Add(161600, "161600 - Weather Symbols : Mist");
			items.Add(161700, "161700 - Weather Symbols : Smoke");
			items.Add(161800, "161800 - Weather Symbols : Haze");
			items.Add(161901, "161901 - Weather Symbols : Dust or Sand : Light to Moderate");
			items.Add(161902, "161902 - Weather Symbols : Dust or Sand : Severe");
			items.Add(161903, "161903 - Weather Symbols : Dust or Sand : Dust Devil");
			items.Add(161904, "161904 - Weather Symbols : Dust or Sand : Blowing Dust or Sand");
			items.Add(162001, "162001 - Weather Symbols : Tropical Storm Systems : Tropical Depression");
			items.Add(162002, "162002 - Weather Symbols : Tropical Storm Systems : Tropical Storm");
			items.Add(162003, "162003 - Weather Symbols : Tropical Storm Systems : Hurricane/Typhoon");
			items.Add(162100, "162100 - Weather Symbols : Volcanic Eruption");
			items.Add(162101, "162101 - Weather Symbols : Volcanic Eruption : Volcanic Ash");
			items.Add(162200, "162200 - Weather Symbols : Tropopause Level");
			items.Add(162300, "162300 - Weather Symbols : Freezing Level");
			items.Add(162400, "162400 - Weather Symbols : Precipitation of Unknown Type and Intensity");
			items.Add(190101, "190101 - State of the Ground : Without Snow or Measurable Ice Cover : Surface Dry Without Cracks or Appreciable Dust or Loose Sand");
			items.Add(190102, "190102 - State of the Ground : Without Snow or Measurable Ice Cover : Surface Moist");
			items.Add(190103, "190103 - State of the Ground : Without Snow or Measurable Ice Cover : Surface Wet-Standing Water in Small or Large Pools");
			items.Add(190104, "190104 - State of the Ground : Without Snow or Measurable Ice Cover : Surface Flooded");
			items.Add(190105, "190105 - State of the Ground : Without Snow or Measurable Ice Cover : Surface Frozen");
			items.Add(190106, "190106 - State of the Ground : Without Snow or Measurable Ice Cover : Glaze (Thin Ice) on Ground");
			items.Add(190107, "190107 - State of the Ground : Without Snow or Measurable Ice Cover : Loose Dry Dust or Sand not Covering Ground Completely");
			items.Add(190108, "190108 - State of the Ground : Without Snow or Measurable Ice Cover : Thin Loose Dry Dust or Sand Covering Ground Completely");
			items.Add(190109, "190109 - State of the Ground : Without Snow or Measurable Ice Cover : Moderate/Thick Loose Dry Dust or Sand Covering Ground Completely");
			items.Add(190110, "190110 - State of the Ground : Without Snow or Measurable Ice Cover : Extremely Dry with Cracks");
			items.Add(190201, "190201 - State of the Ground : With Snow or Measurable Ice Cover : Predominately Ice Covered");
			items.Add(190202, "190202 - State of the Ground : With Snow or Measurable Ice Cover : Compact or Wet Snow (with or without Ice) Covering Less Than One-Half of Ground");
			items.Add(190203, "190203 - State of the Ground : With Snow or Measurable Ice Cover : Compact or Wet Snow (with or without Ice) Covering  at Least One-Half of Ground-but Ground not Completely Covered");
			items.Add(190204, "190204 - State of the Ground : With Snow or Measurable Ice Cover : Even Layer of Compact or Wet Snow Covering Ground Completely");
			items.Add(190205, "190205 - State of the Ground : With Snow or Measurable Ice Cover : Uneven Layer of Compact or Wet Snow Covering Ground Completely");
			items.Add(190206, "190206 - State of the Ground : With Snow or Measurable Ice Cover : Loose Dry Snow Covering Less Than One-Half of Ground");
			items.Add(190207, "190207 - State of the Ground : With Snow or Measurable Ice Cover : Loose Dry Snow Covering at Least One-Half of Ground-but Ground not Completely Covered");
			items.Add(190208, "190208 - State of the Ground : With Snow or Measurable Ice Cover : Even Layer of Loose Dry Snow Covering Ground Completely");
			items.Add(190209, "190209 - State of the Ground : With Snow or Measurable Ice Cover : Uneven Layer of Loose Dry Snow Covering Ground Completely");
			items.Add(190210, "190210 - State of the Ground : With Snow or Measurable Ice Cover : Snow Covering Ground Completely-Deep Drifts");
			return items;
		}
	}


	public class METOC_Oceanographic_Point_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new METOC_Oceanographic_Point_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110101, "110101 - Ice Systems : Icebergs : Many Icebergs");
			items.Add(110102, "110102 - Ice Systems : Icebergs : Belts and Strips");
			items.Add(110103, "110103 - Ice Systems : Icebergs : General");
			items.Add(110104, "110104 - Ice Systems : Icebergs : Many Icebergs - General");
			items.Add(110105, "110105 - Ice Systems : Icebergs : Bergy Bit");
			items.Add(110106, "110106 - Ice Systems : Icebergs : Many Bergy Bits");
			items.Add(110107, "110107 - Ice Systems : Icebergs : Growler");
			items.Add(110108, "110108 - Ice Systems : Icebergs : Many Growlers");
			items.Add(110109, "110109 - Ice Systems : Icebergs : Floeberg");
			items.Add(110110, "110110 - Ice Systems : Icebergs : Ice Island");
			items.Add(110201, "110201 - Ice Systems : Ice Concentration : Bergy Water");
			items.Add(110202, "110202 - Ice Systems : Ice Concentration : Water with Radar Targets");
			items.Add(110203, "110203 - Ice Systems : Ice Concentration : Ice Free");
			items.Add(110301, "110301 - Ice Systems : Dynamic Processes : Convergence");
			items.Add(110302, "110302 - Ice Systems : Dynamic Processes : Divergence");
			items.Add(110303, "110303 - Ice Systems : Dynamic Processes : Shearing or Shear Zone");
			items.Add(110304, "110304 - Ice Systems : Dynamic Processes : Ice Drift (Direction)");
			items.Add(110400, "110400 - Ice Systems : Sea Ice");
			items.Add(110401, "110401 - Ice Systems : Sea Ice : Ice Thickness (Observed)");
			items.Add(110402, "110402 - Ice Systems : Sea Ice : Ice Thickness (Estimated)");
			items.Add(110403, "110403 - Ice Systems : Sea Ice : Melt Puddles or Flooded Ice");
			items.Add(110700, "110700 - Ice Systems : Snow Cover");
			items.Add(110701, "110701 - Ice Systems : Snow Cover : Sastrugi (with Orientation)");
			items.Add(110801, "110801 - Ice Systems : Topographical Features : Ridges or Hummocks");
			items.Add(110802, "110802 - Ice Systems : Topographical Features : Rafting");
			items.Add(110803, "110803 - Ice Systems : Topographical Features : Jammed Brash Barrier");
			items.Add(120101, "120101 - Hydrography : Depth : Soundings");
			items.Add(120302, "120302 - Hydrography : Ports and Harbors : Berths (Onshore)");
			items.Add(120303, "120303 - Hydrography : Ports and Harbors : Berths (Anchor)");
			items.Add(120304, "120304 - Hydrography : Ports and Harbors : Anchorage - Point");
			items.Add(120307, "120307 - Hydrography : Ports and Harbors : Call in Point");
			items.Add(120309, "120309 - Hydrography : Ports and Harbors : Fishing Harbor - Point");
			items.Add(120310, "120310 - Hydrography : Ports and Harbors : Fish Weirs - Point");
			items.Add(120311, "120311 - Hydrography : Ports and Harbors : Fish Stakes - Point");
			items.Add(120315, "120315 - Hydrography : Ports and Harbors : Landing Place");
			items.Add(120316, "120316 - Hydrography : Ports and Harbors : Offshore Loading Facility - Point");
			items.Add(120321, "120321 - Hydrography : Ports and Harbors : Landing Ring");
			items.Add(120322, "120322 - Hydrography : Ports and Harbors : Ferry Crossing");
			items.Add(120323, "120323 - Hydrography : Ports and Harbors : Cable Ferry Crossing");
			items.Add(120324, "120324 - Hydrography : Ports and Harbors : Dolphin");
			items.Add(120401, "120401 - Hydrography : Aids to Navigation : Beacon");
			items.Add(120402, "120402 - Hydrography : Aids to Navigation : Buoy Default");
			items.Add(120403, "120403 - Hydrography : Aids to Navigation : Marker");
			items.Add(120404, "120404 - Hydrography : Aids to Navigation : Perches/Stakes - Point");
			items.Add(120406, "120406 - Hydrography : Aids to Navigation : Light");
			items.Add(120408, "120408 - Hydrography : Aids to Navigation : Light Vessel/Light Ship");
			items.Add(120409, "120409 - Hydrography : Aids to Navigation : Lighthouse");
			items.Add(120501, "120501 - Hydrography : Dangers/Hazards : Rock Submerged");
			items.Add(120502, "120502 - Hydrography : Dangers/Hazards : Rock Awashed");
			items.Add(120504, "120504 - Hydrography : Dangers/Hazards : Foul Ground - Point");
			items.Add(120506, "120506 - Hydrography : Dangers/Hazards : Kelp/Seaweed - Point");
			items.Add(120508, "120508 - Hydrography : Dangers/Hazards : Snags/Stumps");
			items.Add(120509, "120509 - Hydrography : Dangers/Hazards : Wreck (Uncovers)");
			items.Add(120510, "120510 - Hydrography : Dangers/Hazards : Wreck (Submerged)");
			items.Add(120513, "120513 - Hydrography : Dangers/Hazards : Eddies/Overfalls/Tide Rips");
			items.Add(120601, "120601 - Hydrography : Bottom Features : Bottom Characteristics - Sand");
			items.Add(120602, "120602 - Hydrography : Bottom Features : Bottom Characteristics - Mud");
			items.Add(120603, "120603 - Hydrography : Bottom Features : Bottom Characteristics - Clay");
			items.Add(120604, "120604 - Hydrography : Bottom Features : Bottom Characteristics - Silt");
			items.Add(120605, "120605 - Hydrography : Bottom Features : Bottom Characteristics - Stones");
			items.Add(120606, "120606 - Hydrography : Bottom Features : Bottom Characteristics - Gravel");
			items.Add(120607, "120607 - Hydrography : Bottom Features : Bottom Characteristics - Pebbles");
			items.Add(120608, "120608 - Hydrography : Bottom Features : Bottom Characteristics - Cobbles");
			items.Add(120609, "120609 - Hydrography : Bottom Features : Bottom Characteristics - Rock");
			items.Add(120610, "120610 - Hydrography : Bottom Features : Bottom Characteristics - Coral");
			items.Add(120611, "120611 - Hydrography : Bottom Features : Bottom Characteristics - Shell");
			items.Add(120612, "120612 - Hydrography : Bottom Features : Qualifying Terms - Fine");
			items.Add(120613, "120613 - Hydrography : Bottom Features : Qualifying Terms - Medium");
			items.Add(120614, "120614 - Hydrography : Bottom Features : Qualifying Terms - Coarse");
			items.Add(120701, "120701 - Hydrography : Tide and Current : Water Turbulence");
			items.Add(120704, "120704 - Hydrography : Tide and Current : Tide Data Point");
			items.Add(120705, "120705 - Hydrography : Tide and Current : Tide Gauge");
			items.Add(160400, "160400 - Man-Made Structures : Ford");
			items.Add(160500, "160500 - Man-Made Structures : Lock");
			items.Add(160600, "160600 - Man-Made Structures : Oil/Gas Rig");
			items.Add(160900, "160900 - Man-Made Structures : Pile/Piling/Post");
			return items;
		}
	}


	public class METOCLinesItemsSource : IItemsSource {

		public static ItemCollection Items = new METOCLinesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(45, "45 - Meteorological - Atmospheric");
			items.Add(46, "46 - Meteorological - Oceanographic");
			items.Add(47, "47 - Meteorological - Space");
			return items;
		}
	}


	public class METOC_Atmospheric_Line_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new METOC_Atmospheric_Line_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110301, "110301 - Pressure Systems : Frontal Systems : Cold Front");
			items.Add(110302, "110302 - Pressure Systems : Frontal Systems : Upper Cold Front");
			items.Add(110303, "110303 - Pressure Systems : Frontal Systems : Cold Frontogenesis");
			items.Add(110304, "110304 - Pressure Systems : Frontal Systems : Cold Frontolysis");
			items.Add(110305, "110305 - Pressure Systems : Frontal Systems : Warm Front");
			items.Add(110306, "110306 - Pressure Systems : Frontal Systems : Upper Warm Front");
			items.Add(110307, "110307 - Pressure Systems : Frontal Systems : Warm Frontogenesis");
			items.Add(110308, "110308 - Pressure Systems : Frontal Systems : Warm Frontolysis");
			items.Add(110309, "110309 - Pressure Systems : Frontal Systems : Occluded Front");
			items.Add(110310, "110310 - Pressure Systems : Frontal Systems : Upper Occluded Front");
			items.Add(110311, "110311 - Pressure Systems : Frontal Systems : Occluded Frontolysis");
			items.Add(110312, "110312 - Pressure Systems : Frontal Systems : Stationary Front");
			items.Add(110313, "110313 - Pressure Systems : Frontal Systems : Upper Stationary Front");
			items.Add(110314, "110314 - Pressure Systems : Frontal Systems : Stationary Frontogenesis");
			items.Add(110315, "110315 - Pressure Systems : Frontal Systems : Stationary Frontolysis");
			items.Add(110401, "110401 - Pressure Systems : Lines : Trough Axis");
			items.Add(110402, "110402 - Pressure Systems : Lines : Upper Trough Axis");
			items.Add(110403, "110403 - Pressure Systems : Lines : Ridge Axis");
			items.Add(110404, "110404 - Pressure Systems : Lines : Severe Squall Line");
			items.Add(110405, "110405 - Pressure Systems : Lines : Instability Line");
			items.Add(110406, "110406 - Pressure Systems : Lines : Shear Line");
			items.Add(110407, "110407 - Pressure Systems : Lines : Inter-Tropical Convergence Zone");
			items.Add(110408, "110408 - Pressure Systems : Lines : Convergence Line");
			items.Add(110409, "110409 - Pressure Systems : Lines : Inter-Tropical Discontinuity");
			items.Add(140300, "140300 - Winds : Jet Stream");
			items.Add(140400, "140400 - Winds : Stream Line");
			items.Add(180100, "180100 - Isopleths : Isobar - Surface");
			items.Add(180200, "180200 - Isopleths : Contour - Upper Air");
			items.Add(180300, "180300 - Isopleths : Isotherm");
			items.Add(180400, "180400 - Isopleths : Isotach");
			items.Add(180500, "180500 - Isopleths : Isodrosotherm");
			items.Add(180600, "180600 - Isopleths : Thickness");
			items.Add(180700, "180700 - Isopleths : Operator-Defined Freeform");
			return items;
		}
	}


	public class METOC_Oceanographic_Line_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new METOC_Oceanographic_Line_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110501, "110501 - Ice Systems : Limits : Limits of Visual Observation");
			items.Add(110502, "110502 - Ice Systems : Limits : Limits of Under Cast");
			items.Add(110503, "110503 - Ice Systems : Limits : Limits of Radar Observation");
			items.Add(110504, "110504 - Ice Systems : Limits : Observed Ice Edge or Boundary");
			items.Add(110505, "110505 - Ice Systems : Limits : Estimated Ice Edge or Boundary");
			items.Add(110506, "110506 - Ice Systems : Limits : Ice Edge or Boundary From Radar");
			items.Add(110601, "110601 - Ice Systems : Openings in the Ice : Cracks");
			items.Add(110602, "110602 - Ice Systems : Openings in the Ice : Cracks at a Specific Location");
			items.Add(110603, "110603 - Ice Systems : Openings in the Ice : Lead");
			items.Add(110604, "110604 - Ice Systems : Openings in the Ice : Frozen Lead");
			items.Add(120102, "120102 - Hydrography : Depth : Depth Curve");
			items.Add(120103, "120103 - Hydrography : Depth : Depth Contour");
			items.Add(120201, "120201 - Hydrography : Coastal Hydrography : Coastline");
			items.Add(120205, "120205 - Hydrography : Coastal Hydrography : Foreshore - Line");
			items.Add(120305, "120305 - Hydrography : Ports and Harbors : Anchorage - Line");
			items.Add(120308, "120308 - Hydrography : Ports and Harbors : Pier/Wharf/Quay");
			items.Add(120317, "120317 - Hydrography : Ports and Harbors : Offshore Loading Facility - Line");
			items.Add(120319, "120319 - Hydrography : Ports and Harbors : Ramp - Above Water");
			items.Add(120320, "120320 - Hydrography : Ports and Harbors : Ramp - Below Water");
			items.Add(120326, "120326 - Hydrography : Ports and Harbors : Breakwater/Groin/Jetty - Above Water");
			items.Add(120327, "120327 - Hydrography : Ports and Harbors : Breakwater/Groin/Jetty - Below Water");
			items.Add(120328, "120328 - Hydrography : Ports and Harbors : Seawall");
			items.Add(120407, "120407 - Hydrography : Aids to Navigation : Leading Line");
			items.Add(120511, "120511 - Hydrography : Dangers/Hazards : Breakers");
			items.Add(120512, "120512 - Hydrography : Dangers/Hazards : Reef");
			items.Add(120702, "120702 - Hydrography : Tide and Current : Current Flow - Ebb");
			items.Add(120703, "120703 - Hydrography : Tide and Current : Current Flow - Flood");
			items.Add(150100, "150100 - Limits : Maritime Limit Boundary");
			items.Add(150300, "150300 - Limits : Restricted Area");
			items.Add(160100, "160100 - Man-Made Structures : Submarine Cable");
			items.Add(160300, "160300 - Man-Made Structures : Canal");
			items.Add(160800, "160800 - Man-Made Structures : Pipelines/Pipe");
			return items;
		}
	}


	public class METOCAreasItemsSource : IItemsSource {

		public static ItemCollection Items = new METOCAreasItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(45, "45 - Meteorological - Atmospheric");
			items.Add(46, "46 - Meteorological - Oceanographic");
			items.Add(47, "47 - Meteorological - Space");
			return items;
		}
	}


	public class METOC_Atmospheric_Area_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new METOC_Atmospheric_Area_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(162004, "162004 - Weather Symbols : Tropical Storm Systems : Tropical Storm Wind Areas and Date/Time Labels");
			items.Add(170100, "170100 - Bounded Areas : Instrument Flight Rule (IFR)");
			items.Add(170200, "170200 - Bounded Areas : Marginal Visual Flight Rule (MVFR)");
			items.Add(170300, "170300 - Bounded Areas : Turbulence");
			items.Add(170400, "170400 - Bounded Areas : Icing");
			items.Add(170500, "170500 - Bounded Areas : Liquid Precipitation - Non-Convective Continuous or Intermittent");
			items.Add(170501, "170501 - Bounded Areas : Liquid Precipitation - Non-Convective Continuous or Intermittent : Liquid Precipitation - Convective");
			items.Add(170600, "170600 - Bounded Areas : Freezing /Frozen Precipitation");
			items.Add(170700, "170700 - Bounded Areas : Thunderstorm");
			items.Add(170800, "170800 - Bounded Areas : Fog");
			items.Add(170900, "170900 - Bounded Areas : Dust or Sand");
			items.Add(171000, "171000 - Bounded Areas : Operator-Defined Freeform");
			return items;
		}
	}


	public class METOC_Oceanographic_Area_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new METOC_Oceanographic_Area_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(120104, "120104 - Hydrography : Depth : Depth Area");
			items.Add(120202, "120202 - Hydrography : Coastal Hydrography : Island");
			items.Add(120203, "120203 - Hydrography : Coastal Hydrography : Beach");
			items.Add(120204, "120204 - Hydrography : Coastal Hydrography : Water");
			items.Add(120206, "120206 - Hydrography : Coastal Hydrography : Foreshore - Area");
			items.Add(120306, "120306 - Hydrography : Ports and Harbors : Anchorage - Area");
			items.Add(120312, "120312 - Hydrography : Ports and Harbors : Fish Traps - Area");
			items.Add(120314, "120314 - Hydrography : Ports and Harbors : Drydock");
			items.Add(120318, "120318 - Hydrography : Ports and Harbors : Offshore Loading Facility - Area");
			items.Add(120405, "120405 - Hydrography : Aids to Navigation : Perches/Stakes - Area");
			items.Add(120503, "120503 - Hydrography : Dangers/Hazards : Underwater Danger/Hazard");
			items.Add(120505, "120505 - Hydrography : Dangers/Hazards : Foul Ground - Area");
			items.Add(120507, "120507 - Hydrography : Dangers/Hazards : Kelp/Seaweed - Area");
			items.Add(120514, "120514 - Hydrography : Dangers/Hazards : Discolored Water");
			items.Add(130101, "130101 - Oceanography : Bioluminescence : Visual Detection Ratio (VDR) Level 1-2");
			items.Add(130102, "130102 - Oceanography : Bioluminescence : VDR Level 2-3");
			items.Add(130103, "130103 - Oceanography : Bioluminescence : VDR Level 3-4");
			items.Add(130104, "130104 - Oceanography : Bioluminescence : VDR Level 4-5");
			items.Add(130105, "130105 - Oceanography : Bioluminescence : VDR Level 5-6");
			items.Add(130106, "130106 - Oceanography : Bioluminescence : VDR Level 6-7");
			items.Add(130107, "130107 - Oceanography : Bioluminescence : VDR Level 7-8");
			items.Add(130108, "130108 - Oceanography : Bioluminescence : VDR Level 8-9");
			items.Add(130109, "130109 - Oceanography : Bioluminescence : VDR Level 9-10");
			items.Add(130201, "130201 - Oceanography : Beach Slope : Flat");
			items.Add(130202, "130202 - Oceanography : Beach Slope : Gentle");
			items.Add(130203, "130203 - Oceanography : Beach Slope : Moderate");
			items.Add(130204, "130204 - Oceanography : Beach Slope : Steep");
			items.Add(140101, "140101 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Solid Rock");
			items.Add(140102, "140102 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Clay");
			items.Add(140103, "140103 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Very Coarse Sand");
			items.Add(140104, "140104 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Coarse Sand");
			items.Add(140105, "140105 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Medium Sand");
			items.Add(140106, "140106 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Fine Sand");
			items.Add(140107, "140107 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Very Fine Sand");
			items.Add(140108, "140108 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Very Fine Silt");
			items.Add(140109, "140109 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Fine Silt");
			items.Add(140110, "140110 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Medium Silt");
			items.Add(140111, "140111 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Coarse Silt");
			items.Add(140112, "140112 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Boulders");
			items.Add(140113, "140113 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Cobbles-Oyster Shells");
			items.Add(140114, "140114 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Pebbles-Shells");
			items.Add(140115, "140115 - Geophysics/Acoustics : MIW : MIW Bottom Sediments - Sand and Shells");
			items.Add(140116, "140116 - Geophysics/Acoustics : MIW : MIW Bottom Sediment - Land");
			items.Add(140117, "140117 - Geophysics/Acoustics : MIW : MIW Bottom Sediment - No Data");
			items.Add(140118, "140118 - Geophysics/Acoustics : MIW : Bottom Roughness - Smooth");
			items.Add(140119, "140119 - Geophysics/Acoustics : MIW : Bottom Roughness - Moderate");
			items.Add(140120, "140120 - Geophysics/Acoustics : MIW : Bottom Roughness - Rough");
			items.Add(140121, "140121 - Geophysics/Acoustics : MIW : Clutter (Bottom) - Low");
			items.Add(140122, "140122 - Geophysics/Acoustics : MIW : Clutter (Bottom) - Medium");
			items.Add(140123, "140123 - Geophysics/Acoustics : MIW : Clutter (Bottom) - High");
			items.Add(140124, "140124 - Geophysics/Acoustics : MIW : Impact Burial - 0%");
			items.Add(140125, "140125 - Geophysics/Acoustics : MIW : Impact Burial - 0-10%");
			items.Add(140126, "140126 - Geophysics/Acoustics : MIW : Impact Burial - 10-20%");
			items.Add(140127, "140127 - Geophysics/Acoustics : MIW : Impact Burial - 20-75%");
			items.Add(140128, "140128 - Geophysics/Acoustics : MIW : Impact Burial - >75%");
			items.Add(140129, "140129 - Geophysics/Acoustics : MIW : MIW Bottom Category A");
			items.Add(140130, "140130 - Geophysics/Acoustics : MIW : MIW Bottom Category B");
			items.Add(140131, "140131 - Geophysics/Acoustics : MIW : MIW Bottom Category C");
			items.Add(140132, "140132 - Geophysics/Acoustics : MIW : MIW Bottom Type A1");
			items.Add(140133, "140133 - Geophysics/Acoustics : MIW : MIW Bottom Type A2");
			items.Add(140134, "140134 - Geophysics/Acoustics : MIW : MIW Bottom Type A3");
			items.Add(140135, "140135 - Geophysics/Acoustics : MIW : MIW Bottom Type B1");
			items.Add(140136, "140136 - Geophysics/Acoustics : MIW : MIW Bottom Type B2");
			items.Add(140137, "140137 - Geophysics/Acoustics : MIW : MIW Bottom Type B3");
			items.Add(140138, "140138 - Geophysics/Acoustics : MIW : MIW Bottom Type C1");
			items.Add(140139, "140139 - Geophysics/Acoustics : MIW : MIW Bottom Type C2");
			items.Add(140140, "140140 - Geophysics/Acoustics : MIW : MIW Bottom Type C3");
			items.Add(150200, "150200 - Limits : Maritime Area");
			items.Add(150400, "150400 - Limits : Swept Area");
			items.Add(150500, "150500 - Limits : Training Area");
			items.Add(150600, "150600 - Limits : Operator-Defined");
			items.Add(160200, "160200 - Man-Made Structures : Submerged Crib");
			items.Add(160700, "160700 - Man-Made Structures : Oil/Gas Rig Field");
			return items;
		}
	}


	public class SIGINTItemsSource : IItemsSource {

		public static ItemCollection Items = new SIGINTItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(51, "51 - Signals Intelligence - Air");
			items.Add(50, "50 - Signals Intelligence - Space");
			items.Add(52, "52 - Signals Intelligence - Land");
			items.Add(53, "53 - Signals Intelligence - Surface");
			items.Add(54, "54 - Signals Intelligence - Subsurface");
			return items;
		}
	}


	public class Space_SIGINT_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Space_SIGINT_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110100, "110100 - Signal Intercept (Space) : Communications");
			items.Add(110200, "110200 - Signal Intercept (Space) : Jammer");
			items.Add(110300, "110300 - Signal Intercept (Space) : Radar");
			return items;
		}
	}


	public class Space_SIGINT_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Space_SIGINT_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(14, "14 - Radar : Data Transmission (Space)");
			items.Add(15, "15 - Radar : Earth Surveillance");
			items.Add(21, "21 - Radar : Identification Friend or Foe (Interrogator) (Space)");
			items.Add(24, "24 - Radar : Identification Friend or Foe (Transponder) (Space)");
			items.Add(25, "25 - Jammer : Barrage Jammer (Space)");
			items.Add(26, "26 - Jammer : Click Jammer (Space)");
			items.Add(27, "27 - Jammer : Deceptive Jammer (Space)");
			items.Add(28, "28 - Jammer : Frequency Swept Jammer (Space)");
			items.Add(29, "29 - Jammer : Jammer (General) (Space)");
			items.Add(30, "30 - Jammer : Noise Jammer (Space)");
			items.Add(31, "31 - Jammer : Pulsed Jammer (Space)");
			items.Add(32, "32 - Jammer : Repeater Jammer (Space)");
			items.Add(33, "33 - Jammer : Spot Noise Jammer (Space)");
			items.Add(34, "34 - Jammer : Transponder Jammer (Space)");
			items.Add(36, "36 - Jammer : Missile Control (Space)");
			items.Add(39, "39 - Jammer : Multi-Function (Space)");
			items.Add(42, "42 - Jammer : Missile Tracking (Space)");
			items.Add(43, "43 - Jammer : Navigational/General (Space)");
			items.Add(44, "44 - Jammer : Navigational/Distance Measuring Equipment (Space)");
			items.Add(45, "45 - Jammer : Navigation/Terrain Following (Space)");
			items.Add(49, "49 - Communications : Point-to-Point Line of Sight (LOS) (Space)");
			items.Add(50, "50 - Radar : Instrumentation (Space)");
			items.Add(51, "51 - Radar : Range Only (Space)");
			items.Add(53, "53 - Communications : Satellite Downlink (Space)");
			items.Add(54, "54 - Radar : Space (Space)");
			items.Add(55, "55 - Radar : Surface Search (Space)");
			items.Add(58, "58 - Jammer : Target Acquisition (Space)");
			items.Add(61, "61 - Radar : Target Tracking (Space)");
			items.Add(62, "62 - Radar : Unknown (Space)");
			items.Add(63, "63 - Radar : Video Remoting (Space)");
			items.Add(64, "64 - Radar : Experimental (Space)");
			return items;
		}
	}


	public class SIGINTMobilityItemsSource : IItemsSource {

		public static ItemCollection Items = new SIGINTMobilityItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add("M", "'M' - Mobile");
			items.Add("S", "'S' - Static");
			items.Add("U", "'U' - Uncertain");
			return items;
		}
	}


	public class Air_SIGINT_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Air_SIGINT_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110100, "110100 - Signal Intercept (Air) : Communications");
			items.Add(110200, "110200 - Signal Intercept (Air) : Jammer");
			items.Add(110300, "110300 - Signal Intercept (Air) : Radar");
			return items;
		}
	}


	public class Air_SIGINT_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Air_SIGINT_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(02, "02 - Radar : Airborne Search and Bombing");
			items.Add(03, "03 - Radar : Airborne Intercept");
			items.Add(04, "04 - Radar : Altimeter");
			items.Add(05, "05 - Radar : Airborne Reconnaissance and Mapping");
			items.Add(06, "06 - Radar : Air Traffic Control (Air)");
			items.Add(07, "07 - Radar : Beacon Transponder (not IFF) (Air)");
			items.Add(08, "08 - Radar : Battlefield Surveillance (Air)");
			items.Add(10, "10 - Radar : Controlled Intercept (Air)");
			items.Add(11, "11 - Communications : Cellular/Mobile (Air)");
			items.Add(12, "12 - Radar : Coastal Surveillance");
			items.Add(13, "13 - Radar : Decoy/Mimic");
			items.Add(14, "14 - Radar : Data Transmission (Air)");
			items.Add(16, "16 - Radar : Early Warning (Air)");
			items.Add(17, "17 - Radar : Fire Control (Air)");
			items.Add(18, "18 - Radar : Ground Mapping");
			items.Add(21, "21 - Radar : Identification Friend or Foe (Interrogator) (Air)");
			items.Add(23, "23 - Radar : Ionospheric Sounding (Air)");
			items.Add(24, "24 - Radar : Identification Friend or Foe (Transponder) (Air)");
			items.Add(25, "25 - Jammer : Barrage Jammer (Air)");
			items.Add(26, "26 - Jammer : Click Jammer (Air)");
			items.Add(27, "27 - Jammer : Deceptive Jammer (Air)");
			items.Add(28, "28 - Jammer : Frequency Swept Jammer (Air)");
			items.Add(29, "29 - Jammer : Jammer (General) (Air)");
			items.Add(30, "30 - Jammer : Noise Jammer (Air)");
			items.Add(31, "31 - Jammer : Pulsed Jammer (Air)");
			items.Add(32, "32 - Jammer : Repeater Jammer (Air)");
			items.Add(33, "33 - Jammer : Spot Noise Jammer (Air)");
			items.Add(34, "34 - Jammer : Transponder Jammer (Air)");
			items.Add(35, "35 - Radar : Missile Acquisition (Air)");
			items.Add(36, "36 - Radar : Missile Control (Air)");
			items.Add(37, "37 - Radar : Missile Downlink");
			items.Add(38, "38 - Radar : Meteorological (Air)");
			items.Add(39, "39 - Jammer : Multi-Function (Air)");
			items.Add(40, "40 - Radar : Missile Guidance (Air)");
			items.Add(41, "41 - Radar : Missile Homing");
			items.Add(42, "42 - Jammer : Missile Tracking (Air)");
			items.Add(43, "43 - Jammer : Navigational/General (Air)");
			items.Add(44, "44 - Jammer : Navigational/Distance Measuring Equipment (Air)");
			items.Add(45, "45 - Jammer : Navigation/Terrain Following (Air)");
			items.Add(46, "46 - Jammer : Navigational/Weather Avoidance (Air)");
			items.Add(47, "47 - Communications : Omni-Line of Sight (LOS) (Air)");
			items.Add(48, "48 - Radar : Proximity Use");
			items.Add(49, "49 - Communications : Point-to-Point Line of Sight (LOS) (Air)");
			items.Add(50, "50 - Radar : Instrumentation (Air)");
			items.Add(51, "51 - Radar : Range Only (Air)");
			items.Add(54, "54 - Radar : Space (Air)");
			items.Add(55, "55 - Radar : Surface Search (Air)");
			items.Add(57, "57 - Radar : Satellite Uplink");
			items.Add(58, "58 - Radar : Target Acquisition");
			items.Add(59, "59 - Radar : Target Illumination (Air)");
			items.Add(61, "61 - Radar : Target Tracking (Air)");
			items.Add(62, "62 - Radar : Unknown (Air)");
			items.Add(63, "63 - Radar : Video Remoting (Air)");
			items.Add(64, "64 - Radar : Experimental (Air)");
			return items;
		}
	}


	public class Land_SIGINT_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_SIGINT_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110100, "110100 - Signal Intercept (Land) : Communications");
			items.Add(110200, "110200 - Signal Intercept (Land) : Jammer");
			items.Add(110300, "110300 - Signal Intercept (Land) : Radar");
			return items;
		}
	}


	public class Land_SIGINT_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Land_SIGINT_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Radar : Anti-Aircraft Fire Control (Land)");
			items.Add(06, "06 - Radar : Air Traffic Control (Land)");
			items.Add(07, "07 - Radar : Beacon Transponder (not IFF) (Land)");
			items.Add(08, "08 - Radar : Battlefield Surveillance (Land)");
			items.Add(09, "09 - Radar : Controlled Approach (Land)");
			items.Add(10, "10 - Radar : Controlled Intercept (Land)");
			items.Add(11, "11 - Communications : Cellular/Mobile (Land)");
			items.Add(13, "13 - Jammer : Decoy/Mimic (Land)");
			items.Add(14, "14 - Radar : Data Transmission (Land)");
			items.Add(16, "16 - Radar : Early Warning (Land)");
			items.Add(17, "17 - Radar : Fire Control (Land)");
			items.Add(19, "19 - Radar : Height Finding (Land)");
			items.Add(20, "20 - Radar : Harbor Surveillance");
			items.Add(21, "21 - Radar : Identification Friend or Foe (Interrogator) (Land)");
			items.Add(22, "22 - Radar : Instrument Landing System (Land)");
			items.Add(23, "23 - Radar : Ionospheric Sounding (Land)");
			items.Add(24, "24 - Radar : Identification Friend or Foe (Transponder) (Land)");
			items.Add(25, "25 - Jammer : Barrage Jammer (Land)");
			items.Add(26, "26 - Jammer : Click Jammer (Land)");
			items.Add(27, "27 - Jammer : Deceptive Jammer (Land)");
			items.Add(28, "28 - Jammer : Frequency Swept Jammer (Land)");
			items.Add(29, "29 - Jammer : Jammer (General) (Land)");
			items.Add(30, "30 - Jammer : Noise Jammer (Land)");
			items.Add(31, "31 - Jammer : Pulsed Jammer (Land)");
			items.Add(32, "32 - Jammer : Repeater Jammer (Land)");
			items.Add(33, "33 - Jammer : Spot Noise Jammer (Land)");
			items.Add(34, "34 - Jammer : Transponder Jammer (Land)");
			items.Add(35, "35 - Radar : Missile Acquisition (Land)");
			items.Add(36, "36 - Jammer : Missile Control (Land)");
			items.Add(38, "38 - Radar : Meteorological (Land)");
			items.Add(39, "39 - Jammer : Multi-Function (Land)");
			items.Add(40, "40 - Radar : Missile Guidance (Land)");
			items.Add(42, "42 - Jammer : Missile Tracking (Land)");
			items.Add(43, "43 - Jammer : Navigational/General (Land)");
			items.Add(44, "44 - Jammer : Navigational/Distance Measuring Equipment (Land)");
			items.Add(45, "45 - Jammer : Navigation/Terrain Following (Land)");
			items.Add(46, "46 - Jammer : Navigational/Weather Avoidance (Land)");
			items.Add(47, "47 - Communications : Omni-Line of Sight (LOS) (Land)");
			items.Add(49, "49 - Communications : Point-to-Point Line of Sight (LOS) (Land)");
			items.Add(50, "50 - Radar : Instrumentation (Land)");
			items.Add(51, "51 - Radar : Range Only (Land)");
			items.Add(54, "54 - Radar : Space (Land)");
			items.Add(55, "55 - Radar : Surface Search (Land)");
			items.Add(56, "56 - Radar : Shell Tracking");
			items.Add(57, "57 - Communications : Satellite Uplink (Land)");
			items.Add(58, "58 - Jammer : Target Acquisition (Land)");
			items.Add(59, "59 - Radar : Target Illumination (Land)");
			items.Add(60, "60 - Communications : Tropospheric Scatter");
			items.Add(61, "61 - Radar : Target Tracking (Land)");
			items.Add(62, "62 - Radar : Unknown (Land)");
			items.Add(63, "63 - Radar : Video Remoting (Land)");
			items.Add(64, "64 - Radar : Experimental (Land)");
			return items;
		}
	}


	public class Surface_SIGINT_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Surface_SIGINT_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110100, "110100 - Signal Intercept (Sea Surface) : Communications");
			items.Add(110200, "110200 - Signal Intercept (Sea Surface) : Jammer");
			items.Add(110300, "110300 - Signal Intercept (Sea Surface) : Radar");
			return items;
		}
	}


	public class Surface_SIGINT_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Surface_SIGINT_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(01, "01 - Radar : Anti-Aircraft Fire Control (Sea Surface)");
			items.Add(06, "06 - Radar : Air Traffic Control (Sea Surface)");
			items.Add(07, "07 - Radar : Beacon Transponder (not IFF) (Sea Surface)");
			items.Add(09, "09 - Radar : Controlled Approach (Sea Surface)");
			items.Add(10, "10 - Radar : Controlled Intercept (Sea Surface)");
			items.Add(11, "11 - Communications : Cellular/Mobile (Sea Surface)");
			items.Add(13, "13 - Jammer : Decoy/Mimic (Sea Surface)");
			items.Add(14, "14 - Radar : Data Transmission (Sea Surface)");
			items.Add(16, "16 - Radar : Early Warning (Sea Surface)");
			items.Add(17, "17 - Radar : Fire Control (Sea Surface)");
			items.Add(19, "19 - Radar : Height Finding (Sea Surface)");
			items.Add(21, "21 - Radar : Identification Friend or Foe (Interrogator) (Sea Surface)");
			items.Add(22, "22 - Radar : Instrument Landing System (Sea Surface)");
			items.Add(24, "24 - Radar : Identification Friend or Foe (Transponder) (Sea Surface)");
			items.Add(25, "25 - Jammer : Barrage Jammer (Sea Surface)");
			items.Add(26, "26 - Jammer : Click Jammer (Sea Surface)");
			items.Add(27, "27 - Jammer : Deceptive Jammer (Sea Surface)");
			items.Add(28, "28 - Jammer : Frequency Swept Jammer (Sea Surface)");
			items.Add(29, "29 - Jammer : Jammer (General) (Sea Surface)");
			items.Add(30, "30 - Jammer : Noise Jammer (Sea Surface)");
			items.Add(31, "31 - Jammer : Pulsed Jammer (Sea Surface)");
			items.Add(32, "32 - Jammer : Repeater Jammer (Sea Surface)");
			items.Add(33, "33 - Jammer : Spot Noise Jammer (Sea Surface)");
			items.Add(34, "34 - Jammer : Transponder Jammer (Sea Surface)");
			items.Add(35, "35 - Radar : Missile Acquisition (Sea Surface)");
			items.Add(36, "36 - Jammer : Missile Control (Sea Surface)");
			items.Add(38, "38 - Radar : Meteorological (Sea Surface)");
			items.Add(39, "39 - Jammer : Multi-Function (Sea Surface)");
			items.Add(40, "40 - Radar : Missile Guidance (Sea Surface)");
			items.Add(42, "42 - Jammer : Missile Tracking (Sea Surface)");
			items.Add(43, "43 - Jammer : Navigational/General (Sea Surface)");
			items.Add(44, "44 - Jammer : Navigational/Distance Measuring Equipment (Sea Surface)");
			items.Add(45, "45 - Jammer : Navigation/Terrain Following (Sea Surface)");
			items.Add(46, "46 - Jammer : Navigational/Weather Avoidance (Sea Surface)");
			items.Add(47, "47 - Air/Land/Sea Surface/Subsurface Communications : Omni-Line of Sight (LOS) (Sea Surface)");
			items.Add(49, "49 - Communications : Point-to-Point Line of Sight (LOS) (Sea Surface)");
			items.Add(50, "50 - Radar : Instrumentation (Sea Surface)");
			items.Add(51, "51 - Radar : Range Only (Sea Surface)");
			items.Add(52, "52 - Radar : Sonobuoy (Sea Surface)");
			items.Add(54, "54 - Radar : Space (Sea Surface)");
			items.Add(55, "55 - Radar : Surface Search (Sea Surface)");
			items.Add(57, "57 - Communications : Satellite Uplink (Sea Surface)");
			items.Add(58, "58 - Jammer : Target Acquisition (Sea Surface)");
			items.Add(59, "59 - Radar : Target Illumination (Sea Surface)");
			items.Add(61, "61 - Radar : Target Tracking (Sea Surface)");
			items.Add(62, "62 - Radar : Unknown (Sea Surface)");
			items.Add(63, "63 - Radar : Video Remoting (Sea Surface)");
			items.Add(64, "64 - Radar : Experimental (Sea Surface)");
			return items;
		}
	}


	public class Subsurface_SIGINT_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Subsurface_SIGINT_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110100, "110100 - Signal Intercept (Sea Subsurface) : Communications");
			items.Add(110200, "110200 - Signal Intercept (Sea Subsurface) : Jammer");
			items.Add(110300, "110300 - Signal Intercept (Sea Subsurface) : Radar");
			return items;
		}
	}


	public class Subsurface_SIGINT_Modifier_OnesItemsSource : IItemsSource {

		public static ItemCollection Items = new Subsurface_SIGINT_Modifier_OnesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(00, "00 - Unspecified");
			items.Add(07, "07 - Radar : Beacon Transponder (not IFF) (Sea Subsurface)");
			items.Add(11, "11 - Communications : Cellular/Mobile (Sea Subsurface)");
			items.Add(13, "13 - Jammer : Decoy/Mimic (Sea Subsurface)");
			items.Add(14, "14 - Radar : Data Transmission (Sea Subsurface)");
			items.Add(16, "16 - Radar : Early Warning (Sea Subsurface)");
			items.Add(21, "21 - Radar : Identification Friend or Foe (Interrogator) (Sea Subsurface)");
			items.Add(24, "24 - Radar : Identification Friend or Foe (Transponder) (Sea Subsurface)");
			items.Add(25, "25 - Jammer : Barrage Jammer (Sea Subsurface)");
			items.Add(26, "26 - Jammer : Click Jammer (Sea Subsurface)");
			items.Add(27, "27 - Jammer : Deceptive Jammer (Sea Subsurface)");
			items.Add(28, "28 - Jammer : Frequency Swept Jammer (Sea Subsurface)");
			items.Add(29, "29 - Jammer : Jammer (General) (Sea Subsurface)");
			items.Add(30, "30 - Jammer : Noise Jammer (Sea Subsurface)");
			items.Add(31, "31 - Jammer : Pulsed Jammer (Sea Subsurface)");
			items.Add(32, "32 - Jammer : Repeater Jammer (Sea Subsurface)");
			items.Add(33, "33 - Jammer : Spot Noise Jammer (Sea Subsurface)");
			items.Add(34, "34 - Jammer : Transponder Jammer (Sea Subsurface)");
			items.Add(36, "36 - Jammer : Missile Control (Sea Subsurface)");
			items.Add(39, "39 - Jammer : Multi-Function (Sea Subsurface)");
			items.Add(42, "42 - Jammer : Missile Tracking (Sea Subsurface)");
			items.Add(43, "43 - Jammer : Navigational/General (Sea Subsurface)");
			items.Add(44, "44 - Jammer : Navigational/Distance Measuring Equipment (Sea Subsurface)");
			items.Add(45, "45 - Jammer : Navigation/Terrain Following (Sea Subsurface)");
			items.Add(46, "46 - Jammer : Navigational/Weather Avoidance (Sea Subsurface)");
			items.Add(47, "47 - Communications : Omni-Line of Sight (LOS) (Sea Subsurface)");
			items.Add(49, "49 - Communications : Point-to-Point Line of Sight (LOS) (Sea Subsurface)");
			items.Add(50, "50 - Radar : Instrumentation (Sea Subsurface)");
			items.Add(51, "51 - Radar : Range Only (Sea Subsurface)");
			items.Add(52, "52 - Radar : Sonobuoy (Sea Subsurface)");
			items.Add(54, "54 - Radar : Space (Sea Subsurface)");
			items.Add(55, "55 - Radar : Surface Search (Sea Subsurface)");
			items.Add(57, "57 - Communications : Satellite Uplink (Sea Subsurface)");
			items.Add(58, "58 - Jammer : Target Acquisition (Sea Subsurface)");
			items.Add(61, "61 - Radar : Target Tracking (Sea Subsurface)");
			items.Add(62, "62 - Radar : Unknown (Sea Subsurface)");
			items.Add(63, "63 - Radar : Video Remoting (Sea Subsurface)");
			items.Add(64, "64 - Radar : Experimental (Sea Subsurface)");
			return items;
		}
	}


	public class CyberspaceItemsSource : IItemsSource {

		public static ItemCollection Items = new CyberspaceItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(60, "60 - Cyberspace");
			return items;
		}
	}


	public class Cyberspace_EntitiesItemsSource : IItemsSource {

		public static ItemCollection Items = new Cyberspace_EntitiesItemsSource().GetValues();

		public ItemCollection GetValues() {
			var items = new Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ItemCollection();
			items.Add(000000, "000000 - Unspecified");
			items.Add(110100, "110100 - Botnet : Command and Control (C2)");
			items.Add(110200, "110200 - Botnet : Herder");
			items.Add(110300, "110300 - Botnet : Callback Domain");
			items.Add(110400, "110400 - Botnet : Zombie");
			items.Add(120100, "120100 - Infection : APT");
			items.Add(120101, "120101 - Infection : APT : APT with C2");
			items.Add(120102, "120102 - Infection : APT : APT with Self Propagation");
			items.Add(120103, "120103 - Infection : APT : APT with C2 and Self Propagation");
			items.Add(120104, "120104 - Infection : APT : Other");
			items.Add(120200, "120200 - Infection : NAPT");
			items.Add(120201, "120201 - Infection : NAPT : NAPT with C2");
			items.Add(120202, "120202 - Infection : NAPT : NAPT with Self Propagation");
			items.Add(120203, "120203 - Infection : NAPT : NAPT with C2 and Self Propagation");
			items.Add(120204, "120204 - Infection : NAPT : Other");
			items.Add(130100, "130100 - Health and Status : Normal");
			items.Add(130200, "130200 - Health and Status : Network Outage");
			items.Add(130300, "130300 - Health and Status : Unknown");
			items.Add(130400, "130400 - Health and Status : Impaired");
			items.Add(140100, "140100 - Device Type : Core Router");
			items.Add(140200, "140200 - Device Type : Router");
			items.Add(140300, "140300 - Device Type : Cross Domain Solution");
			items.Add(140400, "140400 - Device Type : Mail Server");
			items.Add(140500, "140500 - Device Type : Web Server");
			items.Add(140600, "140600 - Device Type : Domain Server");
			items.Add(140700, "140700 - Device Type : File Server");
			items.Add(140800, "140800 - Device Type : Peer-to-Peer Node");
			items.Add(140900, "140900 - Device Type : Firewall");
			items.Add(141000, "141000 - Device Type : Switch");
			items.Add(141100, "141100 - Device Type : Host");
			items.Add(141200, "141200 - Device Type : Virtual Private Network (VPN)");
			items.Add(150100, "150100 - Device Domain : Department of Defense (DoD)");
			items.Add(150200, "150200 - Device Domain : Government");
			items.Add(150300, "150300 - Device Domain : Contractor");
			items.Add(150400, "150400 - Device Domain : Supervisory Control and Data Acquisition (SCADA)");
			items.Add(150500, "150500 - Device Domain : Non-Government");
			items.Add(160100, "160100 - Effect : Infection");
			items.Add(160200, "160200 - Effect : Degradation");
			items.Add(160300, "160300 - Effect : Data Spoofing");
			items.Add(160400, "160400 - Effect : Data Manipulation");
			items.Add(160500, "160500 - Effect : Exfiltration");
			items.Add(160600, "160600 - Effect : Power Outage");
			items.Add(160700, "160700 - Effect : Network Outage");
			items.Add(160800, "160800 - Effect : Service Outage");
			items.Add(160900, "160900 - Effect : Device Outage");
			return items;
		}
	}


}

namespace Mil2525.Fields {

    using Mil2525.Domains;

    public partial class SymbolSet {

        /// <summary>
        /// The complete list of supported MIL2525d Symbol Sets
        /// </summary>
        public static Dictionary<string,SymbolSet> SymbolSets = new Dictionary<string, SymbolSet>() {
			{"Air", new SymbolSet("Air","Air",1)}
			,{"Air (Missile)", new SymbolSet("Air (Missile)","Air Missile",2)}
			,{"Space", new SymbolSet("Space","Space Equipment, Platform, and Missile",5)}
			,{"Space (Missile)", new SymbolSet("Space (Missile)","Space Equipment, Platform, and Missile",6)}
			,{"Units", new SymbolSet("Units","Land Units",10)}
			,{"Civilian", new SymbolSet("Civilian","Civilian Individual/Organization",11)}
			,{"LandEquipment", new SymbolSet("LandEquipment","Land Equipment",15)}
			,{"Installations", new SymbolSet("Installations","Installations and Infrastructures",20)}
			,{"ControlMeasuresPoints", new SymbolSet("ControlMeasuresPoints","Control Measures Points",25)}
			,{"ControlMeasuresLines", new SymbolSet("ControlMeasuresLines","Control Measures Lines",25)}
			,{"ControlMeasuresAreas", new SymbolSet("ControlMeasuresAreas","Control Measures Areas",25)}
			,{"SeaSurface", new SymbolSet("SeaSurface","Sea Surface",30)}
			,{"SeaSubSurface", new SymbolSet("SeaSubSurface","Sea SubSurface",35)}
			,{"SeaSubSurface (Mine Warfare)", new SymbolSet("SeaSubSurface (Mine Warfare)","Mine Warfare",36)}
			,{"Activities", new SymbolSet("Activities","Activities",40)}
			,{"METOCPoints (Atmospheric)", new SymbolSet("METOCPoints (Atmospheric)","Meteorological and Oceanographic (METOC) Atmospheric Points",45)}
			,{"METOCPoints (Oceanographic)", new SymbolSet("METOCPoints (Oceanographic)","Meteorological and Oceanographic (METOC) Oceanographic Points",46)}
			,{"METOCLines (Atmospheric)", new SymbolSet("METOCLines (Atmospheric)","Meteorological and Oceanographic (METOC) Atmospheric Lines",45)}
			,{"METOCLines (Oceanographic)", new SymbolSet("METOCLines (Oceanographic)","Meteorological and Oceanographic (METOC) Oceanographic Lines",46)}
			,{"METOCAreas (Atmospheric)", new SymbolSet("METOCAreas (Atmospheric)","Meteorological and Oceanographic (METOC) Atmospheric Areas",45)}
			,{"METOCAreas (Oceanographic)", new SymbolSet("METOCAreas (Oceanographic)","Meteorological and Oceanographic (METOC) Oceanographic Areas",46)}
			,{"SIGINT (Space)", new SymbolSet("SIGINT (Space)","Signals Intelligence (SIGINT) Space",50)}
			,{"SIGINT (Air)", new SymbolSet("SIGINT (Air)","Signals Intelligence (SIGINT) Air",51)}
			,{"SIGINT (Land)", new SymbolSet("SIGINT (Land)","Signals Intelligence (SIGINT) Land",52)}
			,{"SIGINT (Surface)", new SymbolSet("SIGINT (Surface)","Signals Intelligence (SIGINT) Surface",53)}
			,{"SIGINT (Subsurface)", new SymbolSet("SIGINT (Subsurface)","Signals Intelligence (SIGINT) Subsurface",54)}
			,{"Cyberspace", new SymbolSet("Cyberspace","Cyberspace",60)}
        };
    }

    public abstract partial class Fields_Base : INotifyPropertyChanged {

        public static Dictionary<string, Fields_Base> FieldClasses = new Dictionary<string, Fields_Base>() {
			{"Air", new Fields_Air()}
			,{"Air (Missile)", new Fields_Air_Missile()}
			,{"Space", new Fields_Space()}
			,{"Space (Missile)", new Fields_Space_Missile()}
			,{"Units", new Fields_Units()}
			,{"Civilian", new Fields_Civilian()}
			,{"LandEquipment", new Fields_LandEquipment()}
			,{"Installations", new Fields_Installations()}
			,{"ControlMeasuresPoints", new Fields_ControlMeasuresPoints()}
			,{"ControlMeasuresLines", new Fields_ControlMeasuresLines()}
			,{"ControlMeasuresAreas", new Fields_ControlMeasuresAreas()}
			,{"SeaSurface", new Fields_SeaSurface()}
			,{"SeaSubSurface", new Fields_SeaSubSurface()}
			,{"SeaSubSurface (Mine Warfare)", new Fields_SeaSubSurface_Mine_Warfare()}
			,{"Activities", new Fields_Activities()}
			,{"METOCPoints (Atmospheric)", new Fields_METOCPoints_Atmospheric()}
			,{"METOCPoints (Oceanographic)", new Fields_METOCPoints_Oceanographic()}
			,{"METOCLines (Atmospheric)", new Fields_METOCLines_Atmospheric()}
			,{"METOCLines (Oceanographic)", new Fields_METOCLines_Oceanographic()}
			,{"METOCAreas (Atmospheric)", new Fields_METOCAreas_Atmospheric()}
			,{"METOCAreas (Oceanographic)", new Fields_METOCAreas_Oceanographic()}
			,{"SIGINT (Space)", new Fields_SIGINT_Space()}
			,{"SIGINT (Air)", new Fields_SIGINT_Air()}
			,{"SIGINT (Land)", new Fields_SIGINT_Land()}
			,{"SIGINT (Surface)", new Fields_SIGINT_Surface()}
			,{"SIGINT (Subsurface)", new Fields_SIGINT_Subsurface()}
			,{"Cyberspace", new Fields_Cyberspace()}
        };
    }
}

