//   Copyright 2019 Esri

//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at

//       http://www.apache.org/licenses/LICENSE-2.0

//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

using System.Linq;
using System.Threading.Tasks;
using ArcGIS.Core.Geometry;
using ArcGIS.Desktop.Mapping;
using ArcGIS.Desktop.Framework.Threading.Tasks;
using ArcGIS.Desktop.Editing.Attributes;
using ArcGIS.Desktop.Editing;

namespace AnnoTools
{
  /// <summary>
  /// Illustrates two ways in which you can modify the text of an annotation feature using the EditOperation.Modify method.  Note that 
  /// the TextString field needs to exist in the feature class schema in order for you to use EditOperation.Modify.  If the TextString field
  /// does not physically exist in the feature class schema then the only way to modify annotation text at ArcGIS Pro 2.1 is to use the 
  /// GetGraphic and SetGraphic methods on the AnnotationFeature to modify the CIMTextGraphic in conjunction with the EditOperation.Callback
  /// method (see AnnoModifySymbol.cs for an example of this). 
  /// </summary>
  /// <remarks>
  /// The only guaranteed fields in an annotation feature class schema are AnnotationClassID, SymbolID, Element, FeatureID, ZOrder, 
  /// Status and Shape.  All other fields which store text formatting attributes (such as TextString, FontName,  VerticalAlignment etc) 
  /// are not guaranteed to exist in the physical schema.   This is different from the annotation schema in ArcGIS 10x where all fields 
  /// existed and were unable to be deleted. In ArcGIS Pro, these text formatting fields are able to be deleted by the user if they exist; 
  /// they are no longer designated as protected or system fields. 
  /// <para></para>
  /// Take care when writing  or porting tools that create or modify annotation features, it is essential to take this important concept into account. 
  /// <para></para>
  /// </remarks>
  internal class AnnoModifyText : MapTool
  {
    public AnnoModifyText()
    {
      IsSketchTool = true;
      SketchType = SketchGeometryType.Rectangle;
      SketchOutputMode = SketchOutputMode.Map;
    }

    protected override Task OnToolActivateAsync(bool active)
    {
      return base.OnToolActivateAsync(active);
    }

    protected override Task<bool> OnSketchCompleteAsync(Geometry geometry)
    {
      // execute on the MCT
      return QueuedTask.Run(() =>
      {
        // find features under the sketch 
        var features = MapView.Active.GetFeatures(geometry);
        if (features.Count == 0)
          return false;

        EditOperation op = null;
        foreach (var layerKey in features.Keys)
        {
          // is it an anno layer?
          if (!(layerKey is AnnotationLayer))
            continue;

          // are there features?
          var featOids = features[layerKey];
          if (featOids.Count == 0)
            continue;

          // use the inspector methodology - load multiple features at once
          var insp = new Inspector();
          insp.Load(layerKey, featOids);

          // make sure tha attribute exists - remember TextString is not guaranteed in the schema
          Attribute att = insp.FirstOrDefault(a => a.FieldName.ToUpper() == "TEXTSTRING");
          if (att == null)
            continue;
          insp["TEXTSTRING"] = "Hello World";

          // create the edit operation
          if (op == null)
          {
            op = new EditOperation();
            op.Name = "Update annotation text";
            op.SelectModifiedFeatures = true;
            op.SelectNewFeatures = false;
          }

          op.Modify(insp);

          // OR 
          // rather than using the inspector you can use the Dictionary methodology - again TextString has to exist in the schema for the attributes to be applied.

          //Dictionary<string, object> newAtts = new Dictionary<string, object>();
          //newAtts.Add("TEXTSTRING", "Hello World");
          //foreach (var oid in featOids)
          //  op.Modify(layerKey, oid, newAtts);
        }

        // execute the operation
        if ((op != null) && !op.IsEmpty)
          return op.Execute();
        return 
          false;

      });
    }
  }
}



